WEBVTT
Kind: captions
Language: en

00:00:13.750 --> 00:00:20.160 align:start position:0%
 
all<00:00:14.260><c> right</c><00:00:15.000><c> I</c><00:00:16.260><c> looked</c><00:00:17.260><c> at</c><00:00:17.410><c> the</c><00:00:17.530><c> agenda</c><00:00:17.790><c> and</c><00:00:19.170><c> it</c>

00:00:20.160 --> 00:00:20.170 align:start position:0%
all right I looked at the agenda and it
 

00:00:20.170 --> 00:00:22.710 align:start position:0%
all right I looked at the agenda and it
looks<00:00:20.380><c> like</c><00:00:20.590><c> I'm</c><00:00:20.860><c> either</c><00:00:21.310><c> in</c><00:00:21.790><c> your</c><00:00:22.150><c> lunch</c><00:00:22.420><c> or</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
looks like I'm either in your lunch or
 

00:00:22.720 --> 00:00:25.109 align:start position:0%
looks like I'm either in your lunch or
I'm<00:00:23.170><c> between</c><00:00:23.560><c> you</c><00:00:23.860><c> and</c><00:00:24.099><c> having</c><00:00:24.490><c> lunch</c><00:00:24.760><c> so</c>

00:00:25.109 --> 00:00:25.119 align:start position:0%
I'm between you and having lunch so
 

00:00:25.119 --> 00:00:26.850 align:start position:0%
I'm between you and having lunch so
let's<00:00:25.150><c> let's</c><00:00:25.900><c> try</c><00:00:26.050><c> to</c><00:00:26.170><c> stick</c><00:00:26.439><c> to</c><00:00:26.590><c> the</c><00:00:26.680><c> schedule</c>

00:00:26.850 --> 00:00:26.860 align:start position:0%
let's let's try to stick to the schedule
 

00:00:26.860 --> 00:00:30.570 align:start position:0%
let's let's try to stick to the schedule
here<00:00:27.310><c> welcome</c><00:00:28.300><c> to</c><00:00:28.420><c> this</c><00:00:28.540><c> talk</c><00:00:29.190><c> talk</c><00:00:30.190><c> is</c><00:00:30.369><c> called</c>

00:00:30.570 --> 00:00:30.580 align:start position:0%
here welcome to this talk talk is called
 

00:00:30.580 --> 00:00:32.310 align:start position:0%
here welcome to this talk talk is called
let's<00:00:30.910><c> refresh</c><00:00:31.300><c> our</c><00:00:31.480><c> memory</c><00:00:31.810><c> memory</c>

00:00:32.310 --> 00:00:32.320 align:start position:0%
let's refresh our memory memory
 

00:00:32.320 --> 00:00:35.670 align:start position:0%
let's refresh our memory memory
management<00:00:32.710><c> in</c><00:00:33.040><c> dotnet</c><00:00:33.430><c> and</c><00:00:34.050><c> if</c><00:00:35.050><c> you</c><00:00:35.290><c> are</c><00:00:35.379><c> here</c>

00:00:35.670 --> 00:00:35.680 align:start position:0%
management in dotnet and if you are here
 

00:00:35.680 --> 00:00:38.460 align:start position:0%
management in dotnet and if you are here
for<00:00:35.710><c> the</c><00:00:36.129><c> really</c><00:00:36.640><c> in-depth</c><00:00:37.330><c> hardcore</c><00:00:38.050><c> stuff</c>

00:00:38.460 --> 00:00:38.470 align:start position:0%
for the really in-depth hardcore stuff
 

00:00:38.470 --> 00:00:40.710 align:start position:0%
for the really in-depth hardcore stuff
then<00:00:39.370><c> I'm</c><00:00:39.489><c> sorry</c><00:00:39.670><c> I</c><00:00:39.820><c> will</c><00:00:40.030><c> have</c><00:00:40.180><c> to</c><00:00:40.300><c> disappoint</c>

00:00:40.710 --> 00:00:40.720 align:start position:0%
then I'm sorry I will have to disappoint
 

00:00:40.720 --> 00:00:43.229 align:start position:0%
then I'm sorry I will have to disappoint
you<00:00:40.930><c> the</c><00:00:41.140><c> idea</c><00:00:41.410><c> of</c><00:00:41.500><c> this</c><00:00:41.620><c> talk</c><00:00:41.890><c> is</c><00:00:41.920><c> to</c><00:00:42.239><c> refresh</c>

00:00:43.229 --> 00:00:43.239 align:start position:0%
you the idea of this talk is to refresh
 

00:00:43.239 --> 00:00:45.150 align:start position:0%
you the idea of this talk is to refresh
your<00:00:43.540><c> memory</c><00:00:43.600><c> about</c><00:00:43.989><c> memory</c><00:00:44.620><c> management</c><00:00:44.890><c> in</c>

00:00:45.150 --> 00:00:45.160 align:start position:0%
your memory about memory management in
 

00:00:45.160 --> 00:00:47.310 align:start position:0%
your memory about memory management in
nets<00:00:45.580><c> and</c><00:00:45.850><c> to</c><00:00:46.510><c> look</c><00:00:46.660><c> at</c><00:00:46.780><c> a</c><00:00:46.809><c> couple</c><00:00:47.170><c> of</c><00:00:47.260><c> things</c>

00:00:47.310 --> 00:00:47.320 align:start position:0%
nets and to look at a couple of things
 

00:00:47.320 --> 00:00:50.700 align:start position:0%
nets and to look at a couple of things
that<00:00:47.680><c> may</c><00:00:48.100><c> matter</c><00:00:48.370><c> in</c><00:00:48.550><c> your</c><00:00:48.579><c> applications</c><00:00:49.710><c> but</c>

00:00:50.700 --> 00:00:50.710 align:start position:0%
that may matter in your applications but
 

00:00:50.710 --> 00:00:52.170 align:start position:0%
that may matter in your applications but
the<00:00:50.860><c> good</c><00:00:51.010><c> news</c><00:00:51.190><c> is</c><00:00:51.340><c> that</c><00:00:51.370><c> the</c><00:00:51.640><c> agenda</c><00:00:51.850><c> has</c><00:00:52.149><c> a</c>

00:00:52.170 --> 00:00:52.180 align:start position:0%
the good news is that the agenda has a
 

00:00:52.180 --> 00:00:54.540 align:start position:0%
the good news is that the agenda has a
couple<00:00:52.540><c> of</c><00:00:52.629><c> really</c><00:00:52.840><c> deep</c><00:00:53.200><c> dive</c><00:00:53.500><c> talks</c><00:00:54.250><c> that</c>

00:00:54.540 --> 00:00:54.550 align:start position:0%
couple of really deep dive talks that
 

00:00:54.550 --> 00:00:56.790 align:start position:0%
couple of really deep dive talks that
continue<00:00:55.210><c> to</c><00:00:55.450><c> build</c><00:00:55.629><c> on</c><00:00:55.809><c> the</c><00:00:55.840><c> stuff</c><00:00:56.170><c> that</c><00:00:56.770><c> I</c>

00:00:56.790 --> 00:00:56.800 align:start position:0%
continue to build on the stuff that I
 

00:00:56.800 --> 00:00:59.639 align:start position:0%
continue to build on the stuff that I
will<00:00:57.010><c> be</c><00:00:57.160><c> talking</c><00:00:57.520><c> about</c><00:00:57.960><c> and</c><00:00:58.960><c> Martin</c><00:00:59.320><c> bio</c>

00:00:59.639 --> 00:00:59.649 align:start position:0%
will be talking about and Martin bio
 

00:00:59.649 --> 00:01:02.250 align:start position:0%
will be talking about and Martin bio
I<00:00:59.860><c> work</c><00:01:00.550><c> for</c><00:01:00.760><c> JetBrains</c><00:01:01.149><c> and</c><00:01:01.510><c> I</c><00:01:01.629><c> flew</c><00:01:01.930><c> in</c><00:01:02.050><c> from</c>

00:01:02.250 --> 00:01:02.260 align:start position:0%
I work for JetBrains and I flew in from
 

00:01:02.260 --> 00:01:05.820 align:start position:0%
I work for JetBrains and I flew in from
Belgium<00:01:02.590><c> and</c><00:01:02.829><c> yeah</c><00:01:03.579><c> let's</c><00:01:03.850><c> dive</c><00:01:04.030><c> in</c><00:01:04.259><c> so</c><00:01:05.259><c> if</c><00:01:05.590><c> we</c>

00:01:05.820 --> 00:01:05.830 align:start position:0%
Belgium and yeah let's dive in so if we
 

00:01:05.830 --> 00:01:07.920 align:start position:0%
Belgium and yeah let's dive in so if we
look<00:01:05.950><c> at</c><00:01:06.070><c> the</c><00:01:06.190><c> dotnet</c><00:01:06.399><c> runtime</c><00:01:07.060><c> and</c><00:01:07.300><c> you</c><00:01:07.720><c> have</c>

00:01:07.920 --> 00:01:07.930 align:start position:0%
look at the dotnet runtime and you have
 

00:01:07.930 --> 00:01:09.389 align:start position:0%
look at the dotnet runtime and you have
your<00:01:08.080><c> application</c><00:01:08.229><c> that</c><00:01:08.830><c> you're</c><00:01:09.009><c> building</c>

00:01:09.389 --> 00:01:09.399 align:start position:0%
your application that you're building
 

00:01:09.399 --> 00:01:10.279 align:start position:0%
your application that you're building
and<00:01:09.520><c> you</c><00:01:09.610><c> want</c><00:01:09.789><c> to</c><00:01:09.880><c> run</c><00:01:10.030><c> your</c><00:01:10.180><c> application</c>

00:01:10.279 --> 00:01:10.289 align:start position:0%
and you want to run your application
 

00:01:10.289 --> 00:01:12.840 align:start position:0%
and you want to run your application
you'll<00:01:11.289><c> see</c><00:01:11.380><c> that</c><00:01:11.680><c> net</c><00:01:12.100><c> runtime</c><00:01:12.520><c> there's</c><00:01:12.759><c> a</c>

00:01:12.840 --> 00:01:12.850 align:start position:0%
you'll see that net runtime there's a
 

00:01:12.850 --> 00:01:16.080 align:start position:0%
you'll see that net runtime there's a
lot<00:01:13.090><c> of</c><00:01:13.240><c> things</c><00:01:13.479><c> for</c><00:01:13.720><c> us</c><00:01:13.750><c> it</c><00:01:14.430><c> basically</c><00:01:15.430><c> runs</c>

00:01:16.080 --> 00:01:16.090 align:start position:0%
lot of things for us it basically runs
 

00:01:16.090 --> 00:01:18.030 align:start position:0%
lot of things for us it basically runs
our<00:01:16.360><c> application</c><00:01:16.990><c> it</c><00:01:17.229><c> does</c><00:01:17.500><c> just-in-time</c>

00:01:18.030 --> 00:01:18.040 align:start position:0%
our application it does just-in-time
 

00:01:18.040 --> 00:01:20.370 align:start position:0%
our application it does just-in-time
compilation<00:01:18.600><c> converting</c><00:01:19.600><c> the</c><00:01:19.750><c> intermediate</c>

00:01:20.370 --> 00:01:20.380 align:start position:0%
compilation converting the intermediate
 

00:01:20.380 --> 00:01:22.320 align:start position:0%
compilation converting the intermediate
language<00:01:20.560><c> codes</c><00:01:21.100><c> of</c><00:01:21.310><c> our</c><00:01:21.520><c> application</c><00:01:22.119><c> to</c>

00:01:22.320 --> 00:01:22.330 align:start position:0%
language codes of our application to
 

00:01:22.330 --> 00:01:24.899 align:start position:0%
language codes of our application to
something<00:01:23.110><c> that</c><00:01:23.140><c> can</c><00:01:23.439><c> run</c><00:01:23.650><c> on</c><00:01:23.890><c> the</c><00:01:23.920><c> CPU</c><00:01:24.310><c> in</c>

00:01:24.899 --> 00:01:24.909 align:start position:0%
something that can run on the CPU in
 

00:01:24.909 --> 00:01:26.609 align:start position:0%
something that can run on the CPU in
your<00:01:25.210><c> on</c><00:01:25.930><c> your</c><00:01:26.049><c> computer</c>

00:01:26.609 --> 00:01:26.619 align:start position:0%
your on your computer
 

00:01:26.619 --> 00:01:28.890 align:start position:0%
your on your computer
it<00:01:26.860><c> handles</c><00:01:27.520><c> type</c><00:01:27.760><c> safety</c><00:01:28.270><c> so</c><00:01:28.479><c> that</c><00:01:28.510><c> you</c><00:01:28.750><c> can</c>

00:01:28.890 --> 00:01:28.900 align:start position:0%
it handles type safety so that you can
 

00:01:28.900 --> 00:01:30.660 align:start position:0%
it handles type safety so that you can
actually<00:01:29.049><c> work</c><00:01:29.439><c> with</c><00:01:29.500><c> different</c><00:01:30.159><c> types</c><00:01:30.430><c> and</c>

00:01:30.660 --> 00:01:30.670 align:start position:0%
actually work with different types and
 

00:01:30.670 --> 00:01:32.550 align:start position:0%
actually work with different types and
ensure<00:01:31.420><c> that</c><00:01:31.450><c> something</c><00:01:31.900><c> is</c><00:01:32.170><c> a</c><00:01:32.200><c> string</c>

00:01:32.550 --> 00:01:32.560 align:start position:0%
ensure that something is a string
 

00:01:32.560 --> 00:01:34.170 align:start position:0%
ensure that something is a string
something<00:01:33.009><c> is</c><00:01:33.130><c> a</c><00:01:33.159><c> person</c><00:01:33.580><c> class</c><00:01:33.880><c> or</c><00:01:34.090><c> an</c>

00:01:34.170 --> 00:01:34.180 align:start position:0%
something is a person class or an
 

00:01:34.180 --> 00:01:36.570 align:start position:0%
something is a person class or an
address<00:01:34.479><c> class</c><00:01:34.750><c> etc</c><00:01:34.990><c> it</c><00:01:35.680><c> does</c><00:01:36.070><c> exception</c>

00:01:36.570 --> 00:01:36.580 align:start position:0%
address class etc it does exception
 

00:01:36.580 --> 00:01:38.490 align:start position:0%
address class etc it does exception
handling<00:01:36.820><c> and</c><00:01:37.060><c> so</c><00:01:37.210><c> on</c><00:01:37.360><c> and</c><00:01:37.570><c> we're</c><00:01:38.110><c> not</c><00:01:38.259><c> going</c>

00:01:38.490 --> 00:01:38.500 align:start position:0%
handling and so on and we're not going
 

00:01:38.500 --> 00:01:40.649 align:start position:0%
handling and so on and we're not going
to<00:01:38.619><c> cover</c><00:01:38.830><c> those</c><00:01:39.070><c> things</c><00:01:39.400><c> we</c><00:01:39.939><c> will</c><00:01:39.970><c> just</c><00:01:40.420><c> cover</c>

00:01:40.649 --> 00:01:40.659 align:start position:0%
to cover those things we will just cover
 

00:01:40.659 --> 00:01:43.050 align:start position:0%
to cover those things we will just cover
the<00:01:40.990><c> thing</c><00:01:41.229><c> that's</c><00:01:41.560><c> it</c><00:01:42.130><c> does</c><00:01:42.369><c> really</c><00:01:42.610><c> well</c><00:01:42.820><c> in</c>

00:01:43.050 --> 00:01:43.060 align:start position:0%
the thing that's it does really well in
 

00:01:43.060 --> 00:01:45.090 align:start position:0%
the thing that's it does really well in
that<00:01:43.180><c> is</c><00:01:43.299><c> memory</c><00:01:43.659><c> management's</c><00:01:44.170><c> and</c><00:01:44.320><c> garbage</c>

00:01:45.090 --> 00:01:45.100 align:start position:0%
that is memory management's and garbage
 

00:01:45.100 --> 00:01:48.510 align:start position:0%
that is memory management's and garbage
collection<00:01:45.310><c> in</c><00:01:46.060><c> the.net</c><00:01:46.360><c> runtime</c><00:01:47.310><c> so</c><00:01:48.310><c> if</c><00:01:48.400><c> you</c>

00:01:48.510 --> 00:01:48.520 align:start position:0%
collection in the.net runtime so if you
 

00:01:48.520 --> 00:01:49.859 align:start position:0%
collection in the.net runtime so if you
look<00:01:48.670><c> at</c><00:01:48.850><c> memory</c><00:01:49.210><c> management</c><00:01:49.509><c> and</c><00:01:49.750><c> the</c>

00:01:49.859 --> 00:01:49.869 align:start position:0%
look at memory management and the
 

00:01:49.869 --> 00:01:52.200 align:start position:0%
look at memory management and the
garbage<00:01:50.200><c> collector</c><00:01:50.680><c> in</c><00:01:50.860><c> Donuts</c><00:01:51.310><c> you'll</c><00:01:51.939><c> see</c>

00:01:52.200 --> 00:01:52.210 align:start position:0%
garbage collector in Donuts you'll see
 

00:01:52.210 --> 00:01:54.390 align:start position:0%
garbage collector in Donuts you'll see
that<00:01:52.390><c> its</c><00:01:52.570><c> goal</c><00:01:52.990><c> is</c><00:01:53.259><c> basically</c><00:01:53.560><c> to</c><00:01:53.890><c> give</c><00:01:54.250><c> you</c>

00:01:54.390 --> 00:01:54.400 align:start position:0%
that its goal is basically to give you
 

00:01:54.400 --> 00:01:56.370 align:start position:0%
that its goal is basically to give you
virtually<00:01:54.729><c> unlimited</c><00:01:55.360><c> memory</c><00:01:56.170><c> in</c><00:01:56.350><c> your</c>

00:01:56.370 --> 00:01:56.380 align:start position:0%
virtually unlimited memory in your
 

00:01:56.380 --> 00:01:59.639 align:start position:0%
virtually unlimited memory in your
application<00:01:57.250><c> it</c><00:01:58.060><c> does</c><00:01:58.329><c> that</c><00:01:58.540><c> by</c><00:01:58.780><c> when</c><00:01:59.530><c> you</c>

00:01:59.639 --> 00:01:59.649 align:start position:0%
application it does that by when you
 

00:01:59.649 --> 00:02:01.230 align:start position:0%
application it does that by when you
start<00:01:59.920><c> your</c><00:02:00.100><c> application</c><00:02:00.220><c> it</c><00:02:00.759><c> does</c><00:02:00.909><c> that</c><00:02:01.090><c> by</c>

00:02:01.230 --> 00:02:01.240 align:start position:0%
start your application it does that by
 

00:02:01.240 --> 00:02:03.810 align:start position:0%
start your application it does that by
reserving<00:02:01.960><c> a</c><00:02:02.049><c> big</c><00:02:02.259><c> chunk</c><00:02:02.590><c> of</c><00:02:02.740><c> memory</c><00:02:02.979><c> for</c><00:02:03.640><c> your</c>

00:02:03.810 --> 00:02:03.820 align:start position:0%
reserving a big chunk of memory for your
 

00:02:03.820 --> 00:02:07.050 align:start position:0%
reserving a big chunk of memory for your
net<00:02:04.270><c> application</c><00:02:05.130><c> so</c><00:02:06.130><c> that's</c><00:02:06.340><c> whenever</c><00:02:06.640><c> you</c>

00:02:07.050 --> 00:02:07.060 align:start position:0%
net application so that's whenever you
 

00:02:07.060 --> 00:02:08.400 align:start position:0%
net application so that's whenever you
want<00:02:07.270><c> to</c><00:02:07.390><c> allocate</c><00:02:07.509><c> something</c><00:02:08.019><c> in</c><00:02:08.290><c> your</c>

00:02:08.400 --> 00:02:08.410 align:start position:0%
want to allocate something in your
 

00:02:08.410 --> 00:02:10.139 align:start position:0%
want to allocate something in your
application<00:02:08.979><c> you</c><00:02:09.009><c> don't</c><00:02:09.369><c> have</c><00:02:09.549><c> to</c><00:02:09.700><c> go</c><00:02:09.820><c> to</c><00:02:09.880><c> the</c>

00:02:10.139 --> 00:02:10.149 align:start position:0%
application you don't have to go to the
 

00:02:10.149 --> 00:02:12.479 align:start position:0%
application you don't have to go to the
operating<00:02:10.390><c> system</c><00:02:10.600><c> and</c><00:02:11.140><c> ask</c><00:02:11.620><c> for</c><00:02:11.950><c> more</c><00:02:12.130><c> memory</c>

00:02:12.479 --> 00:02:12.489 align:start position:0%
operating system and ask for more memory
 

00:02:12.489 --> 00:02:14.100 align:start position:0%
operating system and ask for more memory
to<00:02:12.519><c> allocate</c><00:02:13.030><c> the</c><00:02:13.180><c> variables</c><00:02:13.630><c> that</c><00:02:13.750><c> you</c><00:02:13.930><c> want</c>

00:02:14.100 --> 00:02:14.110 align:start position:0%
to allocate the variables that you want
 

00:02:14.110 --> 00:02:16.800 align:start position:0%
to allocate the variables that you want
to<00:02:14.200><c> have</c><00:02:14.380><c> there</c><00:02:14.850><c> instead</c><00:02:15.850><c> it</c><00:02:16.060><c> allocates</c><00:02:16.450><c> a</c><00:02:16.630><c> big</c>

00:02:16.800 --> 00:02:16.810 align:start position:0%
to have there instead it allocates a big
 

00:02:16.810 --> 00:02:18.420 align:start position:0%
to have there instead it allocates a big
chunk<00:02:17.049><c> of</c><00:02:17.170><c> memory</c><00:02:17.380><c> and</c><00:02:17.709><c> whenever</c><00:02:18.130><c> you</c>

00:02:18.420 --> 00:02:18.430 align:start position:0%
chunk of memory and whenever you
 

00:02:18.430 --> 00:02:20.430 align:start position:0%
chunk of memory and whenever you
allocate<00:02:18.790><c> something</c><00:02:19.090><c> in</c><00:02:19.329><c> Donuts</c><00:02:19.720><c> that</c><00:02:20.230><c> will</c>

00:02:20.430 --> 00:02:20.440 align:start position:0%
allocate something in Donuts that will
 

00:02:20.440 --> 00:02:22.080 align:start position:0%
allocate something in Donuts that will
be<00:02:20.560><c> stored</c><00:02:20.860><c> in</c><00:02:21.070><c> this</c><00:02:21.190><c> big</c><00:02:21.430><c> chunk</c><00:02:21.730><c> of</c><00:02:21.849><c> memory</c>

00:02:22.080 --> 00:02:22.090 align:start position:0%
be stored in this big chunk of memory
 

00:02:22.090 --> 00:02:25.080 align:start position:0%
be stored in this big chunk of memory
called<00:02:22.540><c> the</c><00:02:22.780><c> managed</c><00:02:23.110><c> heap</c><00:02:23.410><c> now</c><00:02:24.370><c> virtually</c>

00:02:25.080 --> 00:02:25.090 align:start position:0%
called the managed heap now virtually
 

00:02:25.090 --> 00:02:27.030 align:start position:0%
called the managed heap now virtually
unlimited<00:02:25.209><c> means</c><00:02:25.840><c> that</c><00:02:26.110><c> whenever</c><00:02:26.440><c> something</c>

00:02:27.030 --> 00:02:27.040 align:start position:0%
unlimited means that whenever something
 

00:02:27.040 --> 00:02:27.600 align:start position:0%
unlimited means that whenever something
is<00:02:27.129><c> no</c><00:02:27.340><c> long</c>

00:02:27.600 --> 00:02:27.610 align:start position:0%
is no long
 

00:02:27.610 --> 00:02:29.550 align:start position:0%
is no long
being<00:02:27.880><c> used</c><00:02:28.120><c> the</c><00:02:28.750><c> garbage</c><00:02:29.080><c> collector</c><00:02:29.530><c> will</c>

00:02:29.550 --> 00:02:29.560 align:start position:0%
being used the garbage collector will
 

00:02:29.560 --> 00:02:31.770 align:start position:0%
being used the garbage collector will
run<00:02:29.890><c> and</c><00:02:30.100><c> remove</c><00:02:30.700><c> the</c><00:02:30.940><c> objects</c><00:02:31.510><c> that</c><00:02:31.600><c> were</c>

00:02:31.770 --> 00:02:31.780 align:start position:0%
run and remove the objects that were
 

00:02:31.780 --> 00:02:35.160 align:start position:0%
run and remove the objects that were
stored<00:02:32.110><c> in</c><00:02:32.290><c> this</c><00:02:32.470><c> big</c><00:02:32.680><c> heap</c><00:02:33.270><c> so</c><00:02:34.270><c> to</c><00:02:34.330><c> free</c><00:02:34.870><c> it</c><00:02:35.080><c> up</c>

00:02:35.160 --> 00:02:35.170 align:start position:0%
stored in this big heap so to free it up
 

00:02:35.170 --> 00:02:36.570 align:start position:0%
stored in this big heap so to free it up
and<00:02:35.440><c> make</c><00:02:35.620><c> it</c><00:02:35.650><c> available</c><00:02:35.860><c> for</c><00:02:36.400><c> future</c>

00:02:36.570 --> 00:02:36.580 align:start position:0%
and make it available for future
 

00:02:36.580 --> 00:02:38.460 align:start position:0%
and make it available for future
allocations<00:02:36.910><c> again</c><00:02:37.630><c> so</c><00:02:37.810><c> it</c><00:02:37.900><c> frees</c><00:02:38.110><c> that</c><00:02:38.320><c> up</c>

00:02:38.460 --> 00:02:38.470 align:start position:0%
allocations again so it frees that up
 

00:02:38.470 --> 00:02:40.500 align:start position:0%
allocations again so it frees that up
and<00:02:38.680><c> makes</c><00:02:38.920><c> it</c><00:02:39.040><c> available</c><00:02:39.340><c> and</c><00:02:39.700><c> gives</c><00:02:40.240><c> you</c><00:02:40.390><c> the</c>

00:02:40.500 --> 00:02:40.510 align:start position:0%
and makes it available and gives you the
 

00:02:40.510 --> 00:02:42.720 align:start position:0%
and makes it available and gives you the
impression<00:02:40.810><c> that</c><00:02:41.020><c> memory</c><00:02:41.530><c> is</c><00:02:41.740><c> unlimited</c><00:02:42.340><c> and</c>

00:02:42.720 --> 00:02:42.730 align:start position:0%
impression that memory is unlimited and
 

00:02:42.730 --> 00:02:45.270 align:start position:0%
impression that memory is unlimited and
you<00:02:42.850><c> can</c><00:02:43.030><c> store</c><00:02:43.300><c> whatever</c><00:02:43.660><c> you</c><00:02:43.780><c> want</c><00:02:43.960><c> in</c><00:02:44.770><c> in</c>

00:02:45.270 --> 00:02:45.280 align:start position:0%
you can store whatever you want in in
 

00:02:45.280 --> 00:02:48.090 align:start position:0%
you can store whatever you want in in
that<00:02:45.400><c> managed</c><00:02:45.730><c> heap</c><00:02:46.260><c> now</c><00:02:47.260><c> if</c><00:02:47.530><c> you</c><00:02:47.860><c> look</c><00:02:47.980><c> at</c>

00:02:48.090 --> 00:02:48.100 align:start position:0%
that managed heap now if you look at
 

00:02:48.100 --> 00:02:50.370 align:start position:0%
that managed heap now if you look at
memory<00:02:48.280><c> allocation</c><00:02:49.000><c> those</c><00:02:49.720><c> things</c><00:02:49.960><c> go</c><00:02:50.170><c> in</c><00:02:50.290><c> the</c>

00:02:50.370 --> 00:02:50.380 align:start position:0%
memory allocation those things go in the
 

00:02:50.380 --> 00:02:52.890 align:start position:0%
memory allocation those things go in the
managed<00:02:50.680><c> heap</c><00:02:50.920><c> and</c><00:02:51.250><c> allocating</c><00:02:52.240><c> memory</c><00:02:52.390><c> in</c>

00:02:52.890 --> 00:02:52.900 align:start position:0%
managed heap and allocating memory in
 

00:02:52.900 --> 00:02:54.930 align:start position:0%
managed heap and allocating memory in
that<00:02:52.960><c> managed</c><00:02:53.560><c> heap</c><00:02:53.740><c> is</c><00:02:53.950><c> really</c><00:02:54.400><c> really</c><00:02:54.640><c> fast</c>

00:02:54.930 --> 00:02:54.940 align:start position:0%
that managed heap is really really fast
 

00:02:54.940 --> 00:02:56.910 align:start position:0%
that managed heap is really really fast
the<00:02:55.630><c> reason</c><00:02:55.900><c> for</c><00:02:56.080><c> that</c><00:02:56.200><c> is</c><00:02:56.380><c> that</c><00:02:56.410><c> dotnet</c>

00:02:56.910 --> 00:02:56.920 align:start position:0%
the reason for that is that dotnet
 

00:02:56.920 --> 00:02:58.380 align:start position:0%
the reason for that is that dotnet
doesn't<00:02:57.370><c> have</c><00:02:57.490><c> to</c><00:02:57.610><c> go</c><00:02:57.760><c> to</c><00:02:57.790><c> the</c><00:02:58.060><c> operating</c>

00:02:58.380 --> 00:02:58.390 align:start position:0%
doesn't have to go to the operating
 

00:02:58.390 --> 00:03:00.600 align:start position:0%
doesn't have to go to the operating
system<00:02:58.840><c> again</c><00:02:59.080><c> reason</c><00:02:59.770><c> is</c><00:02:59.920><c> that</c><00:02:59.950><c> it</c><00:03:00.190><c> can</c><00:03:00.370><c> just</c>

00:03:00.600 --> 00:03:00.610 align:start position:0%
system again reason is that it can just
 

00:03:00.610 --> 00:03:02.580 align:start position:0%
system again reason is that it can just
allocate<00:03:01.060><c> a</c><00:03:01.090><c> pointer</c><00:03:01.540><c> in</c><00:03:01.720><c> this</c><00:03:01.870><c> big</c><00:03:02.080><c> heap</c><00:03:02.320><c> and</c>

00:03:02.580 --> 00:03:02.590 align:start position:0%
allocate a pointer in this big heap and
 

00:03:02.590 --> 00:03:04.350 align:start position:0%
allocate a pointer in this big heap and
then<00:03:02.860><c> allocate</c><00:03:03.400><c> your</c><00:03:03.580><c> object</c><00:03:03.940><c> and</c><00:03:04.120><c> make</c><00:03:04.240><c> it</c>

00:03:04.350 --> 00:03:04.360 align:start position:0%
then allocate your object and make it
 

00:03:04.360 --> 00:03:06.990 align:start position:0%
then allocate your object and make it
available<00:03:04.560><c> in</c><00:03:05.560><c> there</c><00:03:05.860><c> of</c><00:03:06.040><c> course</c><00:03:06.700><c> if</c><00:03:06.880><c> you</c>

00:03:06.990 --> 00:03:07.000 align:start position:0%
available in there of course if you
 

00:03:07.000 --> 00:03:09.210 align:start position:0%
available in there of course if you
attach<00:03:07.270><c> a</c><00:03:07.390><c> profiler</c><00:03:07.870><c> to</c><00:03:08.170><c> any</c><00:03:08.380><c> dotnet</c><00:03:08.800><c> process</c>

00:03:09.210 --> 00:03:09.220 align:start position:0%
attach a profiler to any dotnet process
 

00:03:09.220 --> 00:03:10.830 align:start position:0%
attach a profiler to any dotnet process
you<00:03:09.430><c> will</c><00:03:09.550><c> see</c><00:03:09.730><c> there's</c><00:03:09.970><c> this</c><00:03:10.120><c> big</c><00:03:10.360><c> chunk</c><00:03:10.660><c> of</c>

00:03:10.830 --> 00:03:10.840 align:start position:0%
you will see there's this big chunk of
 

00:03:10.840 --> 00:03:13.110 align:start position:0%
you will see there's this big chunk of
managed<00:03:11.290><c> memory</c><00:03:11.500><c> that</c><00:03:11.860><c> it</c><00:03:11.980><c> allocates</c><00:03:12.430><c> but</c>

00:03:13.110 --> 00:03:13.120 align:start position:0%
managed memory that it allocates but
 

00:03:13.120 --> 00:03:14.910 align:start position:0%
managed memory that it allocates but
there's<00:03:13.270><c> also</c><00:03:13.450><c> some</c><00:03:13.780><c> unmanaged</c><00:03:14.290><c> memory</c><00:03:14.650><c> being</c>

00:03:14.910 --> 00:03:14.920 align:start position:0%
there's also some unmanaged memory being
 

00:03:14.920 --> 00:03:16.470 align:start position:0%
there's also some unmanaged memory being
allocated<00:03:15.340><c> where</c><00:03:15.670><c> it</c><00:03:15.730><c> stores</c><00:03:15.940><c> graphics</c>

00:03:16.470 --> 00:03:16.480 align:start position:0%
allocated where it stores graphics
 

00:03:16.480 --> 00:03:18.870 align:start position:0%
allocated where it stores graphics
buffers<00:03:16.930><c> and</c><00:03:17.410><c> whatever</c><00:03:17.770><c> is</c><00:03:17.890><c> needed</c><00:03:18.100><c> to</c><00:03:18.700><c> make</c>

00:03:18.870 --> 00:03:18.880 align:start position:0%
buffers and whatever is needed to make
 

00:03:18.880 --> 00:03:21.090 align:start position:0%
buffers and whatever is needed to make
your<00:03:19.030><c> application</c><00:03:19.600><c> run</c><00:03:19.840><c> but</c><00:03:20.080><c> will</c><00:03:20.740><c> not</c><00:03:20.890><c> dive</c>

00:03:21.090 --> 00:03:21.100 align:start position:0%
your application run but will not dive
 

00:03:21.100 --> 00:03:24.660 align:start position:0%
your application run but will not dive
into<00:03:21.310><c> that</c><00:03:21.550><c> one</c><00:03:21.730><c> in</c><00:03:22.120><c> this</c><00:03:22.300><c> talk</c><00:03:23.070><c> now</c><00:03:24.070><c> at</c><00:03:24.310><c> any</c>

00:03:24.660 --> 00:03:24.670 align:start position:0%
into that one in this talk now at any
 

00:03:24.670 --> 00:03:26.760 align:start position:0%
into that one in this talk now at any
point<00:03:24.760><c> in</c><00:03:25.090><c> time</c><00:03:25.120><c> the</c><00:03:25.660><c> garbage</c><00:03:25.990><c> collector</c><00:03:26.470><c> may</c>

00:03:26.760 --> 00:03:26.770 align:start position:0%
point in time the garbage collector may
 

00:03:26.770 --> 00:03:29.220 align:start position:0%
point in time the garbage collector may
run<00:03:27.040><c> and</c><00:03:27.310><c> it</c><00:03:27.760><c> may</c><00:03:28.000><c> release</c><00:03:28.630><c> the</c><00:03:28.810><c> objects</c><00:03:29.200><c> that</c>

00:03:29.220 --> 00:03:29.230 align:start position:0%
run and it may release the objects that
 

00:03:29.230 --> 00:03:30.800 align:start position:0%
run and it may release the objects that
are<00:03:29.380><c> no</c><00:03:29.620><c> longer</c><00:03:29.950><c> in</c><00:03:30.070><c> use</c><00:03:30.220><c> by</c><00:03:30.459><c> your</c><00:03:30.610><c> application</c>

00:03:30.800 --> 00:03:30.810 align:start position:0%
are no longer in use by your application
 

00:03:30.810 --> 00:03:33.030 align:start position:0%
are no longer in use by your application
so<00:03:31.810><c> what</c><00:03:31.930><c> will</c><00:03:32.080><c> happen</c><00:03:32.110><c> is</c><00:03:32.500><c> that</c><00:03:32.530><c> the</c><00:03:32.709><c> garbage</c>

00:03:33.030 --> 00:03:33.040 align:start position:0%
so what will happen is that the garbage
 

00:03:33.040 --> 00:03:35.490 align:start position:0%
so what will happen is that the garbage
collector<00:03:33.519><c> pauses</c><00:03:34.090><c> your</c><00:03:34.239><c> application</c><00:03:34.900><c> looks</c>

00:03:35.490 --> 00:03:35.500 align:start position:0%
collector pauses your application looks
 

00:03:35.500 --> 00:03:37.009 align:start position:0%
collector pauses your application looks
at<00:03:35.650><c> all</c><00:03:35.800><c> the</c><00:03:35.920><c> objects</c><00:03:36.280><c> that</c><00:03:36.310><c> are</c><00:03:36.430><c> in</c><00:03:36.670><c> memory</c>

00:03:37.009 --> 00:03:37.019 align:start position:0%
at all the objects that are in memory
 

00:03:37.019 --> 00:03:39.330 align:start position:0%
at all the objects that are in memory
analyzes<00:03:38.019><c> the</c><00:03:38.170><c> graph</c><00:03:38.440><c> and</c><00:03:38.769><c> looks</c><00:03:38.980><c> at</c><00:03:39.160><c> which</c>

00:03:39.330 --> 00:03:39.340 align:start position:0%
analyzes the graph and looks at which
 

00:03:39.340 --> 00:03:41.520 align:start position:0%
analyzes the graph and looks at which
objects<00:03:39.850><c> are</c><00:03:40.000><c> still</c><00:03:40.209><c> in</c><00:03:40.390><c> use</c><00:03:40.600><c> and</c><00:03:40.900><c> if</c><00:03:41.410><c> the</c>

00:03:41.520 --> 00:03:41.530 align:start position:0%
objects are still in use and if the
 

00:03:41.530 --> 00:03:43.020 align:start position:0%
objects are still in use and if the
object<00:03:41.590><c> is</c><00:03:41.920><c> no</c><00:03:42.100><c> longer</c><00:03:42.310><c> in</c><00:03:42.489><c> use</c><00:03:42.670><c> if</c><00:03:42.910><c> it's</c>

00:03:43.020 --> 00:03:43.030 align:start position:0%
object is no longer in use if it's
 

00:03:43.030 --> 00:03:45.180 align:start position:0%
object is no longer in use if it's
unreachable<00:03:43.510><c> from</c><00:03:44.080><c> any</c><00:03:44.290><c> other</c><00:03:44.500><c> objects</c><00:03:45.010><c> it</c>

00:03:45.180 --> 00:03:45.190 align:start position:0%
unreachable from any other objects it
 

00:03:45.190 --> 00:03:47.580 align:start position:0%
unreachable from any other objects it
will<00:03:45.790><c> be</c><00:03:45.940><c> marked</c><00:03:46.360><c> for</c><00:03:46.450><c> removal</c><00:03:47.019><c> and</c><00:03:47.170><c> remove</c>

00:03:47.580 --> 00:03:47.590 align:start position:0%
will be marked for removal and remove
 

00:03:47.590 --> 00:03:49.830 align:start position:0%
will be marked for removal and remove
from<00:03:47.620><c> memory</c><00:03:48.160><c> eventually</c><00:03:48.700><c> and</c><00:03:49.510><c> what</c><00:03:49.690><c> will</c>

00:03:49.830 --> 00:03:49.840 align:start position:0%
from memory eventually and what will
 

00:03:49.840 --> 00:03:50.880 align:start position:0%
from memory eventually and what will
also<00:03:50.080><c> happen</c><00:03:50.410><c> is</c><00:03:50.530><c> that</c><00:03:50.590><c> the</c><00:03:50.709><c> garbage</c>

00:03:50.880 --> 00:03:50.890 align:start position:0%
also happen is that the garbage
 

00:03:50.890 --> 00:03:53.370 align:start position:0%
also happen is that the garbage
collector<00:03:51.400><c> will</c><00:03:51.550><c> compact</c><00:03:52.000><c> that</c><00:03:52.660><c> memory</c><00:03:53.050><c> so</c><00:03:53.290><c> if</c>

00:03:53.370 --> 00:03:53.380 align:start position:0%
collector will compact that memory so if
 

00:03:53.380 --> 00:03:55.170 align:start position:0%
collector will compact that memory so if
you<00:03:53.500><c> think</c><00:03:53.680><c> of</c><00:03:53.890><c> defragmentation</c><00:03:54.730><c> on</c><00:03:55.030><c> your</c>

00:03:55.170 --> 00:03:55.180 align:start position:0%
you think of defragmentation on your
 

00:03:55.180 --> 00:03:57.330 align:start position:0%
you think of defragmentation on your
hard<00:03:55.420><c> drive</c><00:03:55.660><c> for</c><00:03:55.690><c> example</c><00:03:56.380><c> what</c><00:03:56.920><c> the</c><00:03:56.950><c> garbage</c>

00:03:57.330 --> 00:03:57.340 align:start position:0%
hard drive for example what the garbage
 

00:03:57.340 --> 00:03:59.340 align:start position:0%
hard drive for example what the garbage
collector<00:03:57.760><c> will</c><00:03:57.910><c> do</c><00:03:58.090><c> is</c><00:03:58.300><c> defragment</c><00:03:59.290><c> your</c>

00:03:59.340 --> 00:03:59.350 align:start position:0%
collector will do is defragment your
 

00:03:59.350 --> 00:04:01.410 align:start position:0%
collector will do is defragment your
memory<00:03:59.800><c> space</c><00:04:00.070><c> as</c><00:04:00.250><c> well</c><00:04:00.400><c> so</c><00:04:01.000><c> that</c><00:04:01.209><c> whenever</c>

00:04:01.410 --> 00:04:01.420 align:start position:0%
memory space as well so that whenever
 

00:04:01.420 --> 00:04:03.060 align:start position:0%
memory space as well so that whenever
you<00:04:01.780><c> want</c><00:04:01.989><c> to</c><00:04:02.080><c> allocate</c><00:04:02.230><c> something</c><00:04:02.890><c> there's</c>

00:04:03.060 --> 00:04:03.070 align:start position:0%
you want to allocate something there's
 

00:04:03.070 --> 00:04:04.380 align:start position:0%
you want to allocate something there's
always<00:04:03.190><c> a</c><00:04:03.370><c> big</c><00:04:03.610><c> chunk</c><00:04:03.880><c> of</c><00:04:04.030><c> memory</c><00:04:04.209><c> available</c>

00:04:04.380 --> 00:04:04.390 align:start position:0%
always a big chunk of memory available
 

00:04:04.390 --> 00:04:06.750 align:start position:0%
always a big chunk of memory available
where<00:04:05.290><c> it</c><00:04:05.380><c> can</c><00:04:05.530><c> just</c><00:04:05.709><c> have</c><00:04:05.890><c> one</c><00:04:05.920><c> stream</c><00:04:06.519><c> of</c>

00:04:06.750 --> 00:04:06.760 align:start position:0%
where it can just have one stream of
 

00:04:06.760 --> 00:04:09.090 align:start position:0%
where it can just have one stream of
bytes<00:04:07.300><c> available</c><00:04:07.600><c> to</c><00:04:08.110><c> store</c><00:04:08.380><c> the</c><00:04:08.650><c> things</c><00:04:08.890><c> that</c>

00:04:09.090 --> 00:04:09.100 align:start position:0%
bytes available to store the things that
 

00:04:09.100 --> 00:04:11.220 align:start position:0%
bytes available to store the things that
you<00:04:09.250><c> want</c><00:04:09.459><c> to</c><00:04:09.550><c> store</c><00:04:09.790><c> in</c><00:04:09.910><c> there</c><00:04:10.120><c> now</c><00:04:10.870><c> the</c>

00:04:11.220 --> 00:04:11.230 align:start position:0%
you want to store in there now the
 

00:04:11.230 --> 00:04:12.930 align:start position:0%
you want to store in there now the
problem<00:04:11.620><c> with</c><00:04:11.739><c> garbage</c><00:04:12.190><c> collection</c><00:04:12.700><c> is</c><00:04:12.880><c> that</c>

00:04:12.930 --> 00:04:12.940 align:start position:0%
problem with garbage collection is that
 

00:04:12.940 --> 00:04:15.330 align:start position:0%
problem with garbage collection is that
it<00:04:13.420><c> takes</c><00:04:13.660><c> time</c><00:04:13.989><c> to</c><00:04:14.260><c> scan</c><00:04:14.560><c> all</c><00:04:14.830><c> the</c><00:04:14.890><c> objects</c>

00:04:15.330 --> 00:04:15.340 align:start position:0%
it takes time to scan all the objects
 

00:04:15.340 --> 00:04:16.860 align:start position:0%
it takes time to scan all the objects
that<00:04:15.370><c> are</c><00:04:15.459><c> in</c><00:04:15.640><c> memory</c><00:04:16.030><c> so</c><00:04:16.479><c> the</c><00:04:16.570><c> garbage</c>

00:04:16.860 --> 00:04:16.870 align:start position:0%
that are in memory so the garbage
 

00:04:16.870 --> 00:04:18.180 align:start position:0%
that are in memory so the garbage
collector<00:04:17.290><c> will</c><00:04:17.470><c> have</c><00:04:17.650><c> to</c><00:04:17.769><c> pause</c><00:04:18.040><c> your</c>

00:04:18.180 --> 00:04:18.190 align:start position:0%
collector will have to pause your
 

00:04:18.190 --> 00:04:21.300 align:start position:0%
collector will have to pause your
application<00:04:18.910><c> and</c><00:04:19.680><c> scan</c><00:04:20.680><c> all</c><00:04:20.859><c> the</c><00:04:20.890><c> objects</c>

00:04:21.300 --> 00:04:21.310 align:start position:0%
application and scan all the objects
 

00:04:21.310 --> 00:04:22.770 align:start position:0%
application and scan all the objects
that<00:04:21.400><c> are</c><00:04:21.580><c> in</c><00:04:21.609><c> memory</c><00:04:22.000><c> see</c><00:04:22.240><c> if</c><00:04:22.300><c> they</c><00:04:22.450><c> are</c><00:04:22.570><c> still</c>

00:04:22.770 --> 00:04:22.780 align:start position:0%
that are in memory see if they are still
 

00:04:22.780 --> 00:04:25.050 align:start position:0%
that are in memory see if they are still
in<00:04:22.930><c> use</c><00:04:23.110><c> and</c><00:04:23.380><c> that</c><00:04:23.890><c> may</c><00:04:24.070><c> take</c><00:04:24.310><c> some</c><00:04:24.520><c> time</c>

00:04:25.050 --> 00:04:25.060 align:start position:0%
in use and that may take some time
 

00:04:25.060 --> 00:04:27.180 align:start position:0%
in use and that may take some time
the<00:04:25.450><c> bigger</c><00:04:25.690><c> the</c><00:04:26.020><c> chunk</c><00:04:26.290><c> of</c><00:04:26.530><c> managed</c><00:04:26.979><c> memory</c>

00:04:27.180 --> 00:04:27.190 align:start position:0%
the bigger the chunk of managed memory
 

00:04:27.190 --> 00:04:29.130 align:start position:0%
the bigger the chunk of managed memory
that<00:04:27.520><c> is</c><00:04:27.640><c> available</c><00:04:27.880><c> or</c><00:04:28.330><c> made</c><00:04:28.510><c> available</c><00:04:28.540><c> to</c>

00:04:29.130 --> 00:04:29.140 align:start position:0%
that is available or made available to
 

00:04:29.140 --> 00:04:30.810 align:start position:0%
that is available or made available to
your<00:04:29.260><c> application</c><00:04:29.890><c> the</c><00:04:30.070><c> longer</c><00:04:30.460><c> this</c><00:04:30.610><c> time</c>

00:04:30.810 --> 00:04:30.820 align:start position:0%
your application the longer this time
 

00:04:30.820 --> 00:04:33.000 align:start position:0%
your application the longer this time
will<00:04:31.060><c> take</c><00:04:31.240><c> of</c><00:04:31.419><c> course</c><00:04:31.630><c> so</c><00:04:32.320><c> that's</c><00:04:32.740><c> not</c><00:04:32.950><c> ideal</c>

00:04:33.000 --> 00:04:33.010 align:start position:0%
will take of course so that's not ideal
 

00:04:33.010 --> 00:04:36.719 align:start position:0%
will take of course so that's not ideal
so<00:04:33.840><c> Microsoft</c><00:04:34.840><c> came</c><00:04:35.169><c> up</c><00:04:35.320><c> in</c><00:04:35.620><c> dotnet</c><00:04:36.130><c> with</c><00:04:36.520><c> the</c>

00:04:36.719 --> 00:04:36.729 align:start position:0%
so Microsoft came up in dotnet with the
 

00:04:36.729 --> 00:04:39.090 align:start position:0%
so Microsoft came up in dotnet with the
idea<00:04:37.030><c> of</c><00:04:37.240><c> splitting</c><00:04:37.780><c> this</c><00:04:38.080><c> big</c><00:04:38.410><c> managed</c><00:04:38.830><c> heap</c>

00:04:39.090 --> 00:04:39.100 align:start position:0%
idea of splitting this big managed heap
 

00:04:39.100 --> 00:04:41.159 align:start position:0%
idea of splitting this big managed heap
into<00:04:40.090><c> generations</c>

00:04:41.159 --> 00:04:41.169 align:start position:0%
into generations
 

00:04:41.169 --> 00:04:42.929 align:start position:0%
into generations
whenever<00:04:41.409><c> you</c><00:04:41.560><c> first</c><00:04:41.800><c> allocate</c><00:04:42.370><c> something</c><00:04:42.819><c> in</c>

00:04:42.929 --> 00:04:42.939 align:start position:0%
whenever you first allocate something in
 

00:04:42.939 --> 00:04:45.869 align:start position:0%
whenever you first allocate something in
memory<00:04:43.240><c> that's</c><00:04:44.099><c> that</c><00:04:45.099><c> allocation</c><00:04:45.699><c> will</c><00:04:45.849><c> be</c>

00:04:45.869 --> 00:04:45.879 align:start position:0%
memory that's that allocation will be
 

00:04:45.879 --> 00:04:48.209 align:start position:0%
memory that's that allocation will be
done<00:04:46.180><c> in</c><00:04:46.389><c> generation</c><00:04:46.930><c> zero</c><00:04:47.259><c> just</c><00:04:47.620><c> a</c><00:04:47.740><c> part</c><00:04:48.009><c> of</c>

00:04:48.209 --> 00:04:48.219 align:start position:0%
done in generation zero just a part of
 

00:04:48.219 --> 00:04:49.230 align:start position:0%
done in generation zero just a part of
this<00:04:48.340><c> managed</c><00:04:48.759><c> heap</c>

00:04:49.230 --> 00:04:49.240 align:start position:0%
this managed heap
 

00:04:49.240 --> 00:04:51.629 align:start position:0%
this managed heap
whenever<00:04:50.080><c> the</c><00:04:50.289><c> variable</c><00:04:50.800><c> that</c><00:04:50.949><c> you</c><00:04:51.099><c> allocated</c>

00:04:51.629 --> 00:04:51.639 align:start position:0%
whenever the variable that you allocated
 

00:04:51.639 --> 00:04:53.610 align:start position:0%
whenever the variable that you allocated
goes<00:04:51.879><c> out</c><00:04:52.090><c> of</c><00:04:52.300><c> scope</c><00:04:52.629><c> it</c><00:04:53.080><c> is</c><00:04:53.229><c> no</c><00:04:53.409><c> longer</c>

00:04:53.610 --> 00:04:53.620 align:start position:0%
goes out of scope it is no longer
 

00:04:53.620 --> 00:04:55.709 align:start position:0%
goes out of scope it is no longer
reachable<00:04:54.219><c> and</c><00:04:54.430><c> when</c><00:04:54.909><c> the</c><00:04:55.029><c> garbage</c><00:04:55.210><c> collector</c>

00:04:55.709 --> 00:04:55.719 align:start position:0%
reachable and when the garbage collector
 

00:04:55.719 --> 00:04:57.570 align:start position:0%
reachable and when the garbage collector
runs<00:04:55.930><c> it</c><00:04:56.139><c> may</c><00:04:56.319><c> remove</c><00:04:56.680><c> it</c><00:04:56.800><c> from</c><00:04:56.979><c> memory</c><00:04:57.219><c> if</c>

00:04:57.570 --> 00:04:57.580 align:start position:0%
runs it may remove it from memory if
 

00:04:57.580 --> 00:04:59.040 align:start position:0%
runs it may remove it from memory if
needed<00:04:57.909><c> so</c><00:04:58.180><c> if</c><00:04:58.360><c> you</c><00:04:58.479><c> have</c><00:04:58.569><c> short-lived</c>

00:04:59.040 --> 00:04:59.050 align:start position:0%
needed so if you have short-lived
 

00:04:59.050 --> 00:05:02.070 align:start position:0%
needed so if you have short-lived
objects<00:04:59.590><c> imagine</c><00:05:00.490><c> a</c><00:05:00.699><c> function</c><00:05:01.180><c> call</c><00:05:01.449><c> or</c><00:05:02.020><c> a</c>

00:05:02.070 --> 00:05:02.080 align:start position:0%
objects imagine a function call or a
 

00:05:02.080 --> 00:05:03.600 align:start position:0%
objects imagine a function call or a
function<00:05:02.529><c> where</c><00:05:02.710><c> you</c><00:05:02.740><c> have</c><00:05:02.979><c> an</c><00:05:03.249><c> allocation</c>

00:05:03.600 --> 00:05:03.610 align:start position:0%
function where you have an allocation
 

00:05:03.610 --> 00:05:05.879 align:start position:0%
function where you have an allocation
and<00:05:04.120><c> at</c><00:05:04.210><c> the</c><00:05:04.330><c> end</c><00:05:04.449><c> you</c><00:05:04.569><c> return</c><00:05:04.990><c> well</c><00:05:05.590><c> that's</c><00:05:05.770><c> a</c>

00:05:05.879 --> 00:05:05.889 align:start position:0%
and at the end you return well that's a
 

00:05:05.889 --> 00:05:07.739 align:start position:0%
and at the end you return well that's a
short-lived<00:05:06.189><c> object</c><00:05:06.789><c> and</c><00:05:06.939><c> the</c><00:05:07.029><c> object</c><00:05:07.090><c> may</c><00:05:07.569><c> go</c>

00:05:07.739 --> 00:05:07.749 align:start position:0%
short-lived object and the object may go
 

00:05:07.749 --> 00:05:10.110 align:start position:0%
short-lived object and the object may go
out<00:05:07.900><c> of</c><00:05:07.930><c> memory</c><00:05:08.259><c> after</c><00:05:09.009><c> deaths</c><00:05:09.249><c> so</c><00:05:09.879><c> whenever</c>

00:05:10.110 --> 00:05:10.120 align:start position:0%
out of memory after deaths so whenever
 

00:05:10.120 --> 00:05:12.149 align:start position:0%
out of memory after deaths so whenever
you<00:05:10.330><c> allocate</c><00:05:10.719><c> something</c><00:05:10.990><c> in</c><00:05:11.259><c> nets</c><00:05:11.650><c> it</c><00:05:11.860><c> goes</c>

00:05:12.149 --> 00:05:12.159 align:start position:0%
you allocate something in nets it goes
 

00:05:12.159 --> 00:05:13.980 align:start position:0%
you allocate something in nets it goes
into<00:05:12.430><c> generation</c><00:05:12.939><c> zero</c><00:05:13.210><c> first</c><00:05:13.509><c> when</c><00:05:13.870><c> the</c>

00:05:13.980 --> 00:05:13.990 align:start position:0%
into generation zero first when the
 

00:05:13.990 --> 00:05:16.260 align:start position:0%
into generation zero first when the
garbage<00:05:14.289><c> collector</c><00:05:14.740><c> runs</c><00:05:14.919><c> and</c><00:05:15.310><c> decides</c><00:05:16.060><c> that</c>

00:05:16.260 --> 00:05:16.270 align:start position:0%
garbage collector runs and decides that
 

00:05:16.270 --> 00:05:17.939 align:start position:0%
garbage collector runs and decides that
the<00:05:16.389><c> object</c><00:05:16.689><c> is</c><00:05:16.779><c> still</c><00:05:16.870><c> in</c><00:05:17.169><c> use</c><00:05:17.379><c> the</c><00:05:17.650><c> object</c>

00:05:17.939 --> 00:05:17.949 align:start position:0%
the object is still in use the object
 

00:05:17.949 --> 00:05:20.850 align:start position:0%
the object is still in use the object
will<00:05:18.099><c> be</c><00:05:18.249><c> moved</c><00:05:18.430><c> to</c><00:05:18.610><c> generation</c><00:05:19.240><c> one</c><00:05:19.419><c> if</c><00:05:19.860><c> no</c>

00:05:20.850 --> 00:05:20.860 align:start position:0%
will be moved to generation one if no
 

00:05:20.860 --> 00:05:23.040 align:start position:0%
will be moved to generation one if no
longer<00:05:21.159><c> in</c><00:05:21.279><c> use</c><00:05:21.460><c> it</c><00:05:21.759><c> will</c><00:05:22.060><c> go</c><00:05:22.479><c> out</c><00:05:22.689><c> of</c><00:05:22.719><c> memory</c>

00:05:23.040 --> 00:05:23.050 align:start position:0%
longer in use it will go out of memory
 

00:05:23.050 --> 00:05:24.360 align:start position:0%
longer in use it will go out of memory
in<00:05:23.319><c> the</c><00:05:23.439><c> memory</c><00:05:23.710><c> will</c><00:05:23.889><c> be</c><00:05:23.919><c> made</c><00:05:24.249><c> available</c>

00:05:24.360 --> 00:05:24.370 align:start position:0%
in the memory will be made available
 

00:05:24.370 --> 00:05:27.239 align:start position:0%
in the memory will be made available
again<00:05:25.080><c> same</c><00:05:26.080><c> thing</c><00:05:26.259><c> happens</c><00:05:26.620><c> in</c><00:05:26.740><c> generation</c>

00:05:27.239 --> 00:05:27.249 align:start position:0%
again same thing happens in generation
 

00:05:27.249 --> 00:05:28.829 align:start position:0%
again same thing happens in generation
one<00:05:27.460><c> when</c><00:05:27.669><c> the</c><00:05:27.789><c> garbage</c><00:05:27.969><c> collector</c><00:05:28.479><c> runs</c><00:05:28.629><c> on</c>

00:05:28.829 --> 00:05:28.839 align:start position:0%
one when the garbage collector runs on
 

00:05:28.839 --> 00:05:30.510 align:start position:0%
one when the garbage collector runs on
generation<00:05:29.379><c> one</c><00:05:29.589><c> it</c><00:05:29.770><c> will</c><00:05:29.949><c> check</c><00:05:30.159><c> is</c><00:05:30.370><c> the</c>

00:05:30.510 --> 00:05:30.520 align:start position:0%
generation one it will check is the
 

00:05:30.520 --> 00:05:32.700 align:start position:0%
generation one it will check is the
object<00:05:30.849><c> still</c><00:05:31.029><c> in</c><00:05:31.180><c> use</c><00:05:31.389><c> if</c><00:05:31.629><c> it</c><00:05:31.839><c> is</c><00:05:31.990><c> it</c><00:05:32.439><c> will</c>

00:05:32.700 --> 00:05:32.710 align:start position:0%
object still in use if it is it will
 

00:05:32.710 --> 00:05:35.159 align:start position:0%
object still in use if it is it will
move<00:05:32.830><c> to</c><00:05:33.009><c> generation</c><00:05:33.550><c> two</c><00:05:33.789><c> if</c><00:05:33.999><c> not</c><00:05:34.360><c> it</c><00:05:34.930><c> will</c><00:05:35.110><c> go</c>

00:05:35.159 --> 00:05:35.169 align:start position:0%
move to generation two if not it will go
 

00:05:35.169 --> 00:05:37.950 align:start position:0%
move to generation two if not it will go
out<00:05:35.319><c> of</c><00:05:35.469><c> memory</c><00:05:35.800><c> again</c><00:05:36.360><c> same</c><00:05:37.360><c> thing</c><00:05:37.569><c> happens</c>

00:05:37.950 --> 00:05:37.960 align:start position:0%
out of memory again same thing happens
 

00:05:37.960 --> 00:05:39.239 align:start position:0%
out of memory again same thing happens
when<00:05:38.110><c> the</c><00:05:38.259><c> garbage</c><00:05:38.560><c> collector</c><00:05:38.949><c> runs</c><00:05:39.039><c> on</c>

00:05:39.239 --> 00:05:39.249 align:start position:0%
when the garbage collector runs on
 

00:05:39.249 --> 00:05:41.489 align:start position:0%
when the garbage collector runs on
generation<00:05:39.759><c> two</c><00:05:39.969><c> if</c><00:05:40.210><c> it's</c><00:05:40.689><c> still</c><00:05:40.900><c> in</c><00:05:41.020><c> use</c><00:05:41.229><c> it</c>

00:05:41.489 --> 00:05:41.499 align:start position:0%
generation two if it's still in use it
 

00:05:41.499 --> 00:05:43.529 align:start position:0%
generation two if it's still in use it
will<00:05:41.680><c> just</c><00:05:41.979><c> stay</c><00:05:42.189><c> in</c><00:05:42.249><c> generation</c><00:05:42.849><c> two</c><00:05:43.029><c> if</c><00:05:43.270><c> no</c>

00:05:43.529 --> 00:05:43.539 align:start position:0%
will just stay in generation two if no
 

00:05:43.539 --> 00:05:45.209 align:start position:0%
will just stay in generation two if no
longer<00:05:43.900><c> in</c><00:05:43.990><c> use</c><00:05:44.169><c> the</c><00:05:44.710><c> memory</c><00:05:45.009><c> will</c><00:05:45.189><c> be</c>

00:05:45.209 --> 00:05:45.219 align:start position:0%
longer in use the memory will be
 

00:05:45.219 --> 00:05:47.959 align:start position:0%
longer in use the memory will be
reclaimed<00:05:45.639><c> and</c><00:05:46.000><c> made</c><00:05:46.629><c> available</c><00:05:47.110><c> again</c>

00:05:47.959 --> 00:05:47.969 align:start position:0%
reclaimed and made available again
 

00:05:47.969 --> 00:05:50.790 align:start position:0%
reclaimed and made available again
there's<00:05:48.969><c> actually</c><00:05:49.120><c> a</c><00:05:49.389><c> fourth</c><00:05:49.810><c> generation</c><00:05:49.960><c> and</c>

00:05:50.790 --> 00:05:50.800 align:start position:0%
there's actually a fourth generation and
 

00:05:50.800 --> 00:05:52.379 align:start position:0%
there's actually a fourth generation and
that<00:05:50.979><c> fourth</c><00:05:51.219><c> generation</c><00:05:51.729><c> is</c><00:05:51.849><c> called</c><00:05:52.120><c> the</c>

00:05:52.379 --> 00:05:52.389 align:start position:0%
that fourth generation is called the
 

00:05:52.389 --> 00:05:54.329 align:start position:0%
that fourth generation is called the
large<00:05:52.629><c> object</c><00:05:52.870><c> heap</c><00:05:53.349><c> this</c><00:05:53.649><c> is</c><00:05:53.860><c> where</c><00:05:54.069><c> big</c>

00:05:54.329 --> 00:05:54.339 align:start position:0%
large object heap this is where big
 

00:05:54.339 --> 00:05:56.610 align:start position:0%
large object heap this is where big
objects<00:05:54.969><c> go</c><00:05:55.149><c> if</c><00:05:55.330><c> you</c><00:05:55.449><c> have</c><00:05:55.569><c> a</c><00:05:55.599><c> huge</c><00:05:55.930><c> array</c><00:05:56.289><c> that</c>

00:05:56.610 --> 00:05:56.620 align:start position:0%
objects go if you have a huge array that
 

00:05:56.620 --> 00:05:58.889 align:start position:0%
objects go if you have a huge array that
contains<00:05:56.800><c> lots</c><00:05:57.370><c> of</c><00:05:57.520><c> strings</c><00:05:57.849><c> or</c><00:05:58.120><c> person</c>

00:05:58.889 --> 00:05:58.899 align:start position:0%
contains lots of strings or person
 

00:05:58.899 --> 00:06:00.540 align:start position:0%
contains lots of strings or person
objects<00:05:59.349><c> or</c><00:05:59.469><c> whatever</c><00:05:59.770><c> object</c><00:06:00.159><c> that</c><00:06:00.250><c> you</c><00:06:00.430><c> have</c>

00:06:00.540 --> 00:06:00.550 align:start position:0%
objects or whatever object that you have
 

00:06:00.550 --> 00:06:02.730 align:start position:0%
objects or whatever object that you have
in<00:06:00.699><c> your</c><00:06:00.879><c> application</c><00:06:01.599><c> those</c><00:06:02.169><c> will</c><00:06:02.379><c> typically</c>

00:06:02.730 --> 00:06:02.740 align:start position:0%
in your application those will typically
 

00:06:02.740 --> 00:06:05.969 align:start position:0%
in your application those will typically
go<00:06:03.039><c> in</c><00:06:03.069><c> the</c><00:06:03.490><c> large</c><00:06:03.759><c> object</c><00:06:04.029><c> heap</c><00:06:04.770><c> those</c><00:06:05.770><c> are</c>

00:06:05.969 --> 00:06:05.979 align:start position:0%
go in the large object heap those are
 

00:06:05.979 --> 00:06:07.920 align:start position:0%
go in the large object heap those are
only<00:06:06.099><c> collected</c><00:06:06.879><c> so</c><00:06:07.120><c> the</c><00:06:07.240><c> garbage</c><00:06:07.539><c> collector</c>

00:06:07.920 --> 00:06:07.930 align:start position:0%
only collected so the garbage collector
 

00:06:07.930 --> 00:06:09.420 align:start position:0%
only collected so the garbage collector
runs<00:06:08.050><c> on</c><00:06:08.289><c> the</c><00:06:08.379><c> large</c><00:06:08.560><c> object</c><00:06:08.949><c> heap</c><00:06:09.069><c> as</c><00:06:09.250><c> well</c>

00:06:09.420 --> 00:06:09.430 align:start position:0%
runs on the large object heap as well
 

00:06:09.430 --> 00:06:11.399 align:start position:0%
runs on the large object heap as well
but<00:06:09.999><c> they're</c><00:06:10.180><c> only</c><00:06:10.330><c> collected</c><00:06:10.930><c> if</c><00:06:11.080><c> all</c>

00:06:11.399 --> 00:06:11.409 align:start position:0%
but they're only collected if all
 

00:06:11.409 --> 00:06:13.469 align:start position:0%
but they're only collected if all
generations<00:06:11.860><c> are</c><00:06:12.310><c> being</c><00:06:12.550><c> collected</c><00:06:12.879><c> at</c><00:06:13.240><c> some</c>

00:06:13.469 --> 00:06:13.479 align:start position:0%
generations are being collected at some
 

00:06:13.479 --> 00:06:15.899 align:start position:0%
generations are being collected at some
point<00:06:13.749><c> so</c><00:06:14.050><c> garbage</c><00:06:14.710><c> collection</c><00:06:15.310><c> runs</c><00:06:15.610><c> less</c>

00:06:15.899 --> 00:06:15.909 align:start position:0%
point so garbage collection runs less
 

00:06:15.909 --> 00:06:19.200 align:start position:0%
point so garbage collection runs less
frequently<00:06:16.509><c> on</c><00:06:16.779><c> the</c><00:06:16.930><c> large</c><00:06:17.080><c> object</c><00:06:17.319><c> heap</c><00:06:18.210><c> by</c>

00:06:19.200 --> 00:06:19.210 align:start position:0%
frequently on the large object heap by
 

00:06:19.210 --> 00:06:21.149 align:start position:0%
frequently on the large object heap by
default<00:06:19.599><c> the</c><00:06:19.870><c> large</c><00:06:20.050><c> object</c><00:06:20.439><c> heap</c><00:06:20.589><c> is</c><00:06:20.800><c> also</c>

00:06:21.149 --> 00:06:21.159 align:start position:0%
default the large object heap is also
 

00:06:21.159 --> 00:06:22.769 align:start position:0%
default the large object heap is also
not<00:06:21.399><c> being</c><00:06:21.699><c> compacted</c><00:06:22.389><c> so</c><00:06:22.599><c> the</c>

00:06:22.769 --> 00:06:22.779 align:start position:0%
not being compacted so the
 

00:06:22.779 --> 00:06:24.659 align:start position:0%
not being compacted so the
defragmentation<00:06:23.139><c> process</c><00:06:23.710><c> that</c><00:06:24.249><c> exists</c>

00:06:24.659 --> 00:06:24.669 align:start position:0%
defragmentation process that exists
 

00:06:24.669 --> 00:06:26.820 align:start position:0%
defragmentation process that exists
there<00:06:24.819><c> is</c><00:06:25.029><c> not</c><00:06:25.899><c> always</c><00:06:26.259><c> being</c><00:06:26.499><c> run</c><00:06:26.800><c> by</c>

00:06:26.820 --> 00:06:26.830 align:start position:0%
there is not always being run by
 

00:06:26.830 --> 00:06:28.950 align:start position:0%
there is not always being run by
defaults<00:06:27.550><c> on</c><00:06:27.669><c> the</c><00:06:27.729><c> large</c><00:06:28.120><c> object</c><00:06:28.300><c> heap</c><00:06:28.659><c> and</c>

00:06:28.950 --> 00:06:28.960 align:start position:0%
defaults on the large object heap and
 

00:06:28.960 --> 00:06:31.559 align:start position:0%
defaults on the large object heap and
that<00:06:29.139><c> means</c><00:06:29.349><c> if</c><00:06:29.620><c> you</c><00:06:30.279><c> have</c><00:06:30.580><c> to</c><00:06:30.729><c> allocate</c><00:06:31.120><c> a</c><00:06:31.149><c> big</c>

00:06:31.559 --> 00:06:31.569 align:start position:0%
that means if you have to allocate a big
 

00:06:31.569 --> 00:06:33.739 align:start position:0%
that means if you have to allocate a big
object<00:06:31.990><c> again</c><00:06:32.289><c> in</c><00:06:32.469><c> this</c><00:06:32.740><c> large</c><00:06:32.979><c> object</c><00:06:33.129><c> heap</c>

00:06:33.739 --> 00:06:33.749 align:start position:0%
object again in this large object heap
 

00:06:33.749 --> 00:06:36.360 align:start position:0%
object again in this large object heap
eventually<00:06:34.749><c> you</c><00:06:35.349><c> may</c><00:06:35.620><c> run</c><00:06:35.830><c> into</c><00:06:35.889><c> an</c><00:06:36.219><c> out</c><00:06:36.310><c> of</c>

00:06:36.360 --> 00:06:36.370 align:start position:0%
eventually you may run into an out of
 

00:06:36.370 --> 00:06:38.249 align:start position:0%
eventually you may run into an out of
memory<00:06:36.520><c> exception</c><00:06:37.330><c> and</c><00:06:37.539><c> that</c><00:06:37.689><c> out</c><00:06:37.930><c> of</c><00:06:37.960><c> memory</c>

00:06:38.249 --> 00:06:38.259 align:start position:0%
memory exception and that out of memory
 

00:06:38.259 --> 00:06:41.869 align:start position:0%
memory exception and that out of memory
exception<00:06:38.830><c> may</c><00:06:39.580><c> be</c><00:06:39.639><c> a</c><00:06:39.999><c> lie</c><00:06:40.330><c> in</c><00:06:40.659><c> some</c><00:06:41.080><c> case</c>

00:06:41.869 --> 00:06:41.879 align:start position:0%
exception may be a lie in some case
 

00:06:41.879 --> 00:06:44.070 align:start position:0%
exception may be a lie in some case
because<00:06:42.879><c> there</c><00:06:43.089><c> is</c><00:06:43.210><c> still</c><00:06:43.389><c> still</c><00:06:43.749><c> memory</c>

00:06:44.070 --> 00:06:44.080 align:start position:0%
because there is still still memory
 

00:06:44.080 --> 00:06:45.809 align:start position:0%
because there is still still memory
available<00:06:44.199><c> but</c><00:06:44.740><c> there's</c><00:06:44.949><c> just</c><00:06:45.370><c> not</c><00:06:45.520><c> a</c><00:06:45.580><c> big</c>

00:06:45.809 --> 00:06:45.819 align:start position:0%
available but there's just not a big
 

00:06:45.819 --> 00:06:47.519 align:start position:0%
available but there's just not a big
enough<00:06:45.939><c> region</c><00:06:46.539><c> of</c><00:06:46.629><c> memory</c><00:06:46.960><c> available</c><00:06:46.990><c> to</c>

00:06:47.519 --> 00:06:47.529 align:start position:0%
enough region of memory available to
 

00:06:47.529 --> 00:06:49.529 align:start position:0%
enough region of memory available to
store<00:06:47.770><c> the</c><00:06:47.919><c> objects</c><00:06:48.339><c> so</c><00:06:48.789><c> if</c><00:06:48.879><c> you</c><00:06:49.029><c> have</c><00:06:49.269><c> big</c>

00:06:49.529 --> 00:06:49.539 align:start position:0%
store the objects so if you have big
 

00:06:49.539 --> 00:06:51.420 align:start position:0%
store the objects so if you have big
objects<00:06:50.050><c> and</c><00:06:50.229><c> so</c><00:06:50.349><c> on</c><00:06:50.500><c> you</c><00:06:50.680><c> may</c><00:06:50.860><c> want</c><00:06:51.069><c> to</c><00:06:51.159><c> tweak</c>

00:06:51.420 --> 00:06:51.430 align:start position:0%
objects and so on you may want to tweak
 

00:06:51.430 --> 00:06:53.969 align:start position:0%
objects and so on you may want to tweak
the<00:06:51.610><c> garbage</c><00:06:51.909><c> collector</c><00:06:52.330><c> settings</c><00:06:52.870><c> to</c><00:06:53.680><c> also</c>

00:06:53.969 --> 00:06:53.979 align:start position:0%
the garbage collector settings to also
 

00:06:53.979 --> 00:06:54.850 align:start position:0%
the garbage collector settings to also
do

00:06:54.850 --> 00:06:54.860 align:start position:0%
do
 

00:06:54.860 --> 00:06:56.950 align:start position:0%
do
action<00:06:55.250><c> on</c><00:06:55.310><c> that</c><00:06:55.520><c> one</c><00:06:55.730><c> to</c><00:06:56.240><c> avoid</c><00:06:56.510><c> this</c><00:06:56.660><c> type</c><00:06:56.900><c> of</c>

00:06:56.950 --> 00:06:56.960 align:start position:0%
action on that one to avoid this type of
 

00:06:56.960 --> 00:06:59.160 align:start position:0%
action on that one to avoid this type of
out<00:06:57.230><c> of</c><00:06:57.350><c> memory</c><00:06:57.560><c> exceptions</c><00:06:58.100><c> in</c><00:06:58.250><c> that</c><00:06:58.400><c> case</c>

00:06:59.160 --> 00:06:59.170 align:start position:0%
out of memory exceptions in that case
 

00:06:59.170 --> 00:07:01.990 align:start position:0%
out of memory exceptions in that case
now<00:07:00.170><c> the</c><00:07:00.800><c> garbage</c><00:07:01.130><c> collector</c><00:07:01.520><c> runs</c><00:07:01.700><c> really</c>

00:07:01.990 --> 00:07:02.000 align:start position:0%
now the garbage collector runs really
 

00:07:02.000 --> 00:07:04.120 align:start position:0%
now the garbage collector runs really
often<00:07:02.270><c> for</c><00:07:02.660><c> generation</c><00:07:03.170><c> zero</c><00:07:03.500><c> because</c>

00:07:04.120 --> 00:07:04.130 align:start position:0%
often for generation zero because
 

00:07:04.130 --> 00:07:05.740 align:start position:0%
often for generation zero because
whenever<00:07:04.460><c> you</c><00:07:04.700><c> allocate</c><00:07:05.090><c> something</c><00:07:05.390><c> there's</c>

00:07:05.740 --> 00:07:05.750 align:start position:0%
whenever you allocate something there's
 

00:07:05.750 --> 00:07:08.200 align:start position:0%
whenever you allocate something there's
a<00:07:05.810><c> big</c><00:07:06.050><c> chance</c><00:07:06.350><c> that's</c><00:07:06.710><c> after</c><00:07:07.520><c> a</c><00:07:07.760><c> couple</c><00:07:08.120><c> of</c>

00:07:08.200 --> 00:07:08.210 align:start position:0%
a big chance that's after a couple of
 

00:07:08.210 --> 00:07:10.030 align:start position:0%
a big chance that's after a couple of
lines<00:07:08.450><c> of</c><00:07:08.600><c> code</c><00:07:08.840><c> or</c><00:07:09.020><c> in</c><00:07:09.200><c> between</c><00:07:09.560><c> two</c><00:07:09.770><c> garbage</c>

00:07:10.030 --> 00:07:10.040 align:start position:0%
lines of code or in between two garbage
 

00:07:10.040 --> 00:07:11.650 align:start position:0%
lines of code or in between two garbage
collections<00:07:10.670><c> the</c><00:07:10.820><c> object</c><00:07:11.150><c> will</c><00:07:11.330><c> be</c>

00:07:11.650 --> 00:07:11.660 align:start position:0%
collections the object will be
 

00:07:11.660 --> 00:07:13.870 align:start position:0%
collections the object will be
unreachable<00:07:12.200><c> and</c><00:07:12.680><c> can</c><00:07:13.190><c> be</c><00:07:13.370><c> removed</c><00:07:13.700><c> from</c>

00:07:13.870 --> 00:07:13.880 align:start position:0%
unreachable and can be removed from
 

00:07:13.880 --> 00:07:17.110 align:start position:0%
unreachable and can be removed from
memory<00:07:14.270><c> on</c><00:07:14.540><c> the</c><00:07:15.320><c> higher</c><00:07:15.530><c> generations</c><00:07:16.280><c> it</c><00:07:16.580><c> runs</c>

00:07:17.110 --> 00:07:17.120 align:start position:0%
memory on the higher generations it runs
 

00:07:17.120 --> 00:07:19.390 align:start position:0%
memory on the higher generations it runs
less<00:07:17.480><c> frequently</c><00:07:18.200><c> and</c><00:07:18.470><c> reason</c><00:07:18.920><c> for</c><00:07:19.130><c> that</c><00:07:19.220><c> is</c>

00:07:19.390 --> 00:07:19.400 align:start position:0%
less frequently and reason for that is
 

00:07:19.400 --> 00:07:21.790 align:start position:0%
less frequently and reason for that is
if<00:07:19.610><c> it's</c><00:07:19.880><c> on</c><00:07:20.090><c> a</c><00:07:20.120><c> higher</c><00:07:20.330><c> generation</c><00:07:21.080><c> the</c>

00:07:21.790 --> 00:07:21.800 align:start position:0%
if it's on a higher generation the
 

00:07:21.800 --> 00:07:23.770 align:start position:0%
if it's on a higher generation the
chances<00:07:22.400><c> that</c><00:07:22.430><c> the</c><00:07:22.940><c> object</c><00:07:23.270><c> is</c><00:07:23.360><c> still</c><00:07:23.570><c> being</c>

00:07:23.770 --> 00:07:23.780 align:start position:0%
chances that the object is still being
 

00:07:23.780 --> 00:07:26.730 align:start position:0%
chances that the object is still being
referenced<00:07:24.350><c> somewhere</c><00:07:24.740><c> are</c><00:07:24.920><c> much</c><00:07:25.250><c> bigger</c><00:07:25.640><c> and</c>

00:07:26.730 --> 00:07:26.740 align:start position:0%
referenced somewhere are much bigger and
 

00:07:26.740 --> 00:07:29.410 align:start position:0%
referenced somewhere are much bigger and
hence<00:07:27.740><c> it</c><00:07:28.040><c> will</c><00:07:28.220><c> take</c><00:07:28.400><c> longer</c><00:07:28.700><c> to</c><00:07:29.030><c> scan</c><00:07:29.300><c> the</c>

00:07:29.410 --> 00:07:29.420 align:start position:0%
hence it will take longer to scan the
 

00:07:29.420 --> 00:07:32.040 align:start position:0%
hence it will take longer to scan the
entire<00:07:29.690><c> object</c><00:07:29.870><c> route</c><00:07:30.320><c> or</c><00:07:30.800><c> object</c><00:07:31.340><c> graph</c><00:07:31.610><c> and</c>

00:07:32.040 --> 00:07:32.050 align:start position:0%
entire object route or object graph and
 

00:07:32.050 --> 00:07:34.300 align:start position:0%
entire object route or object graph and
check<00:07:33.050><c> if</c><00:07:33.230><c> the</c><00:07:33.350><c> object</c><00:07:33.650><c> is</c><00:07:33.740><c> actually</c><00:07:33.890><c> still</c>

00:07:34.300 --> 00:07:34.310 align:start position:0%
check if the object is actually still
 

00:07:34.310 --> 00:07:37.500 align:start position:0%
check if the object is actually still
being<00:07:34.550><c> used</c><00:07:34.730><c> or</c><00:07:35.000><c> not</c><00:07:35.230><c> now</c><00:07:36.230><c> that's</c><00:07:37.040><c> all</c><00:07:37.250><c> fine</c>

00:07:37.500 --> 00:07:37.510 align:start position:0%
being used or not now that's all fine
 

00:07:37.510 --> 00:07:39.850 align:start position:0%
being used or not now that's all fine
the<00:07:38.510><c> only</c><00:07:38.540><c> issue</c><00:07:38.870><c> is</c><00:07:39.050><c> that</c><00:07:39.380><c> on</c><00:07:39.590><c> the</c><00:07:39.710><c> higher</c>

00:07:39.850 --> 00:07:39.860 align:start position:0%
the only issue is that on the higher
 

00:07:39.860 --> 00:07:42.010 align:start position:0%
the only issue is that on the higher
generations<00:07:40.580><c> because</c><00:07:41.120><c> the</c><00:07:41.300><c> object</c><00:07:41.660><c> tree</c><00:07:41.840><c> will</c>

00:07:42.010 --> 00:07:42.020 align:start position:0%
generations because the object tree will
 

00:07:42.020 --> 00:07:44.380 align:start position:0%
generations because the object tree will
be<00:07:42.050><c> larger</c><00:07:42.620><c> garbage</c><00:07:43.340><c> collection</c><00:07:43.820><c> will</c><00:07:44.060><c> take</c><00:07:44.360><c> a</c>

00:07:44.380 --> 00:07:44.390 align:start position:0%
be larger garbage collection will take a
 

00:07:44.390 --> 00:07:47.560 align:start position:0%
be larger garbage collection will take a
little<00:07:44.690><c> bit</c><00:07:44.840><c> longer</c><00:07:45.080><c> and</c><00:07:46.000><c> also</c><00:07:47.000><c> that</c><00:07:47.180><c> is</c><00:07:47.330><c> not</c><00:07:47.540><c> a</c>

00:07:47.560 --> 00:07:47.570 align:start position:0%
little bit longer and also that is not a
 

00:07:47.570 --> 00:07:50.080 align:start position:0%
little bit longer and also that is not a
real<00:07:47.780><c> problem</c><00:07:48.310><c> except</c><00:07:49.310><c> when</c><00:07:49.520><c> it</c><00:07:49.610><c> becomes</c><00:07:49.970><c> a</c>

00:07:50.080 --> 00:07:50.090 align:start position:0%
real problem except when it becomes a
 

00:07:50.090 --> 00:07:52.720 align:start position:0%
real problem except when it becomes a
problem<00:07:50.510><c> I've</c><00:07:51.230><c> seen</c><00:07:51.560><c> generation</c><00:07:52.190><c> two</c><00:07:52.430><c> garbage</c>

00:07:52.720 --> 00:07:52.730 align:start position:0%
problem I've seen generation two garbage
 

00:07:52.730 --> 00:07:54.880 align:start position:0%
problem I've seen generation two garbage
collections<00:07:53.360><c> with</c><00:07:53.630><c> big</c><00:07:53.930><c> object</c><00:07:54.350><c> trees</c><00:07:54.560><c> and</c><00:07:54.770><c> so</c>

00:07:54.880 --> 00:07:54.890 align:start position:0%
collections with big object trees and so
 

00:07:54.890 --> 00:07:57.340 align:start position:0%
collections with big object trees and so
on<00:07:54.920><c> where</c><00:07:55.730><c> garbage</c><00:07:56.120><c> collection</c><00:07:56.600><c> would</c><00:07:56.810><c> take</c><00:07:57.170><c> a</c>

00:07:57.340 --> 00:07:57.350 align:start position:0%
on where garbage collection would take a
 

00:07:57.350 --> 00:07:58.960 align:start position:0%
on where garbage collection would take a
couple<00:07:57.620><c> of</c><00:07:57.800><c> seconds</c><00:07:58.190><c> and</c><00:07:58.370><c> even</c><00:07:58.640><c> up</c><00:07:58.790><c> to</c><00:07:58.940><c> a</c>

00:07:58.960 --> 00:07:58.970 align:start position:0%
couple of seconds and even up to a
 

00:07:58.970 --> 00:08:00.370 align:start position:0%
couple of seconds and even up to a
couple<00:07:59.300><c> of</c><00:07:59.360><c> minutes</c><00:07:59.690><c> I've</c><00:07:59.870><c> seen</c><00:08:00.050><c> in</c><00:08:00.200><c> some</c>

00:08:00.370 --> 00:08:00.380 align:start position:0%
couple of minutes I've seen in some
 

00:08:00.380 --> 00:08:03.640 align:start position:0%
couple of minutes I've seen in some
applications<00:08:01.070><c> and</c><00:08:02.050><c> that</c><00:08:03.050><c> could</c><00:08:03.320><c> be</c><00:08:03.500><c> no</c>

00:08:03.640 --> 00:08:03.650 align:start position:0%
applications and that could be no
 

00:08:03.650 --> 00:08:05.290 align:start position:0%
applications and that could be no
problem<00:08:04.070><c> but</c><00:08:04.310><c> it</c><00:08:04.460><c> could</c><00:08:04.640><c> be</c><00:08:04.790><c> a</c><00:08:04.820><c> problem</c><00:08:05.030><c> as</c>

00:08:05.290 --> 00:08:05.300 align:start position:0%
problem but it could be a problem as
 

00:08:05.300 --> 00:08:06.910 align:start position:0%
problem but it could be a problem as
well<00:08:05.480><c> because</c><00:08:05.870><c> when</c><00:08:06.050><c> the</c><00:08:06.170><c> garbage</c><00:08:06.470><c> collector</c>

00:08:06.910 --> 00:08:06.920 align:start position:0%
well because when the garbage collector
 

00:08:06.920 --> 00:08:09.910 align:start position:0%
well because when the garbage collector
runs<00:08:07.070><c> it</c><00:08:07.460><c> pauses</c><00:08:08.210><c> your</c><00:08:08.570><c> application</c><00:08:09.260><c> or</c><00:08:09.470><c> in</c>

00:08:09.910 --> 00:08:09.920 align:start position:0%
runs it pauses your application or in
 

00:08:09.920 --> 00:08:11.830 align:start position:0%
runs it pauses your application or in
future<00:08:10.220><c> garbage</c><00:08:11.210><c> collectors</c><00:08:11.630><c> where</c>

00:08:11.830 --> 00:08:11.840 align:start position:0%
future garbage collectors where
 

00:08:11.840 --> 00:08:13.810 align:start position:0%
future garbage collectors where
background<00:08:12.380><c> garbage</c><00:08:12.710><c> collection</c><00:08:13.130><c> happens</c><00:08:13.460><c> it</c>

00:08:13.810 --> 00:08:13.820 align:start position:0%
background garbage collection happens it
 

00:08:13.820 --> 00:08:15.490 align:start position:0%
background garbage collection happens it
pauses<00:08:14.300><c> just</c><00:08:14.330><c> a</c><00:08:14.660><c> couple</c><00:08:14.870><c> of</c><00:08:14.990><c> threads</c><00:08:15.290><c> but</c>

00:08:15.490 --> 00:08:15.500 align:start position:0%
pauses just a couple of threads but
 

00:08:15.500 --> 00:08:18.460 align:start position:0%
pauses just a couple of threads but
still<00:08:16.360><c> part</c><00:08:17.360><c> of</c><00:08:17.450><c> your</c><00:08:17.630><c> application</c><00:08:17.780><c> may</c><00:08:18.440><c> be</c>

00:08:18.460 --> 00:08:18.470 align:start position:0%
still part of your application may be
 

00:08:18.470 --> 00:08:20.110 align:start position:0%
still part of your application may be
paused<00:08:18.920><c> when</c><00:08:19.160><c> garbage</c><00:08:19.550><c> collection</c><00:08:20.030><c> is</c>

00:08:20.110 --> 00:08:20.120 align:start position:0%
paused when garbage collection is
 

00:08:20.120 --> 00:08:22.960 align:start position:0%
paused when garbage collection is
running<00:08:20.450><c> and</c><00:08:20.630><c> not</c><00:08:21.110><c> be</c><00:08:21.380><c> serving</c><00:08:21.830><c> whoever</c><00:08:22.790><c> is</c>

00:08:22.960 --> 00:08:22.970 align:start position:0%
running and not be serving whoever is
 

00:08:22.970 --> 00:08:24.580 align:start position:0%
running and not be serving whoever is
using<00:08:23.120><c> the</c><00:08:23.390><c> application</c><00:08:23.990><c> so</c><00:08:24.110><c> imagine</c><00:08:24.500><c> you</c>

00:08:24.580 --> 00:08:24.590 align:start position:0%
using the application so imagine you
 

00:08:24.590 --> 00:08:26.320 align:start position:0%
using the application so imagine you
have<00:08:24.620><c> a</c><00:08:24.740><c> web</c><00:08:24.950><c> application</c><00:08:25.160><c> and</c><00:08:25.790><c> you</c><00:08:26.210><c> have</c><00:08:26.300><c> a</c>

00:08:26.320 --> 00:08:26.330 align:start position:0%
have a web application and you have a
 

00:08:26.330 --> 00:08:27.760 align:start position:0%
have a web application and you have a
garbage<00:08:26.720><c> collection</c><00:08:27.050><c> of</c><00:08:27.290><c> a</c><00:08:27.380><c> couple</c><00:08:27.680><c> of</c>

00:08:27.760 --> 00:08:27.770 align:start position:0%
garbage collection of a couple of
 

00:08:27.770 --> 00:08:29.860 align:start position:0%
garbage collection of a couple of
seconds<00:08:28.220><c> that</c><00:08:28.850><c> means</c><00:08:29.120><c> that</c><00:08:29.390><c> during</c><00:08:29.600><c> those</c>

00:08:29.860 --> 00:08:29.870 align:start position:0%
seconds that means that during those
 

00:08:29.870 --> 00:08:31.990 align:start position:0%
seconds that means that during those
couple<00:08:30.230><c> of</c><00:08:30.260><c> seconds</c><00:08:30.740><c> no</c><00:08:30.980><c> garbage</c><00:08:31.400><c> or</c><00:08:31.580><c> no</c>

00:08:31.990 --> 00:08:32.000 align:start position:0%
couple of seconds no garbage or no
 

00:08:32.000 --> 00:08:34.180 align:start position:0%
couple of seconds no garbage or no
requests<00:08:32.570><c> will</c><00:08:32.780><c> be</c><00:08:32.930><c> processed</c><00:08:33.410><c> and</c><00:08:33.650><c> your</c>

00:08:34.180 --> 00:08:34.190 align:start position:0%
requests will be processed and your
 

00:08:34.190 --> 00:08:36.640 align:start position:0%
requests will be processed and your
application<00:08:34.760><c> will</c><00:08:34.910><c> seem</c><00:08:35.210><c> to</c><00:08:35.240><c> hang</c><00:08:35.690><c> so</c><00:08:36.470><c> that's</c>

00:08:36.640 --> 00:08:36.650 align:start position:0%
application will seem to hang so that's
 

00:08:36.650 --> 00:08:39.040 align:start position:0%
application will seem to hang so that's
not<00:08:36.830><c> ideal</c><00:08:36.890><c> and</c><00:08:37.490><c> that's</c><00:08:37.970><c> why</c><00:08:38.180><c> we</c><00:08:38.479><c> want</c><00:08:38.690><c> to</c><00:08:38.840><c> help</c>

00:08:39.040 --> 00:08:39.050 align:start position:0%
not ideal and that's why we want to help
 

00:08:39.050 --> 00:08:40.540 align:start position:0%
not ideal and that's why we want to help
out<00:08:39.229><c> the</c><00:08:39.380><c> garbage</c><00:08:39.710><c> collector</c><00:08:40.100><c> a</c><00:08:40.130><c> little</c><00:08:40.400><c> bit</c>

00:08:40.540 --> 00:08:40.550 align:start position:0%
out the garbage collector a little bit
 

00:08:40.550 --> 00:08:43.180 align:start position:0%
out the garbage collector a little bit
about<00:08:41.390><c> being</c><00:08:41.750><c> smarter</c><00:08:42.229><c> and</c><00:08:42.410><c> having</c><00:08:42.770><c> to</c><00:08:42.920><c> run</c>

00:08:43.180 --> 00:08:43.190 align:start position:0%
about being smarter and having to run
 

00:08:43.190 --> 00:08:46.090 align:start position:0%
about being smarter and having to run
less<00:08:44.000><c> frequently</c><00:08:44.510><c> or</c><00:08:44.570><c> at</c><00:08:44.960><c> least</c><00:08:45.170><c> less</c><00:08:45.500><c> long</c><00:08:45.800><c> to</c>

00:08:46.090 --> 00:08:46.100 align:start position:0%
less frequently or at least less long to
 

00:08:46.100 --> 00:08:47.350 align:start position:0%
less frequently or at least less long to
scan<00:08:46.340><c> all</c><00:08:46.460><c> the</c><00:08:46.490><c> objects</c><00:08:46.910><c> that</c><00:08:47.030><c> are</c><00:08:47.180><c> in</c><00:08:47.210><c> the</c>

00:08:47.350 --> 00:08:47.360 align:start position:0%
scan all the objects that are in the
 

00:08:47.360 --> 00:08:51.160 align:start position:0%
scan all the objects that are in the
object<00:08:47.660><c> tree</c><00:08:47.810><c> there</c><00:08:48.670><c> now</c><00:08:49.670><c> when</c><00:08:50.360><c> does</c><00:08:50.510><c> it</c><00:08:50.630><c> run</c><00:08:50.810><c> I</c>

00:08:51.160 --> 00:08:51.170 align:start position:0%
object tree there now when does it run I
 

00:08:51.170 --> 00:08:54.010 align:start position:0%
object tree there now when does it run I
have<00:08:52.040><c> still</c><00:08:52.400><c> to</c><00:08:52.640><c> encounter</c><00:08:53.060><c> a</c><00:08:53.270><c> document</c><00:08:53.930><c> that</c>

00:08:54.010 --> 00:08:54.020 align:start position:0%
have still to encounter a document that
 

00:08:54.020 --> 00:08:55.810 align:start position:0%
have still to encounter a document that
really<00:08:54.380><c> documents</c><00:08:55.100><c> all</c><00:08:55.250><c> the</c><00:08:55.490><c> different</c>

00:08:55.810 --> 00:08:55.820 align:start position:0%
really documents all the different
 

00:08:55.820 --> 00:08:57.460 align:start position:0%
really documents all the different
points<00:08:56.180><c> where</c><00:08:56.300><c> the</c><00:08:56.450><c> garbage</c><00:08:56.690><c> collector</c><00:08:57.230><c> runs</c>

00:08:57.460 --> 00:08:57.470 align:start position:0%
points where the garbage collector runs
 

00:08:57.470 --> 00:09:00.880 align:start position:0%
points where the garbage collector runs
but<00:08:58.160><c> people</c><00:08:58.580><c> have</c><00:08:58.760><c> been</c><00:08:59.560><c> experimenting</c><00:09:00.560><c> and</c>

00:09:00.880 --> 00:09:00.890 align:start position:0%
but people have been experimenting and
 

00:09:00.890 --> 00:09:02.230 align:start position:0%
but people have been experimenting and
looking<00:09:01.160><c> into</c><00:09:01.280><c> the</c><00:09:01.400><c> garbage</c><00:09:01.760><c> collector</c><00:09:02.150><c> and</c>

00:09:02.230 --> 00:09:02.240 align:start position:0%
looking into the garbage collector and
 

00:09:02.240 --> 00:09:04.030 align:start position:0%
looking into the garbage collector and
typically<00:09:02.690><c> it</c><00:09:02.840><c> runs</c><00:09:03.110><c> on</c><00:09:03.350><c> out</c><00:09:03.650><c> of</c><00:09:03.860><c> memory</c>

00:09:04.030 --> 00:09:04.040 align:start position:0%
typically it runs on out of memory
 

00:09:04.040 --> 00:09:05.950 align:start position:0%
typically it runs on out of memory
conditions<00:09:04.670><c> where</c><00:09:05.270><c> no</c><00:09:05.390><c> memory</c><00:09:05.720><c> is</c><00:09:05.810><c> available</c>

00:09:05.950 --> 00:09:05.960 align:start position:0%
conditions where no memory is available
 

00:09:05.960 --> 00:09:08.410 align:start position:0%
conditions where no memory is available
its<00:09:06.470><c> first</c><00:09:06.740><c> try</c><00:09:06.980><c> to</c><00:09:07.040><c> reclaim</c><00:09:07.550><c> some</c><00:09:07.790><c> memory</c><00:09:08.090><c> see</c>

00:09:08.410 --> 00:09:08.420 align:start position:0%
its first try to reclaim some memory see
 

00:09:08.420 --> 00:09:10.960 align:start position:0%
its first try to reclaim some memory see
some<00:09:08.630><c> memory</c><00:09:09.050><c> is</c><00:09:09.139><c> available</c><00:09:09.730><c> when</c><00:09:10.730><c> you</c><00:09:10.850><c> do</c>

00:09:10.960 --> 00:09:10.970 align:start position:0%
some memory is available when you do
 

00:09:10.970 --> 00:09:12.970 align:start position:0%
some memory is available when you do
significant<00:09:11.660><c> allocations</c><00:09:12.320><c> that's</c><00:09:12.649><c> also</c>

00:09:12.970 --> 00:09:12.980 align:start position:0%
significant allocations that's also
 

00:09:12.980 --> 00:09:14.379 align:start position:0%
significant allocations that's also
typically<00:09:13.370><c> when</c><00:09:13.579><c> the</c><00:09:13.670><c> garbage</c><00:09:13.880><c> collector</c>

00:09:14.379 --> 00:09:14.389 align:start position:0%
typically when the garbage collector
 

00:09:14.389 --> 00:09:16.090 align:start position:0%
typically when the garbage collector
will<00:09:14.420><c> run</c><00:09:14.779><c> and</c><00:09:15.019><c> that's</c><00:09:15.170><c> a</c><00:09:15.320><c> really</c><00:09:15.589><c> important</c>

00:09:16.090 --> 00:09:16.100 align:start position:0%
will run and that's a really important
 

00:09:16.100 --> 00:09:18.220 align:start position:0%
will run and that's a really important
one<00:09:16.250><c> because</c><00:09:17.089><c> if</c><00:09:17.240><c> you</c><00:09:17.269><c> allocate</c><00:09:17.720><c> lots</c><00:09:18.019><c> and</c>

00:09:18.220 --> 00:09:18.230 align:start position:0%
one because if you allocate lots and
 

00:09:18.230 --> 00:09:19.660 align:start position:0%
one because if you allocate lots and
lots<00:09:18.410><c> and</c><00:09:18.589><c> lots</c><00:09:18.800><c> of</c><00:09:18.920><c> variables</c><00:09:19.430><c> in</c><00:09:19.550><c> your</c>

00:09:19.660 --> 00:09:19.670 align:start position:0%
lots and lots of variables in your
 

00:09:19.670 --> 00:09:21.970 align:start position:0%
lots and lots of variables in your
application<00:09:20.240><c> chances</c><00:09:21.110><c> are</c><00:09:21.260><c> really</c><00:09:21.440><c> high</c><00:09:21.620><c> that</c>

00:09:21.970 --> 00:09:21.980 align:start position:0%
application chances are really high that
 

00:09:21.980 --> 00:09:23.139 align:start position:0%
application chances are really high that
the<00:09:22.070><c> garbage</c><00:09:22.370><c> collector</c><00:09:22.790><c> will</c><00:09:22.820><c> run</c>

00:09:23.139 --> 00:09:23.149 align:start position:0%
the garbage collector will run
 

00:09:23.149 --> 00:09:25.329 align:start position:0%
the garbage collector will run
immediately<00:09:23.540><c> after</c><00:09:24.110><c> that</c><00:09:24.139><c> and</c><00:09:24.560><c> may</c><00:09:25.070><c> pause</c>

00:09:25.329 --> 00:09:25.339 align:start position:0%
immediately after that and may pause
 

00:09:25.339 --> 00:09:27.910 align:start position:0%
immediately after that and may pause
your<00:09:25.550><c> application</c><00:09:26.149><c> at</c><00:09:26.240><c> endpoints</c><00:09:26.779><c> of</c><00:09:27.380><c> course</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
your application at endpoints of course
 

00:09:27.920 --> 00:09:29.530 align:start position:0%
your application at endpoints of course
there's<00:09:28.130><c> some</c><00:09:28.279><c> other</c><00:09:28.430><c> places</c><00:09:29.180><c> where</c><00:09:29.449><c> the</c>

00:09:29.530 --> 00:09:29.540 align:start position:0%
there's some other places where the
 

00:09:29.540 --> 00:09:31.000 align:start position:0%
there's some other places where the
garbage<00:09:29.720><c> collector</c><00:09:30.199><c> may</c><00:09:30.350><c> run</c><00:09:30.560><c> as</c><00:09:30.680><c> well</c><00:09:30.860><c> you</c>

00:09:31.000 --> 00:09:31.010 align:start position:0%
garbage collector may run as well you
 

00:09:31.010 --> 00:09:34.030 align:start position:0%
garbage collector may run as well you
can<00:09:31.190><c> force</c><00:09:31.490><c> it</c><00:09:31.670><c> by</c><00:09:31.910><c> calling</c><00:09:32.180><c> GC</c><00:09:32.690><c> collects</c><00:09:33.380><c> you</c>

00:09:34.030 --> 00:09:34.040 align:start position:0%
can force it by calling GC collects you
 

00:09:34.040 --> 00:09:35.680 align:start position:0%
can force it by calling GC collects you
can<00:09:34.190><c> attach</c><00:09:34.459><c> a</c><00:09:34.550><c> profiler</c><00:09:35.089><c> and</c><00:09:35.420><c> let</c><00:09:35.600><c> the</c>

00:09:35.680 --> 00:09:35.690 align:start position:0%
can attach a profiler and let the
 

00:09:35.690 --> 00:09:37.810 align:start position:0%
can attach a profiler and let the
profiler<00:09:36.139><c> do</c><00:09:36.589><c> a</c><00:09:36.649><c> garbage</c><00:09:37.040><c> collection</c><00:09:37.370><c> and</c><00:09:37.670><c> so</c>

00:09:37.810 --> 00:09:37.820 align:start position:0%
profiler do a garbage collection and so
 

00:09:37.820 --> 00:09:41.650 align:start position:0%
profiler do a garbage collection and so
on<00:09:38.000><c> but</c><00:09:38.870><c> still</c><00:09:39.310><c> probably</c><00:09:40.310><c> the</c><00:09:40.490><c> most</c><00:09:41.120><c> important</c>

00:09:41.650 --> 00:09:41.660 align:start position:0%
on but still probably the most important
 

00:09:41.660 --> 00:09:43.509 align:start position:0%
on but still probably the most important
one<00:09:41.720><c> here</c><00:09:42.019><c> is</c><00:09:42.139><c> after</c><00:09:42.380><c> you</c><00:09:42.680><c> do</c><00:09:42.829><c> a</c><00:09:42.860><c> significant</c>

00:09:43.509 --> 00:09:43.519 align:start position:0%
one here is after you do a significant
 

00:09:43.519 --> 00:09:45.610 align:start position:0%
one here is after you do a significant
allocation<00:09:44.120><c> or</c><00:09:44.329><c> when</c><00:09:44.930><c> there's</c><00:09:45.139><c> no</c><00:09:45.290><c> memory</c>

00:09:45.610 --> 00:09:45.620 align:start position:0%
allocation or when there's no memory
 

00:09:45.620 --> 00:09:47.259 align:start position:0%
allocation or when there's no memory
available<00:09:46.100><c> and</c><00:09:46.310><c> it</c><00:09:46.399><c> should</c><00:09:46.579><c> check</c><00:09:46.910><c> if</c><00:09:47.060><c> memory</c>

00:09:47.259 --> 00:09:47.269 align:start position:0%
available and it should check if memory
 

00:09:47.269 --> 00:09:50.050 align:start position:0%
available and it should check if memory
can<00:09:47.600><c> be</c><00:09:47.630><c> made</c><00:09:47.930><c> available</c><00:09:48.160><c> now</c><00:09:49.160><c> one</c><00:09:49.579><c> important</c>

00:09:50.050 --> 00:09:50.060 align:start position:0%
can be made available now one important
 

00:09:50.060 --> 00:09:51.670 align:start position:0%
can be made available now one important
one<00:09:50.209><c> also</c><00:09:50.420><c> is</c><00:09:50.720><c> that</c><00:09:50.750><c> the</c><00:09:50.959><c> garbage</c><00:09:51.260><c> collector</c>

00:09:51.670 --> 00:09:51.680 align:start position:0%
one also is that the garbage collector
 

00:09:51.680 --> 00:09:53.920 align:start position:0%
one also is that the garbage collector
is<00:09:51.769><c> not</c><00:09:52.010><c> guaranteed</c><00:09:52.699><c> to</c><00:09:52.970><c> run</c><00:09:53.149><c> so</c><00:09:53.570><c> if</c><00:09:53.690><c> you</c><00:09:53.810><c> have</c>

00:09:53.920 --> 00:09:53.930 align:start position:0%
is not guaranteed to run so if you have
 

00:09:53.930 --> 00:09:56.050 align:start position:0%
is not guaranteed to run so if you have
a<00:09:53.959><c> big</c><00:09:54.260><c> application</c><00:09:55.010><c> and</c><00:09:55.250><c> none</c><00:09:55.790><c> of</c><00:09:55.940><c> these</c>

00:09:56.050 --> 00:09:56.060 align:start position:0%
a big application and none of these
 

00:09:56.060 --> 00:09:57.550 align:start position:0%
a big application and none of these
conditions<00:09:56.660><c> really</c><00:09:56.899><c> happen</c><00:09:57.320><c> in</c><00:09:57.440><c> your</c>

00:09:57.550 --> 00:09:57.560 align:start position:0%
conditions really happen in your
 

00:09:57.560 --> 00:09:59.230 align:start position:0%
conditions really happen in your
application<00:09:58.160><c> it</c><00:09:58.310><c> could</c><00:09:58.610><c> well</c><00:09:58.820><c> be</c><00:09:58.850><c> that</c><00:09:59.149><c> the</c>

00:09:59.230 --> 00:09:59.240 align:start position:0%
application it could well be that the
 

00:09:59.240 --> 00:10:01.660 align:start position:0%
application it could well be that the
garbage<00:09:59.570><c> collector</c><00:09:59.959><c> doesn't</c><00:10:00.350><c> even</c><00:10:00.500><c> run</c><00:10:00.769><c> now</c>

00:10:01.660 --> 00:10:01.670 align:start position:0%
garbage collector doesn't even run now
 

00:10:01.670 --> 00:10:03.850 align:start position:0%
garbage collector doesn't even run now
in<00:10:01.940><c> case</c><00:10:02.149><c> you</c><00:10:02.300><c> want</c><00:10:02.480><c> to</c><00:10:02.540><c> see</c><00:10:02.839><c> or</c><00:10:03.110><c> discover</c><00:10:03.589><c> when</c>

00:10:03.850 --> 00:10:03.860 align:start position:0%
in case you want to see or discover when
 

00:10:03.860 --> 00:10:06.250 align:start position:0%
in case you want to see or discover when
the<00:10:03.980><c> garbage</c><00:10:04.279><c> collector</c><00:10:04.730><c> runs</c><00:10:05.139><c> there</c><00:10:06.139><c> is</c>

00:10:06.250 --> 00:10:06.260 align:start position:0%
the garbage collector runs there is
 

00:10:06.260 --> 00:10:09.280 align:start position:0%
the garbage collector runs there is
actually<00:10:06.910><c> the</c><00:10:07.910><c> source</c><00:10:08.180><c> code</c><00:10:08.510><c> of</c><00:10:08.750><c> the</c><00:10:09.079><c> garbage</c>

00:10:09.280 --> 00:10:09.290 align:start position:0%
actually the source code of the garbage
 

00:10:09.290 --> 00:10:12.340 align:start position:0%
actually the source code of the garbage
collector<00:10:09.740><c> is</c><00:10:09.769><c> available</c><00:10:10.459><c> online</c><00:10:10.940><c> so</c><00:10:11.389><c> if</c><00:10:12.199><c> you</c>

00:10:12.340 --> 00:10:12.350 align:start position:0%
collector is available online so if you
 

00:10:12.350 --> 00:10:16.540 align:start position:0%
collector is available online so if you
go<00:10:12.560><c> to</c><00:10:12.589><c> github</c><00:10:13.490><c> you</c><00:10:14.420><c> will</c><00:10:14.570><c> see</c><00:10:15.160><c> that</c><00:10:16.160><c> it's</c>

00:10:16.540 --> 00:10:16.550 align:start position:0%
go to github you will see that it's
 

00:10:16.550 --> 00:10:19.030 align:start position:0%
go to github you will see that it's
available<00:10:17.149><c> and</c><00:10:17.600><c> it's</c><00:10:17.839><c> I</c><00:10:18.320><c> think</c><00:10:18.410><c> it's</c><00:10:18.800><c> about</c>

00:10:19.030 --> 00:10:19.040 align:start position:0%
available and it's I think it's about
 

00:10:19.040 --> 00:10:22.689 align:start position:0%
available and it's I think it's about
60,000<00:10:19.970><c> lines</c><00:10:20.240><c> of</c><00:10:20.420><c> codes</c><00:10:20.690><c> or</c><00:10:21.680><c> 40,000</c><00:10:22.370><c> lines</c><00:10:22.490><c> of</c>

00:10:22.689 --> 00:10:22.699 align:start position:0%
60,000 lines of codes or 40,000 lines of
 

00:10:22.699 --> 00:10:25.930 align:start position:0%
60,000 lines of codes or 40,000 lines of
codes<00:10:22.940><c> of</c><00:10:23.149><c> C++</c><00:10:23.810><c> codes</c><00:10:24.410><c> so</c><00:10:25.010><c> if</c><00:10:25.040><c> you</c><00:10:25.430><c> find</c><00:10:25.640><c> when</c>

00:10:25.930 --> 00:10:25.940 align:start position:0%
codes of C++ codes so if you find when
 

00:10:25.940 --> 00:10:27.519 align:start position:0%
codes of C++ codes so if you find when
it<00:10:26.089><c> really</c><00:10:26.449><c> runs</c><00:10:26.660><c> in</c><00:10:26.959><c> what</c><00:10:27.170><c> the</c><00:10:27.320><c> real</c>

00:10:27.519 --> 00:10:27.529 align:start position:0%
it really runs in what the real
 

00:10:27.529 --> 00:10:29.380 align:start position:0%
it really runs in what the real
conditions<00:10:28.100><c> are</c><00:10:28.279><c> for</c><00:10:28.519><c> the</c><00:10:28.640><c> garbage</c><00:10:28.910><c> collector</c>

00:10:29.380 --> 00:10:29.390 align:start position:0%
conditions are for the garbage collector
 

00:10:29.390 --> 00:10:31.509 align:start position:0%
conditions are for the garbage collector
to<00:10:29.540><c> run</c><00:10:29.720><c> and</c><00:10:29.930><c> I'll</c><00:10:30.019><c> keep</c><00:10:30.170><c> scrolling</c><00:10:30.519><c> please</c>

00:10:31.509 --> 00:10:31.519 align:start position:0%
to run and I'll keep scrolling please
 

00:10:31.519 --> 00:10:34.960 align:start position:0%
to run and I'll keep scrolling please
tell<00:10:31.760><c> me</c><00:10:31.910><c> I</c><00:10:31.940><c> would</c><00:10:32.120><c> like</c><00:10:32.390><c> to</c><00:10:32.600><c> notice</c><00:10:33.730><c> also</c><00:10:34.730><c> if</c>

00:10:34.960 --> 00:10:34.970 align:start position:0%
tell me I would like to notice also if
 

00:10:34.970 --> 00:10:36.100 align:start position:0%
tell me I would like to notice also if
you<00:10:35.089><c> want</c><00:10:35.269><c> to</c><00:10:35.300><c> write</c><00:10:35.540><c> your</c><00:10:35.660><c> own</c><00:10:35.810><c> garbage</c>

00:10:36.100 --> 00:10:36.110 align:start position:0%
you want to write your own garbage
 

00:10:36.110 --> 00:10:37.689 align:start position:0%
you want to write your own garbage
collector<00:10:36.680><c> in</c><00:10:36.800><c> dotnet</c><00:10:37.130><c> core</c><00:10:37.370><c> you</c><00:10:37.519><c> can</c>

00:10:37.689 --> 00:10:37.699 align:start position:0%
collector in dotnet core you can
 

00:10:37.699 --> 00:10:39.340 align:start position:0%
collector in dotnet core you can
actually<00:10:37.820><c> replace</c><00:10:38.390><c> the</c><00:10:38.570><c> garbage</c><00:10:38.870><c> collector</c>

00:10:39.340 --> 00:10:39.350 align:start position:0%
actually replace the garbage collector
 

00:10:39.350 --> 00:10:40.960 align:start position:0%
actually replace the garbage collector
so<00:10:39.529><c> this</c><00:10:39.709><c> could</c><00:10:39.949><c> be</c><00:10:40.100><c> a</c><00:10:40.130><c> good</c><00:10:40.310><c> starting</c><00:10:40.730><c> point</c>

00:10:40.960 --> 00:10:40.970 align:start position:0%
so this could be a good starting point
 

00:10:40.970 --> 00:10:46.319 align:start position:0%
so this could be a good starting point
to<00:10:41.269><c> write</c><00:10:41.449><c> your</c><00:10:41.630><c> own</c><00:10:41.779><c> one</c><00:10:42.019><c> if</c><00:10:42.410><c> you</c><00:10:42.560><c> want</c><00:10:44.290><c> rights</c>

00:10:46.319 --> 00:10:46.329 align:start position:0%
to write your own one if you want rights
 

00:10:46.329 --> 00:10:49.329 align:start position:0%
to write your own one if you want rights
so<00:10:47.329><c> having</c><00:10:48.050><c> seen</c><00:10:48.290><c> all</c><00:10:48.410><c> those</c><00:10:48.649><c> things</c><00:10:48.980><c> we</c>

00:10:49.329 --> 00:10:49.339 align:start position:0%
so having seen all those things we
 

00:10:49.339 --> 00:10:51.069 align:start position:0%
so having seen all those things we
probably<00:10:49.610><c> want</c><00:10:50.209><c> to</c><00:10:50.329><c> optimize</c><00:10:50.660><c> our</c>

00:10:51.069 --> 00:10:51.079 align:start position:0%
probably want to optimize our
 

00:10:51.079 --> 00:10:52.870 align:start position:0%
probably want to optimize our
application<00:10:51.800><c> a</c><00:10:51.890><c> little</c><00:10:52.010><c> bit</c><00:10:52.310><c> and</c><00:10:52.490><c> we</c><00:10:52.610><c> want</c><00:10:52.790><c> to</c>

00:10:52.870 --> 00:10:52.880 align:start position:0%
application a little bit and we want to
 

00:10:52.880 --> 00:10:55.120 align:start position:0%
application a little bit and we want to
make<00:10:53.029><c> sure</c><00:10:53.269><c> that</c><00:10:53.480><c> garbage</c><00:10:53.779><c> collection</c><00:10:54.440><c> either</c>

00:10:55.120 --> 00:10:55.130 align:start position:0%
make sure that garbage collection either
 

00:10:55.130 --> 00:10:57.670 align:start position:0%
make sure that garbage collection either
doesn't<00:10:55.640><c> have</c><00:10:55.790><c> to</c><00:10:55.940><c> happen</c><00:10:56.269><c> so</c><00:10:56.690><c> many</c><00:10:56.839><c> often</c><00:10:57.110><c> so</c>

00:10:57.670 --> 00:10:57.680 align:start position:0%
doesn't have to happen so many often so
 

00:10:57.680 --> 00:11:00.309 align:start position:0%
doesn't have to happen so many often so
many<00:10:57.860><c> times</c><00:10:58.130><c> or</c><00:10:58.459><c> thats</c><00:10:59.329><c> garbage</c><00:10:59.810><c> collection</c>

00:11:00.309 --> 00:11:00.319 align:start position:0%
many times or thats garbage collection
 

00:11:00.319 --> 00:11:02.740 align:start position:0%
many times or thats garbage collection
takes<00:11:00.649><c> less</c><00:11:00.920><c> time</c><00:11:00.949><c> to</c><00:11:01.430><c> basically</c><00:11:02.209><c> shorten</c>

00:11:02.740 --> 00:11:02.750 align:start position:0%
takes less time to basically shorten
 

00:11:02.750 --> 00:11:04.329 align:start position:0%
takes less time to basically shorten
those<00:11:02.899><c> pauses</c><00:11:03.440><c> that's</c><00:11:03.649><c> the</c><00:11:04.040><c> garbage</c>

00:11:04.329 --> 00:11:04.339 align:start position:0%
those pauses that's the garbage
 

00:11:04.339 --> 00:11:06.250 align:start position:0%
those pauses that's the garbage
collector<00:11:04.730><c> will</c><00:11:04.760><c> make</c><00:11:05.089><c> one</c><00:11:05.810><c> way</c><00:11:05.990><c> of</c><00:11:06.110><c> doing</c>

00:11:06.250 --> 00:11:06.260 align:start position:0%
collector will make one way of doing
 

00:11:06.260 --> 00:11:08.410 align:start position:0%
collector will make one way of doing
that<00:11:06.560><c> could</c><00:11:06.800><c> be</c><00:11:06.829><c> optimizing</c><00:11:07.550><c> our</c><00:11:07.819><c> allocations</c>

00:11:08.410 --> 00:11:08.420 align:start position:0%
that could be optimizing our allocations
 

00:11:08.420 --> 00:11:11.019 align:start position:0%
that could be optimizing our allocations
using<00:11:08.899><c> structs</c><00:11:09.410><c> when</c><00:11:09.560><c> it</c><00:11:09.680><c> makes</c><00:11:09.860><c> sense</c><00:11:10.029><c> using</c>

00:11:11.019 --> 00:11:11.029 align:start position:0%
using structs when it makes sense using
 

00:11:11.029 --> 00:11:13.059 align:start position:0%
using structs when it makes sense using
the<00:11:11.120><c> new</c><00:11:11.240><c> span</c><00:11:11.569><c> of</c><00:11:11.720><c> these</c><00:11:11.930><c> stacking</c><00:11:12.889><c> locks</c>

00:11:13.059 --> 00:11:13.069 align:start position:0%
the new span of these stacking locks
 

00:11:13.069 --> 00:11:15.550 align:start position:0%
the new span of these stacking locks
object<00:11:13.610><c> pooling</c><00:11:13.880><c> things</c><00:11:14.300><c> like</c><00:11:14.449><c> that</c><00:11:14.660><c> that's</c>

00:11:15.550 --> 00:11:15.560 align:start position:0%
object pooling things like that that's
 

00:11:15.560 --> 00:11:17.860 align:start position:0%
object pooling things like that that's
one<00:11:15.769><c> way</c><00:11:15.920><c> of</c><00:11:15.949><c> doing</c><00:11:16.190><c> it</c><00:11:16.430><c> the</c><00:11:17.000><c> problem</c><00:11:17.449><c> there</c><00:11:17.660><c> is</c>

00:11:17.860 --> 00:11:17.870 align:start position:0%
one way of doing it the problem there is
 

00:11:17.870 --> 00:11:21.370 align:start position:0%
one way of doing it the problem there is
that<00:11:18.010><c> a</c><00:11:19.010><c> lot</c><00:11:19.790><c> of</c><00:11:19.880><c> those</c><00:11:20.060><c> cases</c><00:11:20.959><c> where</c><00:11:21.350><c> you</c>

00:11:21.370 --> 00:11:21.380 align:start position:0%
that a lot of those cases where you
 

00:11:21.380 --> 00:11:22.300 align:start position:0%
that a lot of those cases where you
think<00:11:21.740><c> it</c><00:11:21.860><c> could</c>

00:11:22.300 --> 00:11:22.310 align:start position:0%
think it could
 

00:11:22.310 --> 00:11:24.369 align:start position:0%
think it could
since<00:11:22.550><c> may</c><00:11:22.910><c> actually</c><00:11:23.089><c> shoot</c><00:11:23.779><c> you</c><00:11:23.959><c> in</c><00:11:24.079><c> the</c><00:11:24.110><c> foot</c>

00:11:24.369 --> 00:11:24.379 align:start position:0%
since may actually shoot you in the foot
 

00:11:24.379 --> 00:11:26.319 align:start position:0%
since may actually shoot you in the foot
later<00:11:24.649><c> on</c><00:11:24.889><c> because</c><00:11:25.579><c> you're</c><00:11:25.730><c> allocating</c><00:11:26.060><c> on</c>

00:11:26.319 --> 00:11:26.329 align:start position:0%
later on because you're allocating on
 

00:11:26.329 --> 00:11:27.489 align:start position:0%
later on because you're allocating on
the<00:11:26.420><c> stack</c><00:11:26.660><c> and</c><00:11:26.870><c> no</c><00:11:26.959><c> longer</c><00:11:27.259><c> on</c><00:11:27.350><c> this</c>

00:11:27.489 --> 00:11:27.499 align:start position:0%
the stack and no longer on this
 

00:11:27.499 --> 00:11:30.369 align:start position:0%
the stack and no longer on this
automatically<00:11:28.189><c> managed</c><00:11:28.639><c> heap</c><00:11:28.879><c> in</c><00:11:29.360><c> dotnet</c><00:11:29.749><c> but</c>

00:11:30.369 --> 00:11:30.379 align:start position:0%
automatically managed heap in dotnet but
 

00:11:30.379 --> 00:11:31.780 align:start position:0%
automatically managed heap in dotnet but
still<00:11:30.589><c> if</c><00:11:30.709><c> you</c><00:11:30.829><c> know</c><00:11:30.949><c> what</c><00:11:31.129><c> you're</c><00:11:31.279><c> doing</c><00:11:31.550><c> that</c>

00:11:31.780 --> 00:11:31.790 align:start position:0%
still if you know what you're doing that
 

00:11:31.790 --> 00:11:34.389 align:start position:0%
still if you know what you're doing that
could<00:11:31.999><c> be</c><00:11:32.149><c> one</c><00:11:32.389><c> way</c><00:11:32.420><c> of</c><00:11:32.680><c> having</c><00:11:33.680><c> less</c><00:11:34.009><c> stress</c>

00:11:34.389 --> 00:11:34.399 align:start position:0%
could be one way of having less stress
 

00:11:34.399 --> 00:11:36.699 align:start position:0%
could be one way of having less stress
on<00:11:34.639><c> the</c><00:11:34.759><c> garbage</c><00:11:35.060><c> collector</c><00:11:35.540><c> another</c><00:11:36.499><c> one</c>

00:11:36.699 --> 00:11:36.709 align:start position:0%
on the garbage collector another one
 

00:11:36.709 --> 00:11:39.189 align:start position:0%
on the garbage collector another one
could<00:11:36.920><c> be</c><00:11:36.980><c> to</c><00:11:37.490><c> make</c><00:11:37.670><c> use</c><00:11:37.939><c> of</c><00:11:37.970><c> a</c><00:11:38.240><c> disposable</c><00:11:38.899><c> and</c>

00:11:39.189 --> 00:11:39.199 align:start position:0%
could be to make use of a disposable and
 

00:11:39.199 --> 00:11:42.460 align:start position:0%
could be to make use of a disposable and
using<00:11:39.559><c> statements</c><00:11:40.129><c> to</c><00:11:40.509><c> optimize</c><00:11:41.509><c> cleaning</c><00:11:42.379><c> up</c>

00:11:42.460 --> 00:11:42.470 align:start position:0%
using statements to optimize cleaning up
 

00:11:42.470 --> 00:11:44.199 align:start position:0%
using statements to optimize cleaning up
things<00:11:42.740><c> and</c><00:11:43.009><c> basically</c><00:11:43.430><c> telling</c><00:11:43.790><c> the</c><00:11:44.029><c> dotnet</c>

00:11:44.199 --> 00:11:44.209 align:start position:0%
things and basically telling the dotnet
 

00:11:44.209 --> 00:11:46.600 align:start position:0%
things and basically telling the dotnet
runtime<00:11:44.809><c> that</c><00:11:45.350><c> you</c><00:11:45.529><c> have</c><00:11:45.709><c> already</c><00:11:45.920><c> manually</c>

00:11:46.600 --> 00:11:46.610 align:start position:0%
runtime that you have already manually
 

00:11:46.610 --> 00:11:48.369 align:start position:0%
runtime that you have already manually
cleaned<00:11:46.910><c> up</c><00:11:47.089><c> some</c><00:11:47.300><c> of</c><00:11:47.360><c> the</c><00:11:47.569><c> things</c><00:11:47.809><c> that</c><00:11:48.199><c> your</c>

00:11:48.369 --> 00:11:48.379 align:start position:0%
cleaned up some of the things that your
 

00:11:48.379 --> 00:11:51.610 align:start position:0%
cleaned up some of the things that your
object<00:11:48.470><c> has</c><00:11:48.970><c> referenced</c><00:11:49.970><c> to</c><00:11:50.899><c> make</c><00:11:51.139><c> it</c><00:11:51.290><c> easier</c>

00:11:51.610 --> 00:11:51.620 align:start position:0%
object has referenced to make it easier
 

00:11:51.620 --> 00:11:53.019 align:start position:0%
object has referenced to make it easier
for<00:11:51.649><c> the</c><00:11:51.920><c> garbage</c><00:11:52.220><c> collector</c><00:11:52.670><c> to</c><00:11:52.850><c> run</c>

00:11:53.019 --> 00:11:53.029 align:start position:0%
for the garbage collector to run
 

00:11:53.029 --> 00:11:55.420 align:start position:0%
for the garbage collector to run
everything<00:11:53.449><c> there</c><00:11:53.920><c> another</c><00:11:54.920><c> thing</c><00:11:55.040><c> you</c><00:11:55.279><c> could</c>

00:11:55.420 --> 00:11:55.430 align:start position:0%
everything there another thing you could
 

00:11:55.430 --> 00:11:57.160 align:start position:0%
everything there another thing you could
do<00:11:55.579><c> is</c><00:11:55.670><c> make</c><00:11:55.699><c> use</c><00:11:56.089><c> of</c><00:11:56.120><c> weak</c><00:11:56.420><c> references</c><00:11:56.990><c> in</c>

00:11:57.160 --> 00:11:57.170 align:start position:0%
do is make use of weak references in
 

00:11:57.170 --> 00:11:58.569 align:start position:0%
do is make use of weak references in
your<00:11:57.319><c> code</c><00:11:57.559><c> where</c><00:11:57.769><c> you</c><00:11:57.860><c> basically</c><00:11:58.069><c> have</c><00:11:58.459><c> an</c>

00:11:58.569 --> 00:11:58.579 align:start position:0%
your code where you basically have an
 

00:11:58.579 --> 00:12:00.400 align:start position:0%
your code where you basically have an
object<00:11:58.939><c> that</c><00:11:59.149><c> points</c><00:11:59.420><c> to</c><00:11:59.660><c> another</c><00:11:59.870><c> objects</c>

00:12:00.400 --> 00:12:00.410 align:start position:0%
object that points to another objects
 

00:12:00.410 --> 00:12:02.350 align:start position:0%
object that points to another objects
but<00:12:00.889><c> when</c><00:12:01.040><c> the</c><00:12:01.129><c> garbage</c><00:12:01.339><c> collector</c><00:12:01.879><c> runs</c><00:12:02.029><c> it</c>

00:12:02.350 --> 00:12:02.360 align:start position:0%
but when the garbage collector runs it
 

00:12:02.360 --> 00:12:04.720 align:start position:0%
but when the garbage collector runs it
may<00:12:02.569><c> clean</c><00:12:02.899><c> up</c><00:12:03.110><c> that</c><00:12:03.290><c> reference</c><00:12:03.709><c> by</c><00:12:04.370><c> itself</c>

00:12:04.720 --> 00:12:04.730 align:start position:0%
may clean up that reference by itself
 

00:12:04.730 --> 00:12:06.129 align:start position:0%
may clean up that reference by itself
you're<00:12:04.970><c> basically</c><00:12:05.360><c> telling</c><00:12:05.600><c> the</c><00:12:05.839><c> garbage</c>

00:12:06.129 --> 00:12:06.139 align:start position:0%
you're basically telling the garbage
 

00:12:06.139 --> 00:12:08.350 align:start position:0%
you're basically telling the garbage
collector<00:12:06.589><c> that's</c><00:12:07.160><c> the</c><00:12:07.519><c> object</c><00:12:07.970><c> that</c><00:12:08.089><c> you</c><00:12:08.240><c> are</c>

00:12:08.350 --> 00:12:08.360 align:start position:0%
collector that's the object that you are
 

00:12:08.360 --> 00:12:10.720 align:start position:0%
collector that's the object that you are
referencing<00:12:08.680><c> it</c><00:12:09.680><c> can</c><00:12:09.949><c> clean</c><00:12:10.129><c> it</c><00:12:10.279><c> up</c><00:12:10.399><c> at</c><00:12:10.550><c> any</c>

00:12:10.720 --> 00:12:10.730 align:start position:0%
referencing it can clean it up at any
 

00:12:10.730 --> 00:12:13.030 align:start position:0%
referencing it can clean it up at any
time<00:12:11.059><c> and</c><00:12:11.300><c> I</c><00:12:11.509><c> will</c><00:12:11.720><c> take</c><00:12:11.930><c> care</c><00:12:12.170><c> of</c><00:12:12.230><c> reinstating</c>

00:12:13.030 --> 00:12:13.040 align:start position:0%
time and I will take care of reinstating
 

00:12:13.040 --> 00:12:15.340 align:start position:0%
time and I will take care of reinstating
the<00:12:13.220><c> object</c><00:12:13.610><c> whenever</c><00:12:13.939><c> it</c><00:12:14.059><c> is</c><00:12:14.089><c> needed</c><00:12:14.360><c> another</c>

00:12:15.340 --> 00:12:15.350 align:start position:0%
the object whenever it is needed another
 

00:12:15.350 --> 00:12:17.860 align:start position:0%
the object whenever it is needed another
option<00:12:15.800><c> is</c><00:12:16.120><c> implementing</c><00:12:17.120><c> finalized</c><00:12:17.600><c> errs</c><00:12:17.749><c> on</c>

00:12:17.860 --> 00:12:17.870 align:start position:0%
option is implementing finalized errs on
 

00:12:17.870 --> 00:12:19.329 align:start position:0%
option is implementing finalized errs on
your<00:12:18.079><c> objects</c><00:12:18.499><c> and</c><00:12:18.559><c> basically</c><00:12:19.069><c> do</c><00:12:19.220><c> the</c>

00:12:19.329 --> 00:12:19.339 align:start position:0%
your objects and basically do the
 

00:12:19.339 --> 00:12:20.860 align:start position:0%
your objects and basically do the
cleanup<00:12:19.610><c> yourself</c><00:12:20.180><c> so</c><00:12:20.420><c> that</c><00:12:20.569><c> the</c><00:12:20.660><c> garbage</c>

00:12:20.860 --> 00:12:20.870 align:start position:0%
cleanup yourself so that the garbage
 

00:12:20.870 --> 00:12:23.230 align:start position:0%
cleanup yourself so that the garbage
collector<00:12:21.410><c> no</c><00:12:21.559><c> longer</c><00:12:21.860><c> has</c><00:12:22.009><c> to</c><00:12:22.160><c> do</c><00:12:22.309><c> this</c><00:12:22.459><c> but</c>

00:12:23.230 --> 00:12:23.240 align:start position:0%
collector no longer has to do this but
 

00:12:23.240 --> 00:12:24.999 align:start position:0%
collector no longer has to do this but
beware<00:12:23.749><c> because</c><00:12:24.019><c> that's</c><00:12:24.319><c> the</c><00:12:24.499><c> last</c><00:12:24.680><c> point</c>

00:12:24.999 --> 00:12:25.009 align:start position:0%
beware because that's the last point
 

00:12:25.009 --> 00:12:26.679 align:start position:0%
beware because that's the last point
where<00:12:25.309><c> you</c><00:12:25.399><c> can</c><00:12:25.610><c> actually</c><00:12:25.939><c> run</c><00:12:26.149><c> some</c><00:12:26.389><c> cleanup</c>

00:12:26.679 --> 00:12:26.689 align:start position:0%
where you can actually run some cleanup
 

00:12:26.689 --> 00:12:29.019 align:start position:0%
where you can actually run some cleanup
steps<00:12:27.110><c> so</c><00:12:27.709><c> if</c><00:12:27.829><c> you</c><00:12:27.980><c> have</c><00:12:28.220><c> a</c><00:12:28.250><c> memory</c><00:12:28.519><c> leak</c><00:12:28.759><c> in</c>

00:12:29.019 --> 00:12:29.029 align:start position:0%
steps so if you have a memory leak in
 

00:12:29.029 --> 00:12:29.860 align:start position:0%
steps so if you have a memory leak in
your<00:12:29.089><c> finalizar</c>

00:12:29.860 --> 00:12:29.870 align:start position:0%
your finalizar
 

00:12:29.870 --> 00:12:32.350 align:start position:0%
your finalizar
the<00:12:30.500><c> memory</c><00:12:30.829><c> will</c><00:12:31.040><c> always</c><00:12:31.430><c> leak</c><00:12:31.730><c> and</c><00:12:31.970><c> never</c><00:12:32.180><c> be</c>

00:12:32.350 --> 00:12:32.360 align:start position:0%
the memory will always leak and never be
 

00:12:32.360 --> 00:12:33.819 align:start position:0%
the memory will always leak and never be
reclaimed<00:12:32.720><c> again</c><00:12:33.079><c> and</c><00:12:33.319><c> you're</c><00:12:33.500><c> actually</c>

00:12:33.819 --> 00:12:33.829 align:start position:0%
reclaimed again and you're actually
 

00:12:33.829 --> 00:12:36.179 align:start position:0%
reclaimed again and you're actually
making<00:12:33.949><c> things</c><00:12:34.309><c> worse</c><00:12:34.550><c> so</c><00:12:35.120><c> beware</c><00:12:35.449><c> of</c><00:12:35.509><c> those</c>

00:12:36.179 --> 00:12:36.189 align:start position:0%
making things worse so beware of those
 

00:12:36.189 --> 00:12:39.429 align:start position:0%
making things worse so beware of those
now<00:12:37.189><c> let's</c><00:12:37.490><c> look</c><00:12:37.670><c> at</c><00:12:37.879><c> one</c><00:12:38.509><c> example</c><00:12:38.540><c> where</c><00:12:39.350><c> we</c>

00:12:39.429 --> 00:12:39.439 align:start position:0%
now let's look at one example where we
 

00:12:39.439 --> 00:12:41.290 align:start position:0%
now let's look at one example where we
can<00:12:39.470><c> help</c><00:12:39.889><c> the</c><00:12:40.100><c> garbage</c><00:12:40.490><c> collector</c><00:12:40.970><c> and</c><00:12:41.089><c> this</c>

00:12:41.290 --> 00:12:41.300 align:start position:0%
can help the garbage collector and this
 

00:12:41.300 --> 00:12:42.579 align:start position:0%
can help the garbage collector and this
is<00:12:41.449><c> going</c><00:12:41.600><c> to</c><00:12:41.689><c> be</c><00:12:41.779><c> interesting</c><00:12:42.230><c> because</c><00:12:42.410><c> I'm</c>

00:12:42.579 --> 00:12:42.589 align:start position:0%
is going to be interesting because I'm
 

00:12:42.589 --> 00:12:46.509 align:start position:0%
is going to be interesting because I'm
looking<00:12:42.889><c> down</c><00:12:43.250><c> there</c><00:12:43.839><c> I</c><00:12:44.980><c> have</c><00:12:45.980><c> an</c><00:12:46.129><c> application</c>

00:12:46.509 --> 00:12:46.519 align:start position:0%
looking down there I have an application
 

00:12:46.519 --> 00:12:49.629 align:start position:0%
looking down there I have an application
here<00:12:46.879><c> and</c><00:12:46.939><c> by</c><00:12:47.180><c> the</c><00:12:47.209><c> way</c><00:12:47.420><c> if</c><00:12:47.660><c> you</c><00:12:48.189><c> look</c><00:12:49.189><c> at</c><00:12:49.370><c> this</c>

00:12:49.629 --> 00:12:49.639 align:start position:0%
here and by the way if you look at this
 

00:12:49.639 --> 00:12:51.400 align:start position:0%
here and by the way if you look at this
github<00:12:50.000><c> repo</c><00:12:50.360><c> you</c><00:12:50.509><c> can</c><00:12:50.660><c> find</c><00:12:50.870><c> all</c><00:12:50.990><c> the</c><00:12:51.110><c> demos</c>

00:12:51.400 --> 00:12:51.410 align:start position:0%
github repo you can find all the demos
 

00:12:51.410 --> 00:12:53.499 align:start position:0%
github repo you can find all the demos
that<00:12:51.589><c> I'll</c><00:12:51.709><c> be</c><00:12:51.860><c> doing</c><00:12:52.009><c> during</c><00:12:52.879><c> this</c><00:12:53.149><c> talk</c><00:12:53.389><c> you</c>

00:12:53.499 --> 00:12:53.509 align:start position:0%
that I'll be doing during this talk you
 

00:12:53.509 --> 00:12:55.059 align:start position:0%
that I'll be doing during this talk you
can<00:12:53.689><c> find</c><00:12:53.899><c> them</c><00:12:54.019><c> on</c><00:12:54.139><c> there</c><00:12:54.319><c> with</c><00:12:54.470><c> comments</c><00:12:54.920><c> on</c>

00:12:55.059 --> 00:12:55.069 align:start position:0%
can find them on there with comments on
 

00:12:55.069 --> 00:12:57.309 align:start position:0%
can find them on there with comments on
what<00:12:55.279><c> to</c><00:12:55.399><c> do</c><00:12:55.550><c> and</c><00:12:55.759><c> what</c><00:12:56.269><c> to</c><00:12:56.420><c> profile</c><00:12:56.839><c> and</c><00:12:56.990><c> so</c><00:12:57.170><c> on</c>

00:12:57.309 --> 00:12:57.319 align:start position:0%
what to do and what to profile and so on
 

00:12:57.319 --> 00:12:59.619 align:start position:0%
what to do and what to profile and so on
so<00:12:58.040><c> feel</c><00:12:58.220><c> free</c><00:12:58.399><c> to</c><00:12:58.430><c> do</c><00:12:58.670><c> that</c><00:12:58.699><c> when</c><00:12:59.389><c> you're</c><00:12:59.509><c> back</c>

00:12:59.619 --> 00:12:59.629 align:start position:0%
so feel free to do that when you're back
 

00:12:59.629 --> 00:13:03.340 align:start position:0%
so feel free to do that when you're back
home<00:13:00.309><c> so</c><00:13:01.309><c> I</c><00:13:01.610><c> have</c><00:13:01.939><c> a</c><00:13:01.970><c> class</c><00:13:02.269><c> here</c><00:13:02.300><c> in</c><00:13:02.779><c> my</c>

00:13:03.340 --> 00:13:03.350 align:start position:0%
home so I have a class here in my
 

00:13:03.350 --> 00:13:06.639 align:start position:0%
home so I have a class here in my
project<00:13:03.800><c> and</c><00:13:04.100><c> that</c><00:13:04.970><c> class</c><00:13:05.269><c> is</c><00:13:05.540><c> a</c><00:13:05.899><c> sample</c>

00:13:06.639 --> 00:13:06.649 align:start position:0%
project and that class is a sample
 

00:13:06.649 --> 00:13:09.069 align:start position:0%
project and that class is a sample
disposable<00:13:07.370><c> now</c><00:13:07.639><c> for</c><00:13:08.029><c> a</c><00:13:08.059><c> minute</c><00:13:08.209><c> forgets</c><00:13:08.899><c> the</c>

00:13:09.069 --> 00:13:09.079 align:start position:0%
disposable now for a minute forgets the
 

00:13:09.079 --> 00:13:11.019 align:start position:0%
disposable now for a minute forgets the
fact<00:13:09.259><c> that</c><00:13:09.439><c> it's</c><00:13:09.769><c> disposable</c><00:13:10.189><c> so</c><00:13:10.610><c> imagine</c>

00:13:11.019 --> 00:13:11.029 align:start position:0%
fact that it's disposable so imagine
 

00:13:11.029 --> 00:13:14.919 align:start position:0%
fact that it's disposable so imagine
it's<00:13:11.179><c> built</c><00:13:11.449><c> like</c><00:13:11.540><c> this</c><00:13:11.870><c> and</c><00:13:12.790><c> my</c><00:13:13.790><c> class</c><00:13:14.089><c> has</c><00:13:14.660><c> a</c>

00:13:14.919 --> 00:13:14.929 align:start position:0%
it's built like this and my class has a
 

00:13:14.929 --> 00:13:17.470 align:start position:0%
it's built like this and my class has a
file<00:13:15.290><c> stream</c><00:13:15.620><c> that</c><00:13:15.860><c> it's</c><00:13:16.089><c> references</c><00:13:17.089><c> and</c><00:13:17.360><c> it</c>

00:13:17.470 --> 00:13:17.480 align:start position:0%
file stream that it's references and it
 

00:13:17.480 --> 00:13:18.850 align:start position:0%
file stream that it's references and it
has<00:13:17.629><c> an</c><00:13:17.779><c> integer</c><00:13:18.079><c> pointer</c><00:13:18.589><c> that</c><00:13:18.740><c> it</c>

00:13:18.850 --> 00:13:18.860 align:start position:0%
has an integer pointer that it
 

00:13:18.860 --> 00:13:21.669 align:start position:0%
has an integer pointer that it
references<00:13:19.429><c> now</c><00:13:20.360><c> what</c><00:13:20.629><c> would</c><00:13:20.809><c> happen</c><00:13:20.990><c> if</c><00:13:21.230><c> I</c>

00:13:21.669 --> 00:13:21.679 align:start position:0%
references now what would happen if I
 

00:13:21.679 --> 00:13:26.470 align:start position:0%
references now what would happen if I
would<00:13:21.800><c> allocates</c><00:13:24.610><c> let's</c><00:13:25.610><c> go</c><00:13:25.819><c> to</c><00:13:25.879><c> that</c><00:13:26.120><c> methods</c>

00:13:26.470 --> 00:13:26.480 align:start position:0%
would allocates let's go to that methods
 

00:13:26.480 --> 00:13:29.199 align:start position:0%
would allocates let's go to that methods
what<00:13:27.110><c> will</c><00:13:27.259><c> happen</c><00:13:27.589><c> if</c><00:13:27.769><c> I</c><00:13:27.949><c> allocate</c><00:13:28.209><c> 10,000</c>

00:13:29.199 --> 00:13:29.209 align:start position:0%
what will happen if I allocate 10,000
 

00:13:29.209 --> 00:13:32.019 align:start position:0%
what will happen if I allocate 10,000
objects<00:13:29.569><c> and</c><00:13:30.009><c> then</c><00:13:31.009><c> expect</c><00:13:31.550><c> the</c><00:13:31.670><c> garbage</c>

00:13:32.019 --> 00:13:32.029 align:start position:0%
objects and then expect the garbage
 

00:13:32.029 --> 00:13:33.939 align:start position:0%
objects and then expect the garbage
collector<00:13:32.480><c> to</c><00:13:32.689><c> clean</c><00:13:32.929><c> them</c><00:13:33.139><c> up</c><00:13:33.230><c> so</c><00:13:33.470><c> my</c><00:13:33.709><c> code</c>

00:13:33.939 --> 00:13:33.949 align:start position:0%
collector to clean them up so my code
 

00:13:33.949 --> 00:13:36.070 align:start position:0%
collector to clean them up so my code
here<00:13:34.250><c> is</c><00:13:34.429><c> create</c><00:13:34.850><c> a</c><00:13:34.879><c> new</c><00:13:35.089><c> list</c><00:13:35.329><c> of</c><00:13:35.509><c> samples</c>

00:13:36.070 --> 00:13:36.080 align:start position:0%
here is create a new list of samples
 

00:13:36.080 --> 00:13:38.680 align:start position:0%
here is create a new list of samples
bobbles<00:13:36.530><c> that</c><00:13:36.710><c> are</c><00:13:36.830><c> not</c><00:13:37.130><c> disposable</c><00:13:37.690><c> at</c>

00:13:38.680 --> 00:13:38.690 align:start position:0%
bobbles that are not disposable at
 

00:13:38.690 --> 00:13:41.980 align:start position:0%
bobbles that are not disposable at
10,000<00:13:39.530><c> of</c><00:13:39.650><c> those</c><00:13:39.830><c> into</c><00:13:40.310><c> memory</c><00:13:40.640><c> then</c><00:13:41.600><c> at</c><00:13:41.780><c> some</c>

00:13:41.980 --> 00:13:41.990 align:start position:0%
10,000 of those into memory then at some
 

00:13:41.990 --> 00:13:44.320 align:start position:0%
10,000 of those into memory then at some
point<00:13:42.020><c> cleared</c><00:13:42.680><c> those</c><00:13:42.950><c> objects</c><00:13:43.850><c> from</c><00:13:44.000><c> our</c>

00:13:44.320 --> 00:13:44.330 align:start position:0%
point cleared those objects from our
 

00:13:44.330 --> 00:13:46.090 align:start position:0%
point cleared those objects from our
clear<00:13:44.600><c> that</c><00:13:44.780><c> list</c><00:13:44.990><c> and</c><00:13:45.230><c> expect</c><00:13:45.650><c> them</c><00:13:45.800><c> to</c><00:13:45.950><c> go</c>

00:13:46.090 --> 00:13:46.100 align:start position:0%
clear that list and expect them to go
 

00:13:46.100 --> 00:13:48.130 align:start position:0%
clear that list and expect them to go
away<00:13:46.220><c> and</c><00:13:46.610><c> run</c><00:13:46.910><c> garbage</c><00:13:47.330><c> collection</c><00:13:47.840><c> I</c><00:13:47.990><c> would</c>

00:13:48.130 --> 00:13:48.140 align:start position:0%
away and run garbage collection I would
 

00:13:48.140 --> 00:13:50.440 align:start position:0%
away and run garbage collection I would
expect<00:13:48.770><c> that</c><00:13:48.830><c> in</c><00:13:49.040><c> this</c><00:13:49.190><c> case</c><00:13:49.430><c> my</c><00:13:50.030><c> sample</c>

00:13:50.440 --> 00:13:50.450 align:start position:0%
expect that in this case my sample
 

00:13:50.450 --> 00:13:53.320 align:start position:0%
expect that in this case my sample
disposables<00:13:51.170><c> are</c><00:13:51.350><c> cleaned</c><00:13:51.830><c> up</c><00:13:52.010><c> well</c><00:13:52.970><c> turns</c>

00:13:53.320 --> 00:13:53.330 align:start position:0%
disposables are cleaned up well turns
 

00:13:53.330 --> 00:13:55.540 align:start position:0%
disposables are cleaned up well turns
out<00:13:53.510><c> if</c><00:13:53.750><c> we</c><00:13:53.780><c> profile</c><00:13:54.410><c> this</c><00:13:54.590><c> application</c><00:13:55.250><c> we</c>

00:13:55.540 --> 00:13:55.550 align:start position:0%
out if we profile this application we
 

00:13:55.550 --> 00:13:58.840 align:start position:0%
out if we profile this application we
get<00:13:55.760><c> a</c><00:13:55.790><c> really</c><00:13:56.150><c> nice</c><00:13:56.360><c> snapshot</c><00:13:57.640><c> real</c><00:13:58.640><c> nice</c>

00:13:58.840 --> 00:13:58.850 align:start position:0%
get a really nice snapshot real nice
 

00:13:58.850 --> 00:14:02.320 align:start position:0%
get a really nice snapshot real nice
profile<00:13:59.300><c> there</c><00:14:00.220><c> where</c><00:14:01.220><c> we</c><00:14:01.370><c> can</c><00:14:01.580><c> look</c><00:14:01.730><c> at</c><00:14:01.970><c> the</c>

00:14:02.320 --> 00:14:02.330 align:start position:0%
profile there where we can look at the
 

00:14:02.330 --> 00:14:04.060 align:start position:0%
profile there where we can look at the
objects<00:14:02.720><c> that</c><00:14:02.750><c> are</c><00:14:02.870><c> in</c><00:14:03.110><c> memory</c><00:14:03.350><c> so</c><00:14:03.650><c> if</c><00:14:03.740><c> we</c><00:14:03.860><c> look</c>

00:14:04.060 --> 00:14:04.070 align:start position:0%
objects that are in memory so if we look
 

00:14:04.070 --> 00:14:05.800 align:start position:0%
objects that are in memory so if we look
at<00:14:04.250><c> the</c><00:14:04.370><c> first</c><00:14:04.550><c> snapshots</c><00:14:05.060><c> that</c><00:14:05.240><c> I</c><00:14:05.360><c> collected</c>

00:14:05.800 --> 00:14:05.810 align:start position:0%
at the first snapshots that I collected
 

00:14:05.810 --> 00:14:07.960 align:start position:0%
at the first snapshots that I collected
which<00:14:05.990><c> was</c><00:14:06.200><c> right</c><00:14:06.590><c> before</c><00:14:06.860><c> I</c><00:14:07.340><c> run</c><00:14:07.640><c> the</c><00:14:07.820><c> garbage</c>

00:14:07.960 --> 00:14:07.970 align:start position:0%
which was right before I run the garbage
 

00:14:07.970 --> 00:14:11.050 align:start position:0%
which was right before I run the garbage
collection<00:14:08.540><c> in</c><00:14:09.380><c> my</c><00:14:09.560><c> codes</c><00:14:09.860><c> you</c><00:14:10.550><c> will</c><00:14:10.700><c> see</c><00:14:10.880><c> that</c>

00:14:11.050 --> 00:14:11.060 align:start position:0%
collection in my codes you will see that
 

00:14:11.060 --> 00:14:14.650 align:start position:0%
collection in my codes you will see that
in<00:14:11.360><c> the</c><00:14:11.480><c> objects</c><00:14:11.930><c> I</c><00:14:12.200><c> actually</c><00:14:13.160><c> have</c><00:14:13.700><c> of</c><00:14:14.300><c> type</c>

00:14:14.650 --> 00:14:14.660 align:start position:0%
in the objects I actually have of type
 

00:14:14.660 --> 00:14:18.310 align:start position:0%
in the objects I actually have of type
sample<00:14:14.930><c> disposable</c><00:14:16.510><c> there's</c><00:14:17.510><c> 10,000</c><00:14:18.170><c> of</c>

00:14:18.310 --> 00:14:18.320 align:start position:0%
sample disposable there's 10,000 of
 

00:14:18.320 --> 00:14:20.230 align:start position:0%
sample disposable there's 10,000 of
those<00:14:18.470><c> so</c><00:14:18.710><c> my</c><00:14:18.920><c> code</c><00:14:19.160><c> works</c><00:14:19.430><c> as</c><00:14:19.670><c> expected</c>

00:14:20.230 --> 00:14:20.240 align:start position:0%
those so my code works as expected
 

00:14:20.240 --> 00:14:22.270 align:start position:0%
those so my code works as expected
I<00:14:20.360><c> actually</c><00:14:20.660><c> allocated</c><00:14:21.380><c> 10,000</c><00:14:22.040><c> of</c><00:14:22.160><c> those</c>

00:14:22.270 --> 00:14:22.280 align:start position:0%
I actually allocated 10,000 of those
 

00:14:22.280 --> 00:14:24.940 align:start position:0%
I actually allocated 10,000 of those
objects<00:14:22.760><c> and</c><00:14:22.970><c> I</c><00:14:23.000><c> expect</c><00:14:23.810><c> them</c><00:14:23.990><c> to</c><00:14:24.200><c> be</c><00:14:24.530><c> disposed</c>

00:14:24.940 --> 00:14:24.950 align:start position:0%
objects and I expect them to be disposed
 

00:14:24.950 --> 00:14:27.400 align:start position:0%
objects and I expect them to be disposed
at<00:14:25.190><c> a</c><00:14:25.220><c> later</c><00:14:25.460><c> point</c><00:14:25.700><c> in</c><00:14:25.880><c> time</c><00:14:26.140><c> then</c><00:14:27.140><c> in</c><00:14:27.260><c> my</c>

00:14:27.400 --> 00:14:27.410 align:start position:0%
at a later point in time then in my
 

00:14:27.410 --> 00:14:27.790 align:start position:0%
at a later point in time then in my
codes

00:14:27.790 --> 00:14:27.800 align:start position:0%
codes
 

00:14:27.800 --> 00:14:30.250 align:start position:0%
codes
I<00:14:27.830><c> ran</c><00:14:28.130><c> the</c><00:14:28.340><c> GC</c><00:14:28.790><c> collect</c><00:14:29.390><c> and</c><00:14:29.570><c> expected</c><00:14:30.080><c> those</c>

00:14:30.250 --> 00:14:30.260 align:start position:0%
I ran the GC collect and expected those
 

00:14:30.260 --> 00:14:32.350 align:start position:0%
I ran the GC collect and expected those
objects<00:14:30.740><c> to</c><00:14:30.860><c> be</c><00:14:30.980><c> gone</c><00:14:31.190><c> from</c><00:14:31.400><c> memory</c><00:14:31.790><c> and</c><00:14:31.970><c> in</c>

00:14:32.350 --> 00:14:32.360 align:start position:0%
objects to be gone from memory and in
 

00:14:32.360 --> 00:14:34.090 align:start position:0%
objects to be gone from memory and in
fact<00:14:32.570><c> if</c><00:14:32.750><c> we</c><00:14:32.780><c> look</c><00:14:32.900><c> at</c><00:14:33.200><c> the</c><00:14:33.320><c> objects</c><00:14:33.740><c> in</c><00:14:33.860><c> these</c>

00:14:34.090 --> 00:14:34.100 align:start position:0%
fact if we look at the objects in these
 

00:14:34.100 --> 00:14:36.160 align:start position:0%
fact if we look at the objects in these
snapshots<00:14:34.370><c> and</c><00:14:34.820><c> we</c><00:14:35.270><c> search</c><00:14:35.510><c> again</c><00:14:35.840><c> for</c><00:14:35.870><c> our</c>

00:14:36.160 --> 00:14:36.170 align:start position:0%
snapshots and we search again for our
 

00:14:36.170 --> 00:14:38.860 align:start position:0%
snapshots and we search again for our
sample<00:14:36.410><c> disposable</c><00:14:37.220><c> we</c><00:14:37.940><c> see</c><00:14:38.150><c> that</c><00:14:38.330><c> only</c><00:14:38.570><c> the</c>

00:14:38.860 --> 00:14:38.870 align:start position:0%
sample disposable we see that only the
 

00:14:38.870 --> 00:14:41.410 align:start position:0%
sample disposable we see that only the
list<00:14:39.050><c> is</c><00:14:39.260><c> there</c><00:14:39.470><c> and</c><00:14:39.710><c> the</c><00:14:40.280><c> internal</c><00:14:40.850><c> array</c><00:14:41.030><c> of</c>

00:14:41.410 --> 00:14:41.420 align:start position:0%
list is there and the internal array of
 

00:14:41.420 --> 00:14:43.240 align:start position:0%
list is there and the internal array of
that<00:14:41.570><c> list</c><00:14:41.780><c> and</c><00:14:42.080><c> our</c><00:14:42.170><c> sample</c><00:14:42.410><c> disposables</c>

00:14:43.240 --> 00:14:43.250 align:start position:0%
that list and our sample disposables
 

00:14:43.250 --> 00:14:46.750 align:start position:0%
that list and our sample disposables
seem<00:14:43.610><c> gone</c><00:14:44.680><c> well</c><00:14:45.680><c> actually</c><00:14:45.980><c> they</c><00:14:46.580><c> are</c><00:14:46.730><c> not</c>

00:14:46.750 --> 00:14:46.760 align:start position:0%
seem gone well actually they are not
 

00:14:46.760 --> 00:14:49.420 align:start position:0%
seem gone well actually they are not
gone<00:14:47.330><c> if</c><00:14:48.110><c> we</c><00:14:48.200><c> look</c><00:14:48.530><c> at</c><00:14:48.680><c> the</c><00:14:48.830><c> automatic</c>

00:14:49.420 --> 00:14:49.430 align:start position:0%
gone if we look at the automatic
 

00:14:49.430 --> 00:14:52.000 align:start position:0%
gone if we look at the automatic
inspections<00:14:50.000><c> in</c><00:14:50.300><c> that</c><00:14:50.600><c> memory</c><00:14:50.930><c> here</c><00:14:51.200><c> we</c><00:14:51.800><c> will</c>

00:14:52.000 --> 00:14:52.010 align:start position:0%
inspections in that memory here we will
 

00:14:52.010 --> 00:14:54.400 align:start position:0%
inspections in that memory here we will
see<00:14:52.220><c> that</c><00:14:52.490><c> instead</c><00:14:53.180><c> of</c><00:14:53.330><c> having</c><00:14:53.480><c> them</c><00:14:53.960><c> in</c><00:14:54.170><c> the</c>

00:14:54.400 --> 00:14:54.410 align:start position:0%
see that instead of having them in the
 

00:14:54.410 --> 00:14:57.580 align:start position:0%
see that instead of having them in the
garbage<00:14:54.680><c> or</c><00:14:55.070><c> in</c><00:14:55.460><c> having</c><00:14:56.390><c> them</c><00:14:56.540><c> collected</c><00:14:57.020><c> my</c>

00:14:57.580 --> 00:14:57.590 align:start position:0%
garbage or in having them collected my
 

00:14:57.590 --> 00:14:59.680 align:start position:0%
garbage or in having them collected my
sample<00:14:58.010><c> disposables</c><00:14:58.700><c> have</c><00:14:58.910><c> moved</c><00:14:59.210><c> to</c><00:14:59.540><c> the</c>

00:14:59.680 --> 00:14:59.690 align:start position:0%
sample disposables have moved to the
 

00:14:59.690 --> 00:15:02.440 align:start position:0%
sample disposables have moved to the
finalizer<00:15:00.200><c> Q</c><00:15:00.620><c> so</c><00:15:01.280><c> the</c><00:15:01.430><c> garbage</c><00:15:01.790><c> collector</c><00:15:02.210><c> ran</c>

00:15:02.440 --> 00:15:02.450 align:start position:0%
finalizer Q so the garbage collector ran
 

00:15:02.450 --> 00:15:05.050 align:start position:0%
finalizer Q so the garbage collector ran
moved<00:15:03.380><c> all</c><00:15:03.620><c> these</c><00:15:03.800><c> objects</c><00:15:04.280><c> into</c><00:15:04.640><c> a</c><00:15:04.670><c> different</c>

00:15:05.050 --> 00:15:05.060 align:start position:0%
moved all these objects into a different
 

00:15:05.060 --> 00:15:07.900 align:start position:0%
moved all these objects into a different
sets<00:15:05.440><c> into</c><00:15:06.440><c> a</c><00:15:06.530><c> different</c><00:15:06.860><c> Q</c><00:15:07.190><c> basically</c><00:15:07.670><c> saying</c>

00:15:07.900 --> 00:15:07.910 align:start position:0%
sets into a different Q basically saying
 

00:15:07.910 --> 00:15:10.240 align:start position:0%
sets into a different Q basically saying
okay<00:15:08.270><c> look</c><00:15:08.570><c> I</c><00:15:08.750><c> cannot</c><00:15:09.170><c> yet</c><00:15:09.440><c> clean</c><00:15:09.740><c> them</c><00:15:09.950><c> up</c><00:15:10.040><c> but</c>

00:15:10.240 --> 00:15:10.250 align:start position:0%
okay look I cannot yet clean them up but
 

00:15:10.250 --> 00:15:12.760 align:start position:0%
okay look I cannot yet clean them up but
I'll<00:15:10.400><c> cue</c><00:15:10.670><c> them</c><00:15:10.850><c> when</c><00:15:11.600><c> I</c><00:15:11.630><c> run</c><00:15:12.080><c> next</c><00:15:12.410><c> and</c><00:15:12.560><c> I</c><00:15:12.620><c> will</c>

00:15:12.760 --> 00:15:12.770 align:start position:0%
I'll cue them when I run next and I will
 

00:15:12.770 --> 00:15:14.590 align:start position:0%
I'll cue them when I run next and I will
clean<00:15:12.980><c> them</c><00:15:13.100><c> up</c><00:15:13.220><c> then</c><00:15:13.430><c> so</c><00:15:13.970><c> the</c><00:15:14.090><c> objects</c><00:15:14.450><c> are</c>

00:15:14.590 --> 00:15:14.600 align:start position:0%
clean them up then so the objects are
 

00:15:14.600 --> 00:15:16.780 align:start position:0%
clean them up then so the objects are
actually<00:15:15.140><c> still</c><00:15:15.350><c> in</c><00:15:15.530><c> memory</c><00:15:15.710><c> the</c><00:15:16.430><c> garbage</c>

00:15:16.780 --> 00:15:16.790 align:start position:0%
actually still in memory the garbage
 

00:15:16.790 --> 00:15:18.580 align:start position:0%
actually still in memory the garbage
collector<00:15:17.210><c> has</c><00:15:17.420><c> to</c><00:15:17.570><c> run</c><00:15:17.750><c> clean</c><00:15:18.080><c> up</c><00:15:18.260><c> twice</c><00:15:18.560><c> in</c>

00:15:18.580 --> 00:15:18.590 align:start position:0%
collector has to run clean up twice in
 

00:15:18.590 --> 00:15:21.100 align:start position:0%
collector has to run clean up twice in
this<00:15:19.040><c> case</c><00:15:19.280><c> it</c><00:15:19.460><c> has</c><00:15:19.610><c> to</c><00:15:19.640><c> run</c><00:15:19.880><c> them</c><00:15:20.090><c> first</c><00:15:20.480><c> to</c>

00:15:21.100 --> 00:15:21.110 align:start position:0%
this case it has to run them first to
 

00:15:21.110 --> 00:15:22.720 align:start position:0%
this case it has to run them first to
collect<00:15:21.680><c> everything</c><00:15:21.950><c> and</c><00:15:22.250><c> move</c><00:15:22.370><c> into</c><00:15:22.520><c> the</c>

00:15:22.720 --> 00:15:22.730 align:start position:0%
collect everything and move into the
 

00:15:22.730 --> 00:15:24.640 align:start position:0%
collect everything and move into the
finalizer<00:15:23.180><c> queue</c><00:15:23.510><c> but</c><00:15:24.020><c> only</c><00:15:24.200><c> on</c><00:15:24.380><c> the</c><00:15:24.470><c> next</c>

00:15:24.640 --> 00:15:24.650 align:start position:0%
finalizer queue but only on the next
 

00:15:24.650 --> 00:15:26.350 align:start position:0%
finalizer queue but only on the next
step<00:15:24.800><c> the</c><00:15:25.280><c> finalize</c><00:15:25.700><c> a</c><00:15:25.730><c> queue</c><00:15:26.030><c> will</c><00:15:26.240><c> be</c>

00:15:26.350 --> 00:15:26.360 align:start position:0%
step the finalize a queue will be
 

00:15:26.360 --> 00:15:29.620 align:start position:0%
step the finalize a queue will be
emptied<00:15:26.810><c> and</c><00:15:27.080><c> and</c><00:15:27.950><c> basically</c><00:15:28.880><c> the</c><00:15:29.090><c> objects</c>

00:15:29.620 --> 00:15:29.630 align:start position:0%
emptied and and basically the objects
 

00:15:29.630 --> 00:15:31.570 align:start position:0%
emptied and and basically the objects
will<00:15:29.750><c> be</c><00:15:29.930><c> removed</c><00:15:30.650><c> from</c><00:15:30.740><c> memory</c><00:15:31.190><c> so</c><00:15:31.340><c> that's</c>

00:15:31.570 --> 00:15:31.580 align:start position:0%
will be removed from memory so that's
 

00:15:31.580 --> 00:15:34.690 align:start position:0%
will be removed from memory so that's
not<00:15:31.820><c> ideal</c><00:15:32.560><c> so</c><00:15:33.560><c> let's</c><00:15:34.100><c> look</c><00:15:34.250><c> at</c><00:15:34.400><c> our</c><00:15:34.520><c> source</c>

00:15:34.690 --> 00:15:34.700 align:start position:0%
not ideal so let's look at our source
 

00:15:34.700 --> 00:15:36.970 align:start position:0%
not ideal so let's look at our source
code<00:15:34.880><c> again</c><00:15:35.240><c> and</c><00:15:35.480><c> see</c><00:15:36.320><c> if</c><00:15:36.410><c> we</c><00:15:36.560><c> can</c><00:15:36.740><c> write</c><00:15:36.920><c> a</c>

00:15:36.970 --> 00:15:36.980 align:start position:0%
code again and see if we can write a
 

00:15:36.980 --> 00:15:41.650 align:start position:0%
code again and see if we can write a
better<00:15:37.250><c> way</c><00:15:37.990><c> so</c><00:15:39.160><c> right</c><00:15:40.160><c> now</c><00:15:40.400><c> we</c><00:15:41.090><c> implement</c><00:15:41.510><c> I</c>

00:15:41.650 --> 00:15:41.660 align:start position:0%
better way so right now we implement I
 

00:15:41.660 --> 00:15:44.200 align:start position:0%
better way so right now we implement I
disposable<00:15:42.320><c> and</c><00:15:42.470><c> what</c><00:15:43.190><c> our</c><00:15:43.340><c> dispose</c><00:15:43.760><c> will</c><00:15:44.030><c> do</c>

00:15:44.200 --> 00:15:44.210 align:start position:0%
disposable and what our dispose will do
 

00:15:44.210 --> 00:15:48.640 align:start position:0%
disposable and what our dispose will do
is<00:15:45.020><c> it</c><00:15:45.590><c> will</c><00:15:46.870><c> dispose</c><00:15:47.870><c> of</c><00:15:47.900><c> the</c><00:15:48.140><c> file</c><00:15:48.320><c> stream</c>

00:15:48.640 --> 00:15:48.650 align:start position:0%
is it will dispose of the file stream
 

00:15:48.650 --> 00:15:49.930 align:start position:0%
is it will dispose of the file stream
that<00:15:48.890><c> I'm</c><00:15:49.010><c> referencing</c>

00:15:49.930 --> 00:15:49.940 align:start position:0%
that I'm referencing
 

00:15:49.940 --> 00:15:52.390 align:start position:0%
that I'm referencing
and<00:15:50.150><c> it</c><00:15:50.300><c> will</c><00:15:50.450><c> also</c><00:15:50.570><c> dis</c><00:15:50.990><c> or</c><00:15:51.230><c> free</c><00:15:51.650><c> the</c><00:15:51.920><c> integer</c>

00:15:52.390 --> 00:15:52.400 align:start position:0%
and it will also dis or free the integer
 

00:15:52.400 --> 00:15:54.430 align:start position:0%
and it will also dis or free the integer
pointer<00:15:52.820><c> that</c><00:15:53.000><c> I</c><00:15:53.090><c> had</c><00:15:53.270><c> allocated</c><00:15:53.810><c> earlier</c>

00:15:54.430 --> 00:15:54.440 align:start position:0%
pointer that I had allocated earlier
 

00:15:54.440 --> 00:15:56.710 align:start position:0%
pointer that I had allocated earlier
basically<00:15:55.100><c> helping</c><00:15:55.820><c> the</c><00:15:55.940><c> garbage</c><00:15:56.270><c> collector</c>

00:15:56.710 --> 00:15:56.720 align:start position:0%
basically helping the garbage collector
 

00:15:56.720 --> 00:15:58.660 align:start position:0%
basically helping the garbage collector
to<00:15:56.930><c> see</c><00:15:57.170><c> that</c><00:15:57.680><c> I</c><00:15:57.710><c> no</c><00:15:57.860><c> longer</c><00:15:58.070><c> have</c><00:15:58.490><c> any</c>

00:15:58.660 --> 00:15:58.670 align:start position:0%
to see that I no longer have any
 

00:15:58.670 --> 00:16:00.670 align:start position:0%
to see that I no longer have any
outgoing<00:15:58.880><c> references</c><00:15:59.720><c> to</c><00:15:59.900><c> other</c><00:16:00.050><c> objects</c><00:16:00.470><c> in</c>

00:16:00.670 --> 00:16:00.680 align:start position:0%
outgoing references to other objects in
 

00:16:00.680 --> 00:16:04.150 align:start position:0%
outgoing references to other objects in
my<00:16:01.280><c> own</c><00:16:01.400><c> objects</c><00:16:01.910><c> well</c><00:16:02.660><c> if</c><00:16:02.960><c> I</c><00:16:03.530><c> use</c><00:16:03.560><c> this</c><00:16:03.920><c> one</c>

00:16:04.150 --> 00:16:04.160 align:start position:0%
my own objects well if I use this one
 

00:16:04.160 --> 00:16:06.580 align:start position:0%
my own objects well if I use this one
and<00:16:04.340><c> I</c><00:16:04.670><c> run</c><00:16:04.880><c> my</c><00:16:05.030><c> code</c><00:16:05.270><c> again</c><00:16:05.570><c> where</c><00:16:06.080><c> I</c><00:16:06.110><c> again</c>

00:16:06.580 --> 00:16:06.590 align:start position:0%
and I run my code again where I again
 

00:16:06.590 --> 00:16:09.250 align:start position:0%
and I run my code again where I again
allocates<00:16:07.190><c> ten</c><00:16:07.460><c> thousands</c><00:16:07.940><c> of</c><00:16:08.540><c> those</c><00:16:08.870><c> sample</c>

00:16:09.250 --> 00:16:09.260 align:start position:0%
allocates ten thousands of those sample
 

00:16:09.260 --> 00:16:12.580 align:start position:0%
allocates ten thousands of those sample
disposables<00:16:10.300><c> then</c><00:16:11.300><c> I</c><00:16:11.540><c> actually</c><00:16:12.140><c> call</c><00:16:12.440><c> the</c>

00:16:12.580 --> 00:16:12.590 align:start position:0%
disposables then I actually call the
 

00:16:12.590 --> 00:16:14.500 align:start position:0%
disposables then I actually call the
dots<00:16:12.830><c> dispose</c><00:16:13.310><c> methods</c><00:16:13.730><c> to</c><00:16:13.910><c> clean</c><00:16:14.180><c> up</c><00:16:14.360><c> the</c>

00:16:14.500 --> 00:16:14.510 align:start position:0%
dots dispose methods to clean up the
 

00:16:14.510 --> 00:16:16.630 align:start position:0%
dots dispose methods to clean up the
references<00:16:14.990><c> that</c><00:16:15.020><c> I</c><00:16:15.230><c> have</c><00:16:15.440><c> in</c><00:16:15.590><c> there</c><00:16:15.770><c> and</c><00:16:16.070><c> only</c>

00:16:16.630 --> 00:16:16.640 align:start position:0%
references that I have in there and only
 

00:16:16.640 --> 00:16:19.420 align:start position:0%
references that I have in there and only
then<00:16:16.880><c> run</c><00:16:17.870><c> the</c><00:16:17.990><c> garbage</c><00:16:18.320><c> collection</c><00:16:18.800><c> we</c><00:16:19.220><c> will</c>

00:16:19.420 --> 00:16:19.430 align:start position:0%
then run the garbage collection we will
 

00:16:19.430 --> 00:16:21.010 align:start position:0%
then run the garbage collection we will
see<00:16:19.670><c> in</c><00:16:19.730><c> the</c><00:16:19.850><c> profiler</c><00:16:20.300><c> that</c><00:16:20.420><c> the</c><00:16:20.660><c> objects</c>

00:16:21.010 --> 00:16:21.020 align:start position:0%
see in the profiler that the objects
 

00:16:21.020 --> 00:16:22.690 align:start position:0%
see in the profiler that the objects
will<00:16:21.260><c> be</c><00:16:21.440><c> removed</c><00:16:21.770><c> from</c><00:16:22.010><c> memory</c><00:16:22.310><c> so</c><00:16:22.340><c> let's</c>

00:16:22.690 --> 00:16:22.700 align:start position:0%
will be removed from memory so let's
 

00:16:22.700 --> 00:16:25.690 align:start position:0%
will be removed from memory so let's
look<00:16:23.300><c> at</c><00:16:23.480><c> that</c><00:16:23.600><c> as</c><00:16:23.750><c> well</c><00:16:23.980><c> so</c><00:16:24.980><c> in</c><00:16:25.100><c> my</c><00:16:25.220><c> snapshots</c>

00:16:25.690 --> 00:16:25.700 align:start position:0%
look at that as well so in my snapshots
 

00:16:25.700 --> 00:16:27.700 align:start position:0%
look at that as well so in my snapshots
that<00:16:25.850><c> I</c><00:16:25.910><c> have</c><00:16:26.180><c> here</c><00:16:26.480><c> I</c><00:16:26.630><c> have</c><00:16:26.870><c> a</c><00:16:26.900><c> snapshots</c><00:16:27.530><c> that</c>

00:16:27.700 --> 00:16:27.710 align:start position:0%
that I have here I have a snapshots that
 

00:16:27.710 --> 00:16:29.590 align:start position:0%
that I have here I have a snapshots that
I<00:16:27.770><c> took</c><00:16:28.040><c> right</c><00:16:28.370><c> after</c><00:16:28.760><c> allocating</c><00:16:29.450><c> those</c>

00:16:29.590 --> 00:16:29.600 align:start position:0%
I took right after allocating those
 

00:16:29.600 --> 00:16:32.230 align:start position:0%
I took right after allocating those
10,000<00:16:30.260><c> objects</c><00:16:30.680><c> and</c><00:16:30.920><c> you</c><00:16:31.700><c> will</c><00:16:31.850><c> see</c><00:16:32.060><c> that</c>

00:16:32.230 --> 00:16:32.240 align:start position:0%
10,000 objects and you will see that
 

00:16:32.240 --> 00:16:34.840 align:start position:0%
10,000 objects and you will see that
again<00:16:32.480><c> I</c><00:16:32.750><c> have</c><00:16:33.290><c> 10,000</c><00:16:33.980><c> of</c><00:16:34.100><c> those</c><00:16:34.220><c> objects</c><00:16:34.670><c> in</c>

00:16:34.840 --> 00:16:34.850 align:start position:0%
again I have 10,000 of those objects in
 

00:16:34.850 --> 00:16:36.460 align:start position:0%
again I have 10,000 of those objects in
memory<00:16:35.240><c> so</c><00:16:35.480><c> my</c><00:16:35.630><c> code</c><00:16:35.870><c> works</c><00:16:36.140><c> I</c><00:16:36.350><c> actually</c>

00:16:36.460 --> 00:16:36.470 align:start position:0%
memory so my code works I actually
 

00:16:36.470 --> 00:16:40.480 align:start position:0%
memory so my code works I actually
allocated<00:16:37.160><c> 10,000</c><00:16:37.700><c> objects</c><00:16:39.070><c> then</c><00:16:40.070><c> I</c><00:16:40.190><c> called</c>

00:16:40.480 --> 00:16:40.490 align:start position:0%
allocated 10,000 objects then I called
 

00:16:40.490 --> 00:16:43.030 align:start position:0%
allocated 10,000 objects then I called
dot<00:16:40.790><c> dispose</c><00:16:41.270><c> on</c><00:16:41.570><c> all</c><00:16:41.720><c> of</c><00:16:41.870><c> them</c><00:16:42.020><c> and</c><00:16:42.230><c> if</c><00:16:42.890><c> we</c>

00:16:43.030 --> 00:16:43.040 align:start position:0%
dot dispose on all of them and if we
 

00:16:43.040 --> 00:16:45.040 align:start position:0%
dot dispose on all of them and if we
then<00:16:43.190><c> look</c><00:16:43.250><c> at</c><00:16:43.670><c> our</c><00:16:43.940><c> final</c><00:16:44.360><c> snapshot</c><00:16:44.810><c> right</c>

00:16:45.040 --> 00:16:45.050 align:start position:0%
then look at our final snapshot right
 

00:16:45.050 --> 00:16:47.140 align:start position:0%
then look at our final snapshot right
after<00:16:45.470><c> running</c><00:16:45.830><c> one</c><00:16:46.250><c> garbage</c><00:16:46.670><c> collection</c>

00:16:47.140 --> 00:16:47.150 align:start position:0%
after running one garbage collection
 

00:16:47.150 --> 00:16:48.850 align:start position:0%
after running one garbage collection
cycle<00:16:47.570><c> we</c><00:16:47.690><c> will</c><00:16:47.720><c> see</c><00:16:48.050><c> that</c><00:16:48.200><c> there's</c><00:16:48.410><c> no</c><00:16:48.650><c> more</c>

00:16:48.850 --> 00:16:48.860 align:start position:0%
cycle we will see that there's no more
 

00:16:48.860 --> 00:16:51.910 align:start position:0%
cycle we will see that there's no more
sample<00:16:49.700><c> disposables</c><00:16:50.330><c> in</c><00:16:50.450><c> memory</c><00:16:50.720><c> and</c><00:16:50.930><c> also</c><00:16:51.830><c> if</c>

00:16:51.910 --> 00:16:51.920 align:start position:0%
sample disposables in memory and also if
 

00:16:51.920 --> 00:16:53.560 align:start position:0%
sample disposables in memory and also if
we<00:16:52.040><c> look</c><00:16:52.070><c> at</c><00:16:52.340><c> the</c><00:16:52.430><c> automatic</c><00:16:52.880><c> inspections</c><00:16:53.420><c> in</c>

00:16:53.560 --> 00:16:53.570 align:start position:0%
we look at the automatic inspections in
 

00:16:53.570 --> 00:16:55.450 align:start position:0%
we look at the automatic inspections in
the<00:16:53.630><c> profiler</c><00:16:54.080><c> here</c><00:16:54.440><c> we</c><00:16:54.800><c> will</c><00:16:55.010><c> see</c><00:16:55.160><c> that</c><00:16:55.190><c> the</c>

00:16:55.450 --> 00:16:55.460 align:start position:0%
the profiler here we will see that the
 

00:16:55.460 --> 00:16:58.150 align:start position:0%
the profiler here we will see that the
finalizar<00:16:55.970><c> queue</c><00:16:56.360><c> is</c><00:16:56.570><c> actually</c><00:16:57.410><c> empty</c><00:16:57.530><c> so</c>

00:16:58.150 --> 00:16:58.160 align:start position:0%
finalizar queue is actually empty so
 

00:16:58.160 --> 00:17:00.070 align:start position:0%
finalizar queue is actually empty so
instead<00:16:58.490><c> of</c><00:16:58.550><c> having</c><00:16:58.790><c> to</c><00:16:58.940><c> endure</c><00:16:59.210><c> two</c><00:16:59.660><c> garbage</c>

00:17:00.070 --> 00:17:00.080 align:start position:0%
instead of having to endure two garbage
 

00:17:00.080 --> 00:17:02.470 align:start position:0%
instead of having to endure two garbage
collection<00:17:00.530><c> cycles</c><00:17:00.980><c> by</c><00:17:01.550><c> just</c><00:17:01.850><c> implementing</c>

00:17:02.470 --> 00:17:02.480 align:start position:0%
collection cycles by just implementing
 

00:17:02.480 --> 00:17:05.140 align:start position:0%
collection cycles by just implementing
disposable<00:17:03.260><c> correctly</c><00:17:03.800><c> I</c><00:17:04.040><c> made</c><00:17:04.670><c> it</c><00:17:04.790><c> easier</c><00:17:05.090><c> on</c>

00:17:05.140 --> 00:17:05.150 align:start position:0%
disposable correctly I made it easier on
 

00:17:05.150 --> 00:17:07.000 align:start position:0%
disposable correctly I made it easier on
the<00:17:05.300><c> garbage</c><00:17:05.630><c> collector</c><00:17:06.050><c> to</c><00:17:06.200><c> only</c><00:17:06.350><c> run</c><00:17:06.680><c> once</c>

00:17:07.000 --> 00:17:07.010 align:start position:0%
the garbage collector to only run once
 

00:17:07.010 --> 00:17:09.070 align:start position:0%
the garbage collector to only run once
or<00:17:07.310><c> have</c><00:17:07.580><c> to</c><00:17:07.790><c> run</c><00:17:07.970><c> once</c><00:17:08.180><c> instead</c><00:17:08.600><c> of</c><00:17:08.690><c> having</c><00:17:08.900><c> to</c>

00:17:09.070 --> 00:17:09.080 align:start position:0%
or have to run once instead of having to
 

00:17:09.080 --> 00:17:14.380 align:start position:0%
or have to run once instead of having to
run<00:17:09.260><c> twice</c><00:17:09.470><c> on</c><00:17:10.340><c> this</c><00:17:10.550><c> collection</c><00:17:12.850><c> rights</c><00:17:13.850><c> so</c>

00:17:14.380 --> 00:17:14.390 align:start position:0%
run twice on this collection rights so
 

00:17:14.390 --> 00:17:15.910 align:start position:0%
run twice on this collection rights so
helping<00:17:14.930><c> the</c><00:17:15.050><c> garbage</c><00:17:15.350><c> collector</c><00:17:15.740><c> will</c>

00:17:15.910 --> 00:17:15.920 align:start position:0%
helping the garbage collector will
 

00:17:15.920 --> 00:17:18.940 align:start position:0%
helping the garbage collector will
really<00:17:16.250><c> help</c><00:17:16.460><c> in</c><00:17:17.050><c> having</c><00:17:18.050><c> less</c><00:17:18.260><c> pauses</c><00:17:18.740><c> or</c>

00:17:18.940 --> 00:17:18.950 align:start position:0%
really help in having less pauses or
 

00:17:18.950 --> 00:17:20.860 align:start position:0%
really help in having less pauses or
less<00:17:19.160><c> work</c><00:17:19.640><c> for</c><00:17:19.880><c> the</c><00:17:19.970><c> garbage</c><00:17:20.270><c> collector</c><00:17:20.720><c> in</c>

00:17:20.860 --> 00:17:20.870 align:start position:0%
less work for the garbage collector in
 

00:17:20.870 --> 00:17:23.920 align:start position:0%
less work for the garbage collector in
your<00:17:21.110><c> application</c><00:17:22.120><c> now</c><00:17:23.120><c> let's</c><00:17:23.330><c> look</c><00:17:23.480><c> at</c><00:17:23.660><c> when</c>

00:17:23.920 --> 00:17:23.930 align:start position:0%
your application now let's look at when
 

00:17:23.930 --> 00:17:26.050 align:start position:0%
your application now let's look at when
we<00:17:24.110><c> are</c><00:17:24.140><c> actually</c><00:17:24.680><c> allocating</c><00:17:25.370><c> coats</c><00:17:25.670><c> in</c><00:17:25.880><c> our</c>

00:17:26.050 --> 00:17:26.060 align:start position:0%
we are actually allocating coats in our
 

00:17:26.060 --> 00:17:28.330 align:start position:0%
we are actually allocating coats in our
application<00:17:26.690><c> typically</c><00:17:27.260><c> when</c><00:17:28.010><c> we're</c><00:17:28.190><c> using</c>

00:17:28.330 --> 00:17:28.340 align:start position:0%
application typically when we're using
 

00:17:28.340 --> 00:17:30.580 align:start position:0%
application typically when we're using
value<00:17:28.910><c> types</c><00:17:29.180><c> like</c><00:17:29.450><c> integers</c><00:17:29.870><c> boolean</c>

00:17:30.580 --> 00:17:30.590 align:start position:0%
value types like integers boolean
 

00:17:30.590 --> 00:17:33.370 align:start position:0%
value types like integers boolean
structs<00:17:31.250><c> spans</c><00:17:32.060><c> of</c><00:17:32.270><c> T</c><00:17:32.480><c> and</c><00:17:32.750><c> things</c><00:17:32.960><c> like</c><00:17:33.110><c> that</c>

00:17:33.370 --> 00:17:33.380 align:start position:0%
structs spans of T and things like that
 

00:17:33.380 --> 00:17:35.530 align:start position:0%
structs spans of T and things like that
we're<00:17:33.920><c> not</c><00:17:34.160><c> allocating</c><00:17:34.790><c> those</c><00:17:34.940><c> on</c><00:17:35.210><c> the</c><00:17:35.330><c> heap</c>

00:17:35.530 --> 00:17:35.540 align:start position:0%
we're not allocating those on the heap
 

00:17:35.540 --> 00:17:37.210 align:start position:0%
we're not allocating those on the heap
so<00:17:35.810><c> the</c><00:17:35.930><c> garbage</c><00:17:36.260><c> collector</c><00:17:36.680><c> will</c><00:17:36.800><c> not</c><00:17:36.980><c> run</c>

00:17:37.210 --> 00:17:37.220 align:start position:0%
so the garbage collector will not run
 

00:17:37.220 --> 00:17:38.530 align:start position:0%
so the garbage collector will not run
for<00:17:37.250><c> those</c><00:17:37.640><c> they</c><00:17:37.850><c> are</c><00:17:37.910><c> allocated</c><00:17:38.060><c> on</c><00:17:38.510><c> the</c>

00:17:38.530 --> 00:17:38.540 align:start position:0%
for those they are allocated on the
 

00:17:38.540 --> 00:17:40.330 align:start position:0%
for those they are allocated on the
stack<00:17:38.660><c> and</c><00:17:39.170><c> there's</c><00:17:39.500><c> a</c><00:17:39.590><c> session</c><00:17:39.770><c> later</c><00:17:40.100><c> today</c>

00:17:40.330 --> 00:17:40.340 align:start position:0%
stack and there's a session later today
 

00:17:40.340 --> 00:17:42.550 align:start position:0%
stack and there's a session later today
that<00:17:40.490><c> will</c><00:17:40.820><c> cover</c><00:17:41.030><c> probably</c><00:17:41.990><c> a</c><00:17:42.020><c> lot</c><00:17:42.290><c> of</c><00:17:42.410><c> those</c>

00:17:42.550 --> 00:17:42.560 align:start position:0%
that will cover probably a lot of those
 

00:17:42.560 --> 00:17:44.140 align:start position:0%
that will cover probably a lot of those
things<00:17:42.860><c> there</c><00:17:43.070><c> so</c><00:17:43.280><c> that's</c><00:17:43.490><c> that's</c><00:17:43.700><c> perfectly</c>

00:17:44.140 --> 00:17:44.150 align:start position:0%
things there so that's that's perfectly
 

00:17:44.150 --> 00:17:46.600 align:start position:0%
things there so that's that's perfectly
fine<00:17:44.420><c> but</c><00:17:44.690><c> whenever</c><00:17:45.320><c> we</c><00:17:45.620><c> are</c><00:17:45.650><c> using</c><00:17:45.860><c> reference</c>

00:17:46.600 --> 00:17:46.610 align:start position:0%
fine but whenever we are using reference
 

00:17:46.610 --> 00:17:48.310 align:start position:0%
fine but whenever we are using reference
types<00:17:46.880><c> whenever</c><00:17:47.570><c> we</c><00:17:47.720><c> knew</c><00:17:48.020><c> something</c>

00:17:48.310 --> 00:17:48.320 align:start position:0%
types whenever we knew something
 

00:17:48.320 --> 00:17:51.520 align:start position:0%
types whenever we knew something
whenever<00:17:48.740><c> you</c><00:17:49.010><c> use</c><00:17:49.900><c> say</c><00:17:50.900><c> an</c><00:17:51.110><c> ioc</c><00:17:51.500><c> container</c>

00:17:51.520 --> 00:17:51.530 align:start position:0%
whenever you use say an ioc container
 

00:17:51.530 --> 00:17:53.440 align:start position:0%
whenever you use say an ioc container
that<00:17:52.130><c> creates</c><00:17:52.460><c> an</c><00:17:52.610><c> object</c><00:17:52.760><c> for</c><00:17:53.120><c> us</c><00:17:53.240><c> or</c>

00:17:53.440 --> 00:17:53.450 align:start position:0%
that creates an object for us or
 

00:17:53.450 --> 00:17:55.600 align:start position:0%
that creates an object for us or
activator<00:17:54.440><c> that</c><00:17:54.740><c> create</c><00:17:55.040><c> instance</c><00:17:55.460><c> or</c>

00:17:55.600 --> 00:17:55.610 align:start position:0%
activator that create instance or
 

00:17:55.610 --> 00:17:57.190 align:start position:0%
activator that create instance or
something<00:17:55.970><c> like</c><00:17:56.090><c> that</c><00:17:56.270><c> whenever</c><00:17:56.810><c> we're</c>

00:17:57.190 --> 00:17:57.200 align:start position:0%
something like that whenever we're
 

00:17:57.200 --> 00:17:59.260 align:start position:0%
something like that whenever we're
creating<00:17:57.620><c> a</c><00:17:57.710><c> reference</c><00:17:57.920><c> type</c><00:17:58.400><c> we</c><00:17:59.060><c> are</c>

00:17:59.260 --> 00:17:59.270 align:start position:0%
creating a reference type we are
 

00:17:59.270 --> 00:18:01.600 align:start position:0%
creating a reference type we are
allocating<00:17:59.960><c> something</c><00:18:00.710><c> in</c><00:18:00.890><c> the</c><00:18:01.130><c> managed</c><00:18:01.370><c> heap</c>

00:18:01.600 --> 00:18:01.610 align:start position:0%
allocating something in the managed heap
 

00:18:01.610 --> 00:18:02.860 align:start position:0%
allocating something in the managed heap
and<00:18:01.850><c> the</c><00:18:01.970><c> garbage</c><00:18:02.270><c> collector</c><00:18:02.660><c> will</c>

00:18:02.860 --> 00:18:02.870 align:start position:0%
and the garbage collector will
 

00:18:02.870 --> 00:18:03.800 align:start position:0%
and the garbage collector will
eventually<00:18:03.410><c> have</c><00:18:03.560><c> to</c>

00:18:03.800 --> 00:18:03.810 align:start position:0%
eventually have to
 

00:18:03.810 --> 00:18:05.300 align:start position:0%
eventually have to
check<00:18:03.990><c> that</c><00:18:04.140><c> object</c><00:18:04.530><c> and</c><00:18:04.680><c> see</c><00:18:04.830><c> if</c><00:18:04.950><c> it</c><00:18:05.010><c> can</c><00:18:05.160><c> be</c>

00:18:05.300 --> 00:18:05.310 align:start position:0%
check that object and see if it can be
 

00:18:05.310 --> 00:18:08.780 align:start position:0%
check that object and see if it can be
removed<00:18:05.610><c> from</c><00:18:05.760><c> memory</c><00:18:07.340><c> the</c><00:18:08.340><c> good</c><00:18:08.520><c> thing</c><00:18:08.670><c> is</c>

00:18:08.780 --> 00:18:08.790 align:start position:0%
removed from memory the good thing is
 

00:18:08.790 --> 00:18:10.610 align:start position:0%
removed from memory the good thing is
when<00:18:09.390><c> we</c><00:18:09.420><c> look</c><00:18:09.540><c> through</c><00:18:09.720><c> our</c><00:18:09.930><c> code</c><00:18:10.200><c> whenever</c>

00:18:10.610 --> 00:18:10.620 align:start position:0%
when we look through our code whenever
 

00:18:10.620 --> 00:18:12.500 align:start position:0%
when we look through our code whenever
we<00:18:10.800><c> see</c><00:18:10.980><c> a</c><00:18:11.010><c> new</c><00:18:11.340><c> we</c><00:18:11.700><c> know</c><00:18:11.970><c> we</c><00:18:12.180><c> are</c><00:18:12.300><c> allocating</c>

00:18:12.500 --> 00:18:12.510 align:start position:0%
we see a new we know we are allocating
 

00:18:12.510 --> 00:18:15.410 align:start position:0%
we see a new we know we are allocating
something<00:18:13.200><c> probably</c><00:18:13.530><c> on</c><00:18:13.770><c> the</c><00:18:13.890><c> heap</c><00:18:14.420><c> the</c>

00:18:15.410 --> 00:18:15.420 align:start position:0%
something probably on the heap the
 

00:18:15.420 --> 00:18:17.990 align:start position:0%
something probably on the heap the
problem<00:18:15.810><c> is</c><00:18:16.490><c> there's</c><00:18:17.490><c> also</c><00:18:17.790><c> hidden</c>

00:18:17.990 --> 00:18:18.000 align:start position:0%
problem is there's also hidden
 

00:18:18.000 --> 00:18:20.150 align:start position:0%
problem is there's also hidden
allocations<00:18:18.600><c> in</c><00:18:18.780><c> that</c><00:18:18.930><c> nets</c><00:18:19.170><c> I</c><00:18:19.410><c> don't</c><00:18:20.040><c> know</c>

00:18:20.150 --> 00:18:20.160 align:start position:0%
allocations in that nets I don't know
 

00:18:20.160 --> 00:18:22.910 align:start position:0%
allocations in that nets I don't know
who<00:18:20.310><c> was</c><00:18:20.490><c> in</c><00:18:20.610><c> Dena's</c><00:18:21.000><c> talk</c><00:18:21.240><c> this</c><00:18:21.420><c> morning</c><00:18:21.920><c> she</c>

00:18:22.910 --> 00:18:22.920 align:start position:0%
who was in Dena's talk this morning she
 

00:18:22.920 --> 00:18:24.800 align:start position:0%
who was in Dena's talk this morning she
talked<00:18:23.190><c> a</c><00:18:23.310><c> little</c><00:18:23.430><c> bit</c><00:18:23.640><c> about</c><00:18:23.850><c> boxing</c><00:18:24.510><c> while</c>

00:18:24.800 --> 00:18:24.810 align:start position:0%
talked a little bit about boxing while
 

00:18:24.810 --> 00:18:26.390 align:start position:0%
talked a little bit about boxing while
boxing<00:18:25.230><c> is</c><00:18:25.380><c> one</c><00:18:25.560><c> case</c><00:18:25.860><c> where</c><00:18:26.100><c> you're</c><00:18:26.250><c> actually</c>

00:18:26.390 --> 00:18:26.400 align:start position:0%
boxing is one case where you're actually
 

00:18:26.400 --> 00:18:29.840 align:start position:0%
boxing is one case where you're actually
having<00:18:27.300><c> a</c><00:18:27.390><c> value</c><00:18:27.630><c> type</c><00:18:27.990><c> but</c><00:18:28.770><c> your</c><00:18:29.040><c> boxing</c><00:18:29.730><c> it</c>

00:18:29.840 --> 00:18:29.850 align:start position:0%
having a value type but your boxing it
 

00:18:29.850 --> 00:18:31.580 align:start position:0%
having a value type but your boxing it
putting<00:18:30.180><c> it</c><00:18:30.360><c> in</c><00:18:30.480><c> box</c><00:18:30.690><c> of</c><00:18:30.930><c> a</c><00:18:31.020><c> reference</c><00:18:31.350><c> type</c>

00:18:31.580 --> 00:18:31.590 align:start position:0%
putting it in box of a reference type
 

00:18:31.590 --> 00:18:33.080 align:start position:0%
putting it in box of a reference type
and<00:18:31.860><c> you're</c><00:18:31.950><c> allocating</c><00:18:32.460><c> a</c><00:18:32.550><c> reference</c><00:18:32.880><c> type</c>

00:18:33.080 --> 00:18:33.090 align:start position:0%
and you're allocating a reference type
 

00:18:33.090 --> 00:18:35.030 align:start position:0%
and you're allocating a reference type
for<00:18:33.360><c> debts</c><00:18:33.570><c> that</c><00:18:33.840><c> basically</c><00:18:34.200><c> just</c><00:18:34.500><c> contains</c><00:18:34.920><c> a</c>

00:18:35.030 --> 00:18:35.040 align:start position:0%
for debts that basically just contains a
 

00:18:35.040 --> 00:18:37.340 align:start position:0%
for debts that basically just contains a
pointer<00:18:35.430><c> to</c><00:18:35.640><c> the</c><00:18:36.090><c> original</c><00:18:36.510><c> objects</c><00:18:36.960><c> but</c>

00:18:37.340 --> 00:18:37.350 align:start position:0%
pointer to the original objects but
 

00:18:37.350 --> 00:18:39.020 align:start position:0%
pointer to the original objects but
still<00:18:37.620><c> you're</c><00:18:37.800><c> allocating</c><00:18:38.190><c> on</c><00:18:38.430><c> the</c><00:18:38.550><c> heap</c><00:18:38.790><c> and</c>

00:18:39.020 --> 00:18:39.030 align:start position:0%
still you're allocating on the heap and
 

00:18:39.030 --> 00:18:40.550 align:start position:0%
still you're allocating on the heap and
the<00:18:39.240><c> garbage</c><00:18:39.540><c> collector</c><00:18:39.960><c> will</c><00:18:40.110><c> have</c><00:18:40.260><c> to</c><00:18:40.380><c> run</c>

00:18:40.550 --> 00:18:40.560 align:start position:0%
the garbage collector will have to run
 

00:18:40.560 --> 00:18:42.860 align:start position:0%
the garbage collector will have to run
for<00:18:40.800><c> that</c><00:18:40.950><c> so</c><00:18:41.130><c> a</c><00:18:41.160><c> nice</c><00:18:41.370><c> example</c><00:18:41.550><c> here</c><00:18:42.120><c> is</c><00:18:42.360><c> we</c>

00:18:42.860 --> 00:18:42.870 align:start position:0%
for that so a nice example here is we
 

00:18:42.870 --> 00:18:44.780 align:start position:0%
for that so a nice example here is we
have<00:18:43.020><c> the</c><00:18:43.170><c> integer</c><00:18:43.410><c> we</c><00:18:44.070><c> make</c><00:18:44.310><c> it</c><00:18:44.430><c> into</c><00:18:44.670><c> an</c>

00:18:44.780 --> 00:18:44.790 align:start position:0%
have the integer we make it into an
 

00:18:44.790 --> 00:18:46.370 align:start position:0%
have the integer we make it into an
object<00:18:44.910><c> well</c><00:18:45.360><c> that</c><00:18:45.510><c> means</c><00:18:45.750><c> we</c><00:18:45.990><c> now</c><00:18:46.140><c> have</c>

00:18:46.370 --> 00:18:46.380 align:start position:0%
object well that means we now have
 

00:18:46.380 --> 00:18:48.110 align:start position:0%
object well that means we now have
something<00:18:46.680><c> on</c><00:18:46.920><c> the</c><00:18:47.010><c> stack</c><00:18:47.250><c> as</c><00:18:47.430><c> well</c><00:18:47.730><c> as</c><00:18:47.880><c> on</c><00:18:48.030><c> the</c>

00:18:48.110 --> 00:18:48.120 align:start position:0%
something on the stack as well as on the
 

00:18:48.120 --> 00:18:49.670 align:start position:0%
something on the stack as well as on the
heap<00:18:48.300><c> that</c><00:18:48.330><c> will</c><00:18:48.690><c> have</c><00:18:48.840><c> to</c><00:18:48.960><c> be</c><00:18:49.080><c> collected</c><00:18:49.350><c> at</c>

00:18:49.670 --> 00:18:49.680 align:start position:0%
heap that will have to be collected at
 

00:18:49.680 --> 00:18:52.400 align:start position:0%
heap that will have to be collected at
some<00:18:49.890><c> points</c><00:18:50.280><c> if</c><00:18:51.240><c> you</c><00:18:51.420><c> look</c><00:18:51.570><c> at</c><00:18:51.690><c> lambdas</c><00:18:52.140><c> and</c>

00:18:52.400 --> 00:18:52.410 align:start position:0%
some points if you look at lambdas and
 

00:18:52.410 --> 00:18:55.430 align:start position:0%
some points if you look at lambdas and
closures<00:18:52.890><c> and</c><00:18:53.220><c> tasks</c><00:18:53.490><c> dots</c><00:18:53.760><c> and</c><00:18:54.600><c> tasks</c><00:18:55.230><c> and</c>

00:18:55.430 --> 00:18:55.440 align:start position:0%
closures and tasks dots and tasks and
 

00:18:55.440 --> 00:18:58.040 align:start position:0%
closures and tasks dots and tasks and
async/await<00:18:56.250><c> and</c><00:18:56.700><c> so</c><00:18:56.850><c> on</c><00:18:57.030><c> there's</c><00:18:57.600><c> lots</c><00:18:57.870><c> of</c>

00:18:58.040 --> 00:18:58.050 align:start position:0%
async/await and so on there's lots of
 

00:18:58.050 --> 00:19:00.470 align:start position:0%
async/await and so on there's lots of
hidden<00:18:58.350><c> allocations</c><00:18:59.010><c> happening</c><00:18:59.460><c> there</c><00:18:59.700><c> if</c>

00:19:00.470 --> 00:19:00.480 align:start position:0%
hidden allocations happening there if
 

00:19:00.480 --> 00:19:02.630 align:start position:0%
hidden allocations happening there if
you<00:19:00.630><c> use</c><00:19:00.780><c> params</c><00:19:01.230><c> erase</c><00:19:01.650><c> you</c><00:19:01.890><c> will</c><00:19:02.040><c> see</c><00:19:02.250><c> hidden</c>

00:19:02.630 --> 00:19:02.640 align:start position:0%
you use params erase you will see hidden
 

00:19:02.640 --> 00:19:04.250 align:start position:0%
you use params erase you will see hidden
allocations<00:19:03.300><c> there</c><00:19:03.540><c> as</c><00:19:03.690><c> well</c><00:19:03.870><c> and</c><00:19:04.050><c> there's</c><00:19:04.170><c> a</c>

00:19:04.250 --> 00:19:04.260 align:start position:0%
allocations there as well and there's a
 

00:19:04.260 --> 00:19:06.530 align:start position:0%
allocations there as well and there's a
couple<00:19:04.380><c> of</c><00:19:04.560><c> more</c><00:19:04.740><c> cases</c><00:19:05.220><c> out</c><00:19:06.030><c> there</c><00:19:06.060><c> as</c><00:19:06.360><c> well</c>

00:19:06.530 --> 00:19:06.540 align:start position:0%
couple of more cases out there as well
 

00:19:06.540 --> 00:19:08.360 align:start position:0%
couple of more cases out there as well
now<00:19:06.750><c> how</c><00:19:07.500><c> do</c><00:19:07.560><c> you</c><00:19:07.680><c> find</c><00:19:07.980><c> those</c><00:19:08.160><c> hidden</c>

00:19:08.360 --> 00:19:08.370 align:start position:0%
now how do you find those hidden
 

00:19:08.370 --> 00:19:10.670 align:start position:0%
now how do you find those hidden
allocations<00:19:09.120><c> well</c><00:19:09.390><c> typically</c><00:19:10.020><c> if</c><00:19:10.230><c> you</c><00:19:10.440><c> run</c>

00:19:10.670 --> 00:19:10.680 align:start position:0%
allocations well typically if you run
 

00:19:10.680 --> 00:19:12.260 align:start position:0%
allocations well typically if you run
into<00:19:10.920><c> a</c><00:19:10.950><c> problem</c><00:19:11.070><c> you</c><00:19:11.670><c> learn</c><00:19:11.910><c> from</c><00:19:12.210><c> that</c>

00:19:12.260 --> 00:19:12.270 align:start position:0%
into a problem you learn from that
 

00:19:12.270 --> 00:19:14.420 align:start position:0%
into a problem you learn from that
problem<00:19:12.660><c> and</c><00:19:13.020><c> you</c><00:19:13.140><c> will</c><00:19:13.290><c> hopefully</c><00:19:13.950><c> never</c>

00:19:14.420 --> 00:19:14.430 align:start position:0%
problem and you will hopefully never
 

00:19:14.430 --> 00:19:15.610 align:start position:0%
problem and you will hopefully never
make<00:19:14.670><c> that</c><00:19:14.700><c> mistake</c><00:19:14.880><c> again</c>

00:19:15.610 --> 00:19:15.620 align:start position:0%
make that mistake again
 

00:19:15.620 --> 00:19:17.690 align:start position:0%
make that mistake again
you<00:19:16.620><c> can</c><00:19:16.770><c> look</c><00:19:16.890><c> at</c><00:19:17.040><c> the</c><00:19:17.160><c> intermediate</c>

00:19:17.690 --> 00:19:17.700 align:start position:0%
you can look at the intermediate
 

00:19:17.700 --> 00:19:19.400 align:start position:0%
you can look at the intermediate
language<00:19:17.850><c> to</c><00:19:18.270><c> see</c><00:19:18.450><c> what</c><00:19:18.660><c> is</c><00:19:18.780><c> going</c><00:19:19.080><c> on</c><00:19:19.200><c> and</c>

00:19:19.400 --> 00:19:19.410 align:start position:0%
language to see what is going on and
 

00:19:19.410 --> 00:19:20.960 align:start position:0%
language to see what is going on and
where<00:19:19.590><c> hidden</c><00:19:19.860><c> allocations</c><00:19:20.400><c> are</c><00:19:20.550><c> happening</c>

00:19:20.960 --> 00:19:20.970 align:start position:0%
where hidden allocations are happening
 

00:19:20.970 --> 00:19:23.240 align:start position:0%
where hidden allocations are happening
you<00:19:21.150><c> could</c><00:19:21.870><c> of</c><00:19:21.990><c> course</c><00:19:22.140><c> use</c><00:19:22.290><c> a</c><00:19:22.470><c> profiler</c><00:19:23.040><c> and</c>

00:19:23.240 --> 00:19:23.250 align:start position:0%
you could of course use a profiler and
 

00:19:23.250 --> 00:19:24.590 align:start position:0%
you could of course use a profiler and
see<00:19:23.430><c> whatever</c><00:19:23.730><c> is</c><00:19:23.970><c> happening</c><00:19:24.330><c> in</c><00:19:24.480><c> your</c>

00:19:24.590 --> 00:19:24.600 align:start position:0%
see whatever is happening in your
 

00:19:24.600 --> 00:19:26.270 align:start position:0%
see whatever is happening in your
application<00:19:25.200><c> or</c><00:19:25.410><c> you</c><00:19:25.500><c> can</c><00:19:25.680><c> use</c><00:19:25.860><c> one</c><00:19:26.070><c> of</c><00:19:26.100><c> the</c>

00:19:26.270 --> 00:19:26.280 align:start position:0%
application or you can use one of the
 

00:19:26.280 --> 00:19:28.790 align:start position:0%
application or you can use one of the
plugins<00:19:26.670><c> either</c><00:19:27.270><c> furry</c><00:19:27.600><c> Sharper</c><00:19:28.170><c> or</c><00:19:28.350><c> just</c><00:19:28.590><c> for</c>

00:19:28.790 --> 00:19:28.800 align:start position:0%
plugins either furry Sharper or just for
 

00:19:28.800 --> 00:19:30.770 align:start position:0%
plugins either furry Sharper or just for
visual<00:19:29.070><c> studio</c><00:19:29.100><c> without</c><00:19:29.580><c> resharper</c><00:19:30.240><c> let's</c>

00:19:30.770 --> 00:19:30.780 align:start position:0%
visual studio without resharper let's
 

00:19:30.780 --> 00:19:32.690 align:start position:0%
visual studio without resharper let's
tell<00:19:31.110><c> you</c><00:19:31.290><c> whenever</c><00:19:31.710><c> you</c><00:19:31.890><c> are</c><00:19:32.040><c> making</c><00:19:32.280><c> a</c>

00:19:32.690 --> 00:19:32.700 align:start position:0%
tell you whenever you are making a
 

00:19:32.700 --> 00:19:35.210 align:start position:0%
tell you whenever you are making a
hidden<00:19:33.270><c> allocation</c><00:19:33.960><c> those</c><00:19:34.470><c> two</c><00:19:34.680><c> plugins</c><00:19:35.070><c> are</c>

00:19:35.210 --> 00:19:35.220 align:start position:0%
hidden allocation those two plugins are
 

00:19:35.220 --> 00:19:36.890 align:start position:0%
hidden allocation those two plugins are
really<00:19:35.490><c> nice</c><00:19:35.640><c> to</c><00:19:35.850><c> look</c><00:19:36.210><c> into</c><00:19:36.510><c> those</c><00:19:36.660><c> things</c>

00:19:36.890 --> 00:19:36.900 align:start position:0%
really nice to look into those things
 

00:19:36.900 --> 00:19:39.500 align:start position:0%
really nice to look into those things
but<00:19:37.680><c> just</c><00:19:38.070><c> for</c><00:19:38.280><c> fun</c><00:19:38.490><c> let's</c><00:19:38.700><c> look</c><00:19:39.090><c> at</c><00:19:39.270><c> some</c>

00:19:39.500 --> 00:19:39.510 align:start position:0%
but just for fun let's look at some
 

00:19:39.510 --> 00:19:41.330 align:start position:0%
but just for fun let's look at some
intermediate<00:19:39.900><c> language</c><00:19:40.530><c> code</c><00:19:40.770><c> and</c><00:19:40.980><c> see</c><00:19:41.190><c> what</c>

00:19:41.330 --> 00:19:41.340 align:start position:0%
intermediate language code and see what
 

00:19:41.340 --> 00:19:44.150 align:start position:0%
intermediate language code and see what
happens<00:19:41.640><c> under</c><00:19:42.180><c> the</c><00:19:42.540><c> covers</c><00:19:42.870><c> of</c><00:19:43.140><c> dotnet</c><00:19:43.950><c> when</c>

00:19:44.150 --> 00:19:44.160 align:start position:0%
happens under the covers of dotnet when
 

00:19:44.160 --> 00:19:47.660 align:start position:0%
happens under the covers of dotnet when
we<00:19:44.310><c> are</c><00:19:44.460><c> writing</c><00:19:45.090><c> some</c><00:19:45.450><c> codes</c><00:19:46.310><c> so</c><00:19:47.310><c> let</c><00:19:47.580><c> me</c>

00:19:47.660 --> 00:19:47.670 align:start position:0%
we are writing some codes so let me
 

00:19:47.670 --> 00:19:50.660 align:start position:0%
we are writing some codes so let me
close<00:19:47.910><c> that</c><00:19:48.530><c> close</c><00:19:49.530><c> that</c><00:19:49.560><c> demo</c><00:19:50.100><c> as</c><00:19:50.220><c> well</c><00:19:50.250><c> and</c>

00:19:50.660 --> 00:19:50.670 align:start position:0%
close that close that demo as well and
 

00:19:50.670 --> 00:19:54.560 align:start position:0%
close that close that demo as well and
then<00:19:51.660><c> open</c><00:19:52.140><c> this</c><00:19:52.710><c> one</c><00:19:52.920><c> so</c><00:19:53.850><c> what</c><00:19:54.270><c> I</c><00:19:54.300><c> have</c><00:19:54.540><c> here</c>

00:19:54.560 --> 00:19:54.570 align:start position:0%
then open this one so what I have here
 

00:19:54.570 --> 00:19:56.600 align:start position:0%
then open this one so what I have here
is<00:19:54.930><c> a</c><00:19:54.960><c> very</c><00:19:55.200><c> simple</c><00:19:55.680><c> class</c><00:19:55.860><c> that</c><00:19:56.070><c> has</c><00:19:56.220><c> a</c><00:19:56.250><c> couple</c>

00:19:56.600 --> 00:19:56.610 align:start position:0%
is a very simple class that has a couple
 

00:19:56.610 --> 00:19:58.250 align:start position:0%
is a very simple class that has a couple
of<00:19:56.700><c> examples</c><00:19:57.210><c> where</c><00:19:57.360><c> I'm</c><00:19:57.480><c> allocating</c><00:19:57.930><c> things</c>

00:19:58.250 --> 00:19:58.260 align:start position:0%
of examples where I'm allocating things
 

00:19:58.260 --> 00:20:00.230 align:start position:0%
of examples where I'm allocating things
and<00:19:58.620><c> the</c><00:19:59.310><c> nice</c><00:19:59.460><c> thing</c><00:19:59.490><c> is</c><00:19:59.790><c> if</c><00:19:59.970><c> you</c><00:20:00.090><c> have</c>

00:20:00.230 --> 00:20:00.240 align:start position:0%
and the nice thing is if you have
 

00:20:00.240 --> 00:20:05.000 align:start position:0%
and the nice thing is if you have
resharper<00:20:00.870><c> installed</c><00:20:01.380><c> you</c><00:20:01.920><c> can</c><00:20:03.650><c> where</c><00:20:04.650><c> is</c><00:20:04.830><c> my</c>

00:20:05.000 --> 00:20:05.010 align:start position:0%
resharper installed you can where is my
 

00:20:05.010 --> 00:20:09.410 align:start position:0%
resharper installed you can where is my
tool<00:20:05.250><c> window</c><00:20:05.610><c> I</c><00:20:07.490><c> can</c><00:20:08.490><c> search</c><00:20:08.700><c> for</c><00:20:08.940><c> the</c><00:20:09.060><c> il</c>

00:20:09.410 --> 00:20:09.420 align:start position:0%
tool window I can search for the il
 

00:20:09.420 --> 00:20:12.620 align:start position:0%
tool window I can search for the il
viewer<00:20:09.720><c> and</c><00:20:10.760><c> there</c><00:20:11.760><c> should</c><00:20:11.910><c> be</c><00:20:11.940><c> a</c><00:20:12.090><c> two</c><00:20:12.270><c> window</c>

00:20:12.620 --> 00:20:12.630 align:start position:0%
viewer and there should be a two window
 

00:20:12.630 --> 00:20:15.200 align:start position:0%
viewer and there should be a two window
called<00:20:12.870><c> il</c><00:20:13.290><c> viewer</c><00:20:13.590><c> and</c><00:20:13.860><c> the</c><00:20:14.490><c> il</c><00:20:14.700><c> viewer</c><00:20:14.940><c> two</c>

00:20:15.200 --> 00:20:15.210 align:start position:0%
called il viewer and the il viewer two
 

00:20:15.210 --> 00:20:17.420 align:start position:0%
called il viewer and the il viewer two
window<00:20:15.570><c> give</c><00:20:15.810><c> me</c><00:20:15.990><c> the</c><00:20:16.260><c> il</c><00:20:16.590><c> code</c><00:20:16.860><c> for</c><00:20:17.160><c> the</c>

00:20:17.420 --> 00:20:17.430 align:start position:0%
window give me the il code for the
 

00:20:17.430 --> 00:20:20.420 align:start position:0%
window give me the il code for the
that<00:20:17.820><c> I</c><00:20:17.940><c> select</c><00:20:18.360><c> so</c><00:20:18.570><c> let</c><00:20:18.720><c> me</c><00:20:18.840><c> maybe</c><00:20:19.830><c> open</c><00:20:20.310><c> this</c>

00:20:20.420 --> 00:20:20.430 align:start position:0%
that I select so let me maybe open this
 

00:20:20.430 --> 00:20:23.450 align:start position:0%
that I select so let me maybe open this
one<00:20:20.640><c> in</c><00:20:20.880><c> a</c><00:20:21.180><c> separate</c><00:20:21.660><c> window</c><00:20:22.040><c> so</c><00:20:23.040><c> whenever</c><00:20:23.340><c> I</c>

00:20:23.450 --> 00:20:23.460 align:start position:0%
one in a separate window so whenever I
 

00:20:23.460 --> 00:20:25.010 align:start position:0%
one in a separate window so whenever I
select<00:20:23.580><c> a</c><00:20:24.060><c> statement</c><00:20:24.390><c> here</c>

00:20:25.010 --> 00:20:25.020 align:start position:0%
select a statement here
 

00:20:25.020 --> 00:20:26.660 align:start position:0%
select a statement here
you<00:20:25.290><c> will</c><00:20:25.440><c> see</c><00:20:25.620><c> that</c><00:20:25.770><c> the</c><00:20:25.890><c> statement</c><00:20:26.340><c> is</c><00:20:26.490><c> also</c>

00:20:26.660 --> 00:20:26.670 align:start position:0%
you will see that the statement is also
 

00:20:26.670 --> 00:20:28.880 align:start position:0%
you will see that the statement is also
selected<00:20:27.360><c> in</c><00:20:27.510><c> the</c><00:20:27.780><c> il</c><00:20:27.990><c> viewer</c><00:20:28.260><c> so</c><00:20:28.470><c> it</c><00:20:28.560><c> makes</c><00:20:28.740><c> it</c>

00:20:28.880 --> 00:20:28.890 align:start position:0%
selected in the il viewer so it makes it
 

00:20:28.890 --> 00:20:31.370 align:start position:0%
selected in the il viewer so it makes it
really<00:20:29.100><c> easy</c><00:20:29.250><c> to</c><00:20:29.580><c> map</c><00:20:29.850><c> my</c><00:20:30.390><c> c-sharp</c><00:20:30.780><c> codes</c><00:20:31.080><c> to</c>

00:20:31.370 --> 00:20:31.380 align:start position:0%
really easy to map my c-sharp codes to
 

00:20:31.380 --> 00:20:34.220 align:start position:0%
really easy to map my c-sharp codes to
whatever<00:20:31.620><c> I</c><00:20:31.830><c> am</c><00:20:31.890><c> saying</c><00:20:31.920><c> in</c><00:20:32.400><c> the</c><00:20:32.610><c> il</c><00:20:32.970><c> codes</c><00:20:33.270><c> so</c>

00:20:34.220 --> 00:20:34.230 align:start position:0%
whatever I am saying in the il codes so
 

00:20:34.230 --> 00:20:36.800 align:start position:0%
whatever I am saying in the il codes so
what<00:20:34.860><c> we</c><00:20:34.980><c> have</c><00:20:35.160><c> here</c><00:20:35.490><c> is</c><00:20:35.730><c> we</c><00:20:36.000><c> are</c><00:20:36.030><c> boxing</c><00:20:36.630><c> so</c>

00:20:36.800 --> 00:20:36.810 align:start position:0%
what we have here is we are boxing so
 

00:20:36.810 --> 00:20:38.240 align:start position:0%
what we have here is we are boxing so
whenever<00:20:37.110><c> we</c><00:20:37.290><c> are</c><00:20:37.320><c> putting</c><00:20:37.740><c> this</c><00:20:37.830><c> integer</c>

00:20:38.240 --> 00:20:38.250 align:start position:0%
whenever we are putting this integer
 

00:20:38.250 --> 00:20:41.090 align:start position:0%
whenever we are putting this integer
inside<00:20:38.880><c> this</c><00:20:39.090><c> reference</c><00:20:39.720><c> type</c><00:20:40.020><c> of</c><00:20:40.170><c> box</c><00:20:40.350><c> we</c><00:20:40.980><c> are</c>

00:20:41.090 --> 00:20:41.100 align:start position:0%
inside this reference type of box we are
 

00:20:41.100 --> 00:20:42.530 align:start position:0%
inside this reference type of box we are
boxing<00:20:41.550><c> and</c><00:20:41.730><c> you</c><00:20:41.820><c> will</c><00:20:41.970><c> see</c><00:20:42.120><c> in</c><00:20:42.210><c> the</c><00:20:42.300><c> source</c>

00:20:42.530 --> 00:20:42.540 align:start position:0%
boxing and you will see in the source
 

00:20:42.540 --> 00:20:44.480 align:start position:0%
boxing and you will see in the source
code<00:20:42.780><c> that's</c><00:20:43.170><c> there's</c><00:20:43.470><c> a</c><00:20:43.530><c> box</c><00:20:43.770><c> statement</c><00:20:44.280><c> and</c>

00:20:44.480 --> 00:20:44.490 align:start position:0%
code that's there's a box statement and
 

00:20:44.490 --> 00:20:46.790 align:start position:0%
code that's there's a box statement and
the<00:20:44.910><c> book</c><00:20:45.090><c> statement</c><00:20:45.600><c> really</c><00:20:45.810><c> converts</c><00:20:46.650><c> a</c>

00:20:46.790 --> 00:20:46.800 align:start position:0%
the book statement really converts a
 

00:20:46.800 --> 00:20:48.560 align:start position:0%
the book statement really converts a
value<00:20:47.100><c> type</c><00:20:47.340><c> into</c><00:20:47.640><c> a</c><00:20:47.670><c> reference</c><00:20:48.120><c> type</c><00:20:48.330><c> so</c><00:20:48.540><c> that</c>

00:20:48.560 --> 00:20:48.570 align:start position:0%
value type into a reference type so that
 

00:20:48.570 --> 00:20:50.960 align:start position:0%
value type into a reference type so that
was<00:20:48.840><c> an</c><00:20:48.990><c> easy</c><00:20:49.140><c> hidden</c><00:20:49.890><c> allocation</c><00:20:50.400><c> to</c><00:20:50.520><c> find</c><00:20:50.760><c> if</c>

00:20:50.960 --> 00:20:50.970 align:start position:0%
was an easy hidden allocation to find if
 

00:20:50.970 --> 00:20:52.850 align:start position:0%
was an easy hidden allocation to find if
we<00:20:51.120><c> look</c><00:20:51.240><c> at</c><00:20:51.390><c> the</c><00:20:51.510><c> il</c><00:20:51.750><c> code</c><00:20:51.990><c> there</c><00:20:52.230><c> we</c><00:20:52.410><c> see</c><00:20:52.620><c> this</c>

00:20:52.850 --> 00:20:52.860 align:start position:0%
we look at the il code there we see this
 

00:20:52.860 --> 00:20:54.710 align:start position:0%
we look at the il code there we see this
thing<00:20:53.070><c> is</c><00:20:53.160><c> being</c><00:20:53.340><c> boxed</c><00:20:53.640><c> and</c><00:20:53.940><c> we</c><00:20:54.510><c> should</c>

00:20:54.710 --> 00:20:54.720 align:start position:0%
thing is being boxed and we should
 

00:20:54.720 --> 00:20:57.560 align:start position:0%
thing is being boxed and we should
hopefully<00:20:55.580><c> find</c><00:20:56.580><c> a</c><00:20:56.640><c> better</c><00:20:56.820><c> way</c><00:20:57.000><c> of</c><00:20:57.150><c> writing</c>

00:20:57.560 --> 00:20:57.570 align:start position:0%
hopefully find a better way of writing
 

00:20:57.570 --> 00:21:00.740 align:start position:0%
hopefully find a better way of writing
that<00:20:57.810><c> codes</c><00:20:58.550><c> now</c><00:20:59.550><c> another</c><00:21:00.000><c> one</c><00:21:00.180><c> that</c><00:21:00.330><c> I</c><00:21:00.390><c> really</c>

00:21:00.740 --> 00:21:00.750 align:start position:0%
that codes now another one that I really
 

00:21:00.750 --> 00:21:03.290 align:start position:0%
that codes now another one that I really
like<00:21:00.960><c> is</c><00:21:01.200><c> this</c><00:21:01.410><c> one</c><00:21:01.470><c> I</c><00:21:01.860><c> think</c><00:21:02.760><c> we</c><00:21:02.910><c> all</c><00:21:03.030><c> write</c>

00:21:03.290 --> 00:21:03.300 align:start position:0%
like is this one I think we all write
 

00:21:03.300 --> 00:21:05.830 align:start position:0%
like is this one I think we all write
codes<00:21:03.660><c> where</c><00:21:03.930><c> we</c><00:21:04.080><c> have</c><00:21:04.320><c> a</c><00:21:04.350><c> method</c><00:21:04.770><c> that</c><00:21:05.160><c> has</c>

00:21:05.830 --> 00:21:05.840 align:start position:0%
codes where we have a method that has
 

00:21:05.840 --> 00:21:08.450 align:start position:0%
codes where we have a method that has
that<00:21:06.840><c> takes</c><00:21:07.080><c> a</c><00:21:07.230><c> params</c><00:21:07.560><c> array</c><00:21:07.950><c> of</c><00:21:08.220><c> some</c>

00:21:08.450 --> 00:21:08.460 align:start position:0%
that takes a params array of some
 

00:21:08.460 --> 00:21:10.100 align:start position:0%
that takes a params array of some
objects<00:21:08.910><c> and</c><00:21:09.030><c> then</c><00:21:09.240><c> does</c><00:21:09.540><c> something</c><00:21:09.570><c> with</c>

00:21:10.100 --> 00:21:10.110 align:start position:0%
objects and then does something with
 

00:21:10.110 --> 00:21:11.750 align:start position:0%
objects and then does something with
that<00:21:10.260><c> right</c><00:21:10.500><c> I</c><00:21:10.800><c> think</c><00:21:10.860><c> we</c><00:21:11.190><c> all</c><00:21:11.310><c> write</c><00:21:11.520><c> code</c>

00:21:11.750 --> 00:21:11.760 align:start position:0%
that right I think we all write code
 

00:21:11.760 --> 00:21:14.630 align:start position:0%
that right I think we all write code
like<00:21:11.790><c> this</c><00:21:12.120><c> now</c><00:21:13.110><c> what</c><00:21:13.560><c> happens</c><00:21:13.920><c> when</c><00:21:14.280><c> you</c><00:21:14.430><c> call</c>

00:21:14.630 --> 00:21:14.640 align:start position:0%
like this now what happens when you call
 

00:21:14.640 --> 00:21:17.210 align:start position:0%
like this now what happens when you call
that<00:21:14.820><c> methods</c><00:21:15.240><c> without</c><00:21:16.170><c> actually</c><00:21:16.590><c> passing</c><00:21:17.100><c> in</c>

00:21:17.210 --> 00:21:17.220 align:start position:0%
that methods without actually passing in
 

00:21:17.220 --> 00:21:19.550 align:start position:0%
that methods without actually passing in
any<00:21:17.490><c> variables</c><00:21:18.210><c> into</c><00:21:18.570><c> that</c><00:21:18.720><c> methods</c><00:21:19.110><c> well</c><00:21:19.350><c> it</c>

00:21:19.550 --> 00:21:19.560 align:start position:0%
any variables into that methods well it
 

00:21:19.560 --> 00:21:21.740 align:start position:0%
any variables into that methods well it
turns<00:21:19.800><c> out</c><00:21:20.070><c> that</c><00:21:20.760><c> if</c><00:21:20.910><c> you</c><00:21:21.030><c> look</c><00:21:21.060><c> at</c><00:21:21.330><c> the</c><00:21:21.450><c> aisle</c>

00:21:21.740 --> 00:21:21.750 align:start position:0%
turns out that if you look at the aisle
 

00:21:21.750 --> 00:21:25.190 align:start position:0%
turns out that if you look at the aisle
codes<00:21:22.850><c> that</c><00:21:23.850><c> we</c><00:21:24.270><c> are</c><00:21:24.390><c> actually</c><00:21:24.540><c> creating</c><00:21:24.900><c> a</c>

00:21:25.190 --> 00:21:25.200 align:start position:0%
codes that we are actually creating a
 

00:21:25.200 --> 00:21:28.700 align:start position:0%
codes that we are actually creating a
new<00:21:25.230><c> array</c><00:21:25.680><c> of</c><00:21:25.980><c> type</c><00:21:26.730><c> string</c><00:21:27.060><c> an</c><00:21:27.560><c> empty</c><00:21:28.560><c> one</c>

00:21:28.700 --> 00:21:28.710 align:start position:0%
new array of type string an empty one
 

00:21:28.710 --> 00:21:30.770 align:start position:0%
new array of type string an empty one
and<00:21:28.920><c> then</c><00:21:29.220><c> pass</c><00:21:29.430><c> that</c><00:21:29.700><c> into</c><00:21:30.000><c> our</c><00:21:30.030><c> methods</c><00:21:30.630><c> that</c>

00:21:30.770 --> 00:21:30.780 align:start position:0%
and then pass that into our methods that
 

00:21:30.780 --> 00:21:32.570 align:start position:0%
and then pass that into our methods that
we<00:21:30.960><c> just</c><00:21:31.200><c> wrote</c><00:21:31.440><c> and</c><00:21:31.650><c> that</c><00:21:31.680><c> expects</c><00:21:32.220><c> a</c><00:21:32.280><c> params</c>

00:21:32.570 --> 00:21:32.580 align:start position:0%
we just wrote and that expects a params
 

00:21:32.580 --> 00:21:36.140 align:start position:0%
we just wrote and that expects a params
array<00:21:32.910><c> so</c><00:21:34.040><c> while</c><00:21:35.040><c> we</c><00:21:35.250><c> may</c><00:21:35.460><c> think</c><00:21:35.520><c> that</c><00:21:35.880><c> we're</c>

00:21:36.140 --> 00:21:36.150 align:start position:0%
array so while we may think that we're
 

00:21:36.150 --> 00:21:38.420 align:start position:0%
array so while we may think that we're
not<00:21:36.270><c> passing</c><00:21:36.750><c> any</c><00:21:37.130><c> variables</c><00:21:38.130><c> and</c><00:21:38.340><c> not</c>

00:21:38.420 --> 00:21:38.430 align:start position:0%
not passing any variables and not
 

00:21:38.430 --> 00:21:40.700 align:start position:0%
not passing any variables and not
creating<00:21:38.820><c> any</c><00:21:39.120><c> allocations</c><00:21:39.750><c> in</c><00:21:39.900><c> memory</c><00:21:40.200><c> we</c>

00:21:40.700 --> 00:21:40.710 align:start position:0%
creating any allocations in memory we
 

00:21:40.710 --> 00:21:42.410 align:start position:0%
creating any allocations in memory we
are<00:21:40.860><c> actually</c><00:21:41.010><c> allocating</c><00:21:41.790><c> a</c><00:21:41.850><c> new</c><00:21:41.880><c> area</c><00:21:42.270><c> of</c>

00:21:42.410 --> 00:21:42.420 align:start position:0%
are actually allocating a new area of
 

00:21:42.420 --> 00:21:44.210 align:start position:0%
are actually allocating a new area of
type<00:21:42.720><c> string</c><00:21:43.050><c> that</c><00:21:43.320><c> will</c><00:21:43.470><c> be</c><00:21:43.590><c> passed</c><00:21:43.860><c> and</c><00:21:44.040><c> has</c>

00:21:44.210 --> 00:21:44.220 align:start position:0%
type string that will be passed and has
 

00:21:44.220 --> 00:21:45.610 align:start position:0%
type string that will be passed and has
to<00:21:44.400><c> be</c><00:21:44.490><c> reclaimed</c><00:21:44.850><c> by</c><00:21:45.090><c> the</c><00:21:45.150><c> garbage</c><00:21:45.450><c> collector</c>

00:21:45.610 --> 00:21:45.620 align:start position:0%
to be reclaimed by the garbage collector
 

00:21:45.620 --> 00:21:49.400 align:start position:0%
to be reclaimed by the garbage collector
again<00:21:46.620><c> it</c><00:21:47.310><c> may</c><00:21:47.580><c> not</c><00:21:47.760><c> matter</c><00:21:48.480><c> but</c><00:21:49.050><c> if</c><00:21:49.200><c> you</c><00:21:49.320><c> have</c>

00:21:49.400 --> 00:21:49.410 align:start position:0%
again it may not matter but if you have
 

00:21:49.410 --> 00:21:51.200 align:start position:0%
again it may not matter but if you have
lots<00:21:49.680><c> of</c><00:21:49.830><c> these</c><00:21:50.010><c> allocations</c><00:21:50.730><c> the</c><00:21:50.910><c> garbage</c>

00:21:51.200 --> 00:21:51.210 align:start position:0%
lots of these allocations the garbage
 

00:21:51.210 --> 00:21:53.060 align:start position:0%
lots of these allocations the garbage
collector<00:21:51.690><c> will</c><00:21:51.870><c> have</c><00:21:52.080><c> to</c><00:21:52.320><c> will</c><00:21:52.560><c> probably</c><00:21:52.920><c> be</c>

00:21:53.060 --> 00:21:53.070 align:start position:0%
collector will have to will probably be
 

00:21:53.070 --> 00:21:54.950 align:start position:0%
collector will have to will probably be
invoked<00:21:53.550><c> and</c><00:21:53.880><c> we'll</c><00:21:54.360><c> run</c><00:21:54.570><c> a</c><00:21:54.600><c> garbage</c>

00:21:54.950 --> 00:21:54.960 align:start position:0%
invoked and we'll run a garbage
 

00:21:54.960 --> 00:21:56.690 align:start position:0%
invoked and we'll run a garbage
collection<00:21:55.290><c> which</c><00:21:55.560><c> may</c><00:21:55.770><c> eventually</c><00:21:56.160><c> pause</c>

00:21:56.690 --> 00:21:56.700 align:start position:0%
collection which may eventually pause
 

00:21:56.700 --> 00:21:59.530 align:start position:0%
collection which may eventually pause
your<00:21:56.910><c> application</c><00:21:57.540><c> while</c><00:21:58.020><c> it's</c><00:21:58.200><c> running</c>

00:21:59.530 --> 00:21:59.540 align:start position:0%
your application while it's running
 

00:21:59.540 --> 00:22:03.080 align:start position:0%
your application while it's running
let's<00:22:00.540><c> look</c><00:22:00.720><c> at</c><00:22:00.810><c> another</c><00:22:01.050><c> example</c><00:22:01.370><c> we</c><00:22:02.370><c> move</c>

00:22:03.080 --> 00:22:03.090 align:start position:0%
let's look at another example we move
 

00:22:03.090 --> 00:22:06.530 align:start position:0%
let's look at another example we move
down<00:22:03.240><c> on</c><00:22:03.390><c> a</c><00:22:03.480><c> side</c><00:22:03.810><c> a</c><00:22:03.840><c> little</c><00:22:04.140><c> bit</c><00:22:04.290><c> more</c><00:22:05.540><c> imagine</c>

00:22:06.530 --> 00:22:06.540 align:start position:0%
down on a side a little bit more imagine
 

00:22:06.540 --> 00:22:08.270 align:start position:0%
down on a side a little bit more imagine
I<00:22:06.630><c> have</c><00:22:06.720><c> a</c><00:22:06.750><c> methods</c><00:22:07.140><c> average</c><00:22:07.650><c> within</c><00:22:07.920><c> bounce</c>

00:22:08.270 --> 00:22:08.280 align:start position:0%
I have a methods average within bounce
 

00:22:08.280 --> 00:22:11.000 align:start position:0%
I have a methods average within bounce
that<00:22:08.760><c> takes</c><00:22:09.060><c> an</c><00:22:09.360><c> input</c><00:22:09.720><c> array</c><00:22:10.200><c> a</c><00:22:10.380><c> minimum</c><00:22:10.830><c> and</c>

00:22:11.000 --> 00:22:11.010 align:start position:0%
that takes an input array a minimum and
 

00:22:11.010 --> 00:22:14.090 align:start position:0%
that takes an input array a minimum and
a<00:22:11.070><c> maximum</c><00:22:11.100><c> and</c><00:22:11.730><c> then</c><00:22:12.420><c> runs</c><00:22:12.780><c> a</c><00:22:13.020><c> link</c><00:22:13.410><c> statement</c>

00:22:14.090 --> 00:22:14.100 align:start position:0%
a maximum and then runs a link statement
 

00:22:14.100 --> 00:22:16.610 align:start position:0%
a maximum and then runs a link statement
on<00:22:14.220><c> that</c><00:22:14.370><c> that</c><00:22:14.820><c> basically</c><00:22:15.360><c> takes</c><00:22:15.660><c> all</c><00:22:15.990><c> the</c>

00:22:16.610 --> 00:22:16.620 align:start position:0%
on that that basically takes all the
 

00:22:16.620 --> 00:22:18.620 align:start position:0%
on that that basically takes all the
numbers<00:22:16.980><c> from</c><00:22:17.010><c> my</c><00:22:17.340><c> input</c><00:22:17.670><c> array</c><00:22:17.910><c> between</c><00:22:18.450><c> the</c>

00:22:18.620 --> 00:22:18.630 align:start position:0%
numbers from my input array between the
 

00:22:18.630 --> 00:22:20.900 align:start position:0%
numbers from my input array between the
minimum<00:22:18.870><c> and</c><00:22:19.140><c> the</c><00:22:19.230><c> maximum</c><00:22:19.260><c> and</c><00:22:19.890><c> then</c><00:22:20.550><c> calls</c>

00:22:20.900 --> 00:22:20.910 align:start position:0%
minimum and the maximum and then calls
 

00:22:20.910 --> 00:22:22.940 align:start position:0%
minimum and the maximum and then calls
dot<00:22:21.150><c> average</c><00:22:21.570><c> on</c><00:22:21.780><c> that</c><00:22:21.960><c> one</c><00:22:22.170><c> that's</c><00:22:22.410><c> perfectly</c>

00:22:22.940 --> 00:22:22.950 align:start position:0%
dot average on that one that's perfectly
 

00:22:22.950 --> 00:22:26.090 align:start position:0%
dot average on that one that's perfectly
fine<00:22:23.220><c> code</c><00:22:23.520><c> it's</c><00:22:23.730><c> it's</c><00:22:24.090><c> nice</c><00:22:24.300><c> and</c><00:22:24.600><c> readable</c><00:22:25.100><c> so</c>

00:22:26.090 --> 00:22:26.100 align:start position:0%
fine code it's it's nice and readable so
 

00:22:26.100 --> 00:22:28.610 align:start position:0%
fine code it's it's nice and readable so
it<00:22:26.430><c> looks</c><00:22:26.640><c> perfectly</c><00:22:27.090><c> fine</c><00:22:27.260><c> now</c><00:22:28.260><c> the</c><00:22:28.320><c> thing</c>

00:22:28.610 --> 00:22:28.620 align:start position:0%
it looks perfectly fine now the thing
 

00:22:28.620 --> 00:22:30.320 align:start position:0%
it looks perfectly fine now the thing
with<00:22:28.740><c> this</c><00:22:28.800><c> one</c><00:22:29.130><c> is</c><00:22:29.340><c> that</c><00:22:29.640><c> if</c><00:22:29.760><c> we</c><00:22:29.910><c> look</c><00:22:30.060><c> at</c><00:22:30.210><c> the</c>

00:22:30.320 --> 00:22:30.330 align:start position:0%
with this one is that if we look at the
 

00:22:30.330 --> 00:22:30.830 align:start position:0%
with this one is that if we look at the
i/o

00:22:30.830 --> 00:22:30.840 align:start position:0%
i/o
 

00:22:30.840 --> 00:22:35.150 align:start position:0%
i/o
koats<00:22:32.030><c> we</c><00:22:33.030><c> can</c><00:22:33.240><c> actually</c><00:22:33.390><c> see</c><00:22:33.870><c> that</c><00:22:34.830><c> right</c>

00:22:35.150 --> 00:22:35.160 align:start position:0%
koats we can actually see that right
 

00:22:35.160 --> 00:22:37.640 align:start position:0%
koats we can actually see that right
before<00:22:35.640><c> I</c><00:22:35.670><c> create</c><00:22:36.330><c> my</c><00:22:36.540><c> linked</c><00:22:36.810><c> statements</c><00:22:37.350><c> we</c>

00:22:37.640 --> 00:22:37.650 align:start position:0%
before I create my linked statements we
 

00:22:37.650 --> 00:22:39.590 align:start position:0%
before I create my linked statements we
are<00:22:37.800><c> actually</c><00:22:38.130><c> creating</c><00:22:38.550><c> a</c><00:22:38.610><c> new</c><00:22:38.790><c> object</c><00:22:39.030><c> in</c>

00:22:39.590 --> 00:22:39.600 align:start position:0%
are actually creating a new object in
 

00:22:39.600 --> 00:22:42.230 align:start position:0%
are actually creating a new object in
intermediate<00:22:40.260><c> language</c><00:22:40.560><c> codes</c><00:22:41.040><c> of</c><00:22:41.280><c> the</c><00:22:41.340><c> type</c>

00:22:42.230 --> 00:22:42.240 align:start position:0%
intermediate language codes of the type
 

00:22:42.240 --> 00:22:45.800 align:start position:0%
intermediate language codes of the type
display<00:22:43.080><c> class</c><00:22:43.530><c> tree</c><00:22:43.830><c> and</c><00:22:44.100><c> we</c><00:22:45.090><c> are</c><00:22:45.270><c> storing</c>

00:22:45.800 --> 00:22:45.810 align:start position:0%
display class tree and we are storing
 

00:22:45.810 --> 00:22:48.530 align:start position:0%
display class tree and we are storing
two<00:22:46.650><c> integers</c><00:22:47.160><c> in</c><00:22:47.340><c> that</c><00:22:47.490><c> objects</c><00:22:47.970><c> namely</c><00:22:48.180><c> the</c>

00:22:48.530 --> 00:22:48.540 align:start position:0%
two integers in that objects namely the
 

00:22:48.540 --> 00:22:50.150 align:start position:0%
two integers in that objects namely the
minimum<00:22:48.870><c> and</c><00:22:49.020><c> the</c><00:22:49.140><c> maximum</c><00:22:49.170><c> the</c><00:22:49.680><c> thing</c><00:22:49.860><c> is</c><00:22:49.980><c> we</c>

00:22:50.150 --> 00:22:50.160 align:start position:0%
minimum and the maximum the thing is we
 

00:22:50.160 --> 00:22:52.640 align:start position:0%
minimum and the maximum the thing is we
are<00:22:50.310><c> capturing</c><00:22:50.850><c> the</c><00:22:51.090><c> values</c><00:22:51.510><c> of</c><00:22:51.780><c> the</c><00:22:52.380><c> minimum</c>

00:22:52.640 --> 00:22:52.650 align:start position:0%
are capturing the values of the minimum
 

00:22:52.650 --> 00:22:55.670 align:start position:0%
are capturing the values of the minimum
and<00:22:52.860><c> the</c><00:22:52.950><c> maximum</c><00:22:53.030><c> because</c><00:22:54.030><c> in</c><00:22:54.870><c> between</c><00:22:55.170><c> here</c>

00:22:55.670 --> 00:22:55.680 align:start position:0%
and the maximum because in between here
 

00:22:55.680 --> 00:22:57.440 align:start position:0%
and the maximum because in between here
some<00:22:56.130><c> things</c><00:22:56.340><c> could</c><00:22:56.550><c> happen</c><00:22:56.880><c> to</c><00:22:57.000><c> my</c><00:22:57.150><c> code</c><00:22:57.420><c> and</c>

00:22:57.440 --> 00:22:57.450 align:start position:0%
some things could happen to my code and
 

00:22:57.450 --> 00:22:59.870 align:start position:0%
some things could happen to my code and
I<00:22:57.690><c> want</c><00:22:57.900><c> to</c><00:22:57.990><c> store</c><00:22:58.260><c> the</c><00:22:58.500><c> actual</c><00:22:59.130><c> minimum</c><00:22:59.520><c> and</c>

00:22:59.870 --> 00:22:59.880 align:start position:0%
I want to store the actual minimum and
 

00:22:59.880 --> 00:23:01.430 align:start position:0%
I want to store the actual minimum and
the<00:22:59.970><c> maximum</c><00:23:00.000><c> that</c><00:23:00.510><c> I</c><00:23:00.570><c> received</c><00:23:01.020><c> when</c><00:23:01.260><c> this</c>

00:23:01.430 --> 00:23:01.440 align:start position:0%
the maximum that I received when this
 

00:23:01.440 --> 00:23:02.930 align:start position:0%
the maximum that I received when this
method<00:23:01.650><c> was</c><00:23:01.980><c> first</c><00:23:02.190><c> called</c><00:23:02.490><c> and</c><00:23:02.700><c> when</c><00:23:02.790><c> this</c>

00:23:02.930 --> 00:23:02.940 align:start position:0%
method was first called and when this
 

00:23:02.940 --> 00:23:04.850 align:start position:0%
method was first called and when this
query<00:23:03.180><c> was</c><00:23:03.390><c> set</c><00:23:03.630><c> up</c><00:23:03.660><c> and</c><00:23:04.170><c> only</c><00:23:04.620><c> when</c><00:23:04.770><c> the</c>

00:23:04.850 --> 00:23:04.860 align:start position:0%
query was set up and only when the
 

00:23:04.860 --> 00:23:06.740 align:start position:0%
query was set up and only when the
average<00:23:05.160><c> runs</c><00:23:05.490><c> I</c><00:23:05.760><c> will</c><00:23:06.060><c> actually</c><00:23:06.240><c> use</c><00:23:06.600><c> those</c>

00:23:06.740 --> 00:23:06.750 align:start position:0%
average runs I will actually use those
 

00:23:06.750 --> 00:23:09.500 align:start position:0%
average runs I will actually use those
variables<00:23:07.320><c> so</c><00:23:07.500><c> the</c><00:23:07.620><c> reason</c><00:23:07.890><c> for</c><00:23:08.010><c> that</c><00:23:08.160><c> or</c><00:23:09.150><c> the</c>

00:23:09.500 --> 00:23:09.510 align:start position:0%
variables so the reason for that or the
 

00:23:09.510 --> 00:23:11.720 align:start position:0%
variables so the reason for that or the
the<00:23:10.380><c> reasons</c><00:23:10.680><c> for</c><00:23:10.740><c> this</c><00:23:10.980><c> hidden</c><00:23:11.340><c> class</c><00:23:11.550><c> and</c>

00:23:11.720 --> 00:23:11.730 align:start position:0%
the reasons for this hidden class and
 

00:23:11.730 --> 00:23:13.220 align:start position:0%
the reasons for this hidden class and
the<00:23:11.820><c> capturing</c><00:23:12.180><c> of</c><00:23:12.330><c> the</c><00:23:12.450><c> values</c><00:23:12.780><c> is</c><00:23:12.990><c> that</c>

00:23:13.220 --> 00:23:13.230 align:start position:0%
the capturing of the values is that
 

00:23:13.230 --> 00:23:15.410 align:start position:0%
the capturing of the values is that
anything<00:23:13.590><c> can</c><00:23:13.770><c> happen</c><00:23:14.040><c> in</c><00:23:14.340><c> between</c><00:23:14.490><c> here</c><00:23:14.970><c> but</c>

00:23:15.410 --> 00:23:15.420 align:start position:0%
anything can happen in between here but
 

00:23:15.420 --> 00:23:16.880 align:start position:0%
anything can happen in between here but
I<00:23:15.450><c> still</c><00:23:15.570><c> want</c><00:23:15.930><c> to</c><00:23:15.990><c> have</c><00:23:16.200><c> the</c><00:23:16.350><c> original</c>

00:23:16.880 --> 00:23:16.890 align:start position:0%
I still want to have the original
 

00:23:16.890 --> 00:23:18.350 align:start position:0%
I still want to have the original
minimum<00:23:17.190><c> and</c><00:23:17.370><c> maximum</c><00:23:17.670><c> when</c><00:23:17.910><c> I</c><00:23:18.000><c> call</c><00:23:18.210><c> the</c>

00:23:18.350 --> 00:23:18.360 align:start position:0%
minimum and maximum when I call the
 

00:23:18.360 --> 00:23:20.540 align:start position:0%
minimum and maximum when I call the
average<00:23:18.510><c> method</c><00:23:18.960><c> in</c><00:23:19.230><c> there</c><00:23:19.440><c> so</c><00:23:20.130><c> that's</c><00:23:20.460><c> a</c>

00:23:20.540 --> 00:23:20.550 align:start position:0%
average method in there so that's a
 

00:23:20.550 --> 00:23:23.030 align:start position:0%
average method in there so that's a
hidden<00:23:20.790><c> allocation</c><00:23:21.390><c> and</c><00:23:21.600><c> again</c><00:23:21.990><c> if</c><00:23:22.230><c> you</c><00:23:22.920><c> have</c>

00:23:23.030 --> 00:23:23.040 align:start position:0%
hidden allocation and again if you have
 

00:23:23.040 --> 00:23:24.800 align:start position:0%
hidden allocation and again if you have
a<00:23:23.070><c> lot</c><00:23:23.280><c> of</c><00:23:23.310><c> those</c><00:23:23.640><c> you</c><00:23:24.000><c> could</c><00:23:24.270><c> incur</c><00:23:24.570><c> some</c>

00:23:24.800 --> 00:23:24.810 align:start position:0%
a lot of those you could incur some
 

00:23:24.810 --> 00:23:26.600 align:start position:0%
a lot of those you could incur some
garbage<00:23:25.140><c> collection</c><00:23:25.680><c> when</c><00:23:26.190><c> it's</c><00:23:26.370><c> not</c>

00:23:26.600 --> 00:23:26.610 align:start position:0%
garbage collection when it's not
 

00:23:26.610 --> 00:23:28.910 align:start position:0%
garbage collection when it's not
actually<00:23:27.030><c> needed</c><00:23:27.360><c> so</c><00:23:27.870><c> probably</c><00:23:28.320><c> this</c><00:23:28.680><c> could</c>

00:23:28.910 --> 00:23:28.920 align:start position:0%
actually needed so probably this could
 

00:23:28.920 --> 00:23:30.620 align:start position:0%
actually needed so probably this could
be<00:23:29.040><c> a</c><00:23:29.070><c> really</c><00:23:29.400><c> nice</c><00:23:29.580><c> one</c><00:23:29.760><c> to</c><00:23:29.940><c> rewrite</c><00:23:30.360><c> with</c><00:23:30.600><c> a</c>

00:23:30.620 --> 00:23:30.630 align:start position:0%
be a really nice one to rewrite with a
 

00:23:30.630 --> 00:23:33.440 align:start position:0%
be a really nice one to rewrite with a
simple<00:23:31.050><c> for</c><00:23:31.320><c> loop</c><00:23:31.350><c> and</c><00:23:32.120><c> pick</c><00:23:33.120><c> the</c><00:23:33.270><c> right</c>

00:23:33.440 --> 00:23:33.450 align:start position:0%
simple for loop and pick the right
 

00:23:33.450 --> 00:23:35.120 align:start position:0%
simple for loop and pick the right
variables<00:23:33.990><c> and</c><00:23:34.230><c> then</c><00:23:34.350><c> do</c><00:23:34.470><c> the</c><00:23:34.620><c> average</c><00:23:34.920><c> of</c>

00:23:35.120 --> 00:23:35.130 align:start position:0%
variables and then do the average of
 

00:23:35.130 --> 00:23:37.840 align:start position:0%
variables and then do the average of
that<00:23:35.250><c> one</c><00:23:35.460><c> and</c><00:23:35.670><c> not</c><00:23:36.270><c> use</c><00:23:36.480><c> link</c><00:23:36.750><c> in</c><00:23:36.960><c> this</c><00:23:37.140><c> case</c>

00:23:37.840 --> 00:23:37.850 align:start position:0%
that one and not use link in this case
 

00:23:37.850 --> 00:23:40.580 align:start position:0%
that one and not use link in this case
there's<00:23:38.850><c> a</c><00:23:38.910><c> couple</c><00:23:39.090><c> more</c><00:23:39.390><c> if</c><00:23:39.630><c> you</c><00:23:39.780><c> do</c><00:23:39.960><c> tasks</c>

00:23:40.580 --> 00:23:40.590 align:start position:0%
there's a couple more if you do tasks
 

00:23:40.590 --> 00:23:43.430 align:start position:0%
there's a couple more if you do tasks
for<00:23:40.770><c> example</c><00:23:40.800><c> if</c><00:23:41.340><c> you</c><00:23:41.460><c> say</c><00:23:41.670><c> a</c><00:23:41.880><c> test</c><00:23:42.120><c> run</c><00:23:42.600><c> there</c>

00:23:43.430 --> 00:23:43.440 align:start position:0%
for example if you say a test run there
 

00:23:43.440 --> 00:23:45.410 align:start position:0%
for example if you say a test run there
will<00:23:43.590><c> be</c><00:23:43.650><c> a</c><00:23:43.980><c> lambda</c><00:23:44.280><c> created</c><00:23:44.850><c> here</c><00:23:45.150><c> well</c><00:23:45.390><c> that</c>

00:23:45.410 --> 00:23:45.420 align:start position:0%
will be a lambda created here well that
 

00:23:45.420 --> 00:23:48.410 align:start position:0%
will be a lambda created here well that
lambda<00:23:45.810><c> will</c><00:23:46.140><c> also</c><00:23:46.530><c> at</c><00:23:46.830><c> some</c><00:23:47.400><c> point</c><00:23:47.700><c> create</c><00:23:48.390><c> a</c>

00:23:48.410 --> 00:23:48.420 align:start position:0%
lambda will also at some point create a
 

00:23:48.420 --> 00:23:51.830 align:start position:0%
lambda will also at some point create a
new<00:23:48.740><c> new</c><00:23:49.740><c> objects</c><00:23:50.220><c> of</c><00:23:50.400><c> type</c><00:23:50.480><c> display</c><00:23:51.480><c> class</c>

00:23:51.830 --> 00:23:51.840 align:start position:0%
new new objects of type display class
 

00:23:51.840 --> 00:23:53.750 align:start position:0%
new new objects of type display class
for<00:23:52.200><c> in</c><00:23:52.380><c> this</c><00:23:52.500><c> case</c><00:23:52.740><c> again</c><00:23:53.040><c> a</c><00:23:53.250><c> compiler</c>

00:23:53.750 --> 00:23:53.760 align:start position:0%
for in this case again a compiler
 

00:23:53.760 --> 00:23:58.100 align:start position:0%
for in this case again a compiler
generated<00:23:54.560><c> class</c><00:23:55.560><c> and</c><00:23:55.890><c> an</c><00:23:57.110><c> object</c>

00:23:58.100 --> 00:23:58.110 align:start position:0%
generated class and an object
 

00:23:58.110 --> 00:24:00.080 align:start position:0%
generated class and an object
instantiation<00:23:58.380><c> that</c><00:23:58.920><c> I</c><00:23:58.950><c> have</c><00:23:59.220><c> here</c><00:23:59.460><c> that</c><00:23:59.880><c> will</c>

00:24:00.080 --> 00:24:00.090 align:start position:0%
instantiation that I have here that will
 

00:24:00.090 --> 00:24:01.700 align:start position:0%
instantiation that I have here that will
store<00:24:00.330><c> some</c><00:24:00.630><c> of</c><00:24:00.660><c> the</c><00:24:00.870><c> variables</c><00:24:01.320><c> that</c><00:24:01.350><c> I</c><00:24:01.470><c> will</c>

00:24:01.700 --> 00:24:01.710 align:start position:0%
store some of the variables that I will
 

00:24:01.710 --> 00:24:03.860 align:start position:0%
store some of the variables that I will
need<00:24:01.920><c> when</c><00:24:02.190><c> I'm</c><00:24:02.340><c> running</c><00:24:02.700><c> this</c><00:24:02.850><c> lambda</c><00:24:03.150><c> later</c>

00:24:03.860 --> 00:24:03.870 align:start position:0%
need when I'm running this lambda later
 

00:24:03.870 --> 00:24:07.160 align:start position:0%
need when I'm running this lambda later
on<00:24:04.110><c> so</c><00:24:04.650><c> all</c><00:24:04.860><c> hidden</c><00:24:05.100><c> allocations</c><00:24:05.820><c> and</c><00:24:06.060><c> some</c><00:24:07.020><c> of</c>

00:24:07.160 --> 00:24:07.170 align:start position:0%
on so all hidden allocations and some of
 

00:24:07.170 --> 00:24:08.990 align:start position:0%
on so all hidden allocations and some of
those<00:24:07.320><c> we</c><00:24:07.590><c> don't</c><00:24:07.860><c> actually</c><00:24:08.070><c> need</c><00:24:08.460><c> in</c><00:24:08.640><c> our</c><00:24:08.790><c> code</c>

00:24:08.990 --> 00:24:09.000 align:start position:0%
those we don't actually need in our code
 

00:24:09.000 --> 00:24:11.120 align:start position:0%
those we don't actually need in our code
and<00:24:09.270><c> could</c><00:24:09.690><c> probably</c><00:24:09.960><c> be</c><00:24:10.200><c> rewritten</c><00:24:10.650><c> to</c><00:24:10.980><c> make</c>

00:24:11.120 --> 00:24:11.130 align:start position:0%
and could probably be rewritten to make
 

00:24:11.130 --> 00:24:12.980 align:start position:0%
and could probably be rewritten to make
the<00:24:11.310><c> work</c><00:24:11.550><c> on</c><00:24:11.820><c> the</c><00:24:11.970><c> garbage</c><00:24:12.330><c> collector</c><00:24:12.780><c> a</c>

00:24:12.980 --> 00:24:12.990 align:start position:0%
the work on the garbage collector a
 

00:24:12.990 --> 00:24:15.320 align:start position:0%
the work on the garbage collector a
little<00:24:13.560><c> bit</c><00:24:13.710><c> easier</c><00:24:14.070><c> and</c><00:24:14.280><c> why</c><00:24:14.550><c> is</c><00:24:14.610><c> my</c><00:24:14.700><c> toolbox</c>

00:24:15.320 --> 00:24:15.330 align:start position:0%
little bit easier and why is my toolbox
 

00:24:15.330 --> 00:24:20.020 align:start position:0%
little bit easier and why is my toolbox
initializing<00:24:16.140><c> yeah</c><00:24:16.410><c> okay</c><00:24:17.480><c> so</c><00:24:18.480><c> back</c><00:24:18.960><c> to</c><00:24:19.020><c> slides</c>

00:24:20.020 --> 00:24:20.030 align:start position:0%
initializing yeah okay so back to slides
 

00:24:20.030 --> 00:24:23.380 align:start position:0%
initializing yeah okay so back to slides
I'll<00:24:21.030><c> have</c><00:24:21.210><c> to</c><00:24:21.360><c> find</c><00:24:22.110><c> them</c><00:24:22.290><c> here</c><00:24:22.500><c> yeah</c>

00:24:23.380 --> 00:24:23.390 align:start position:0%
I'll have to find them here yeah
 

00:24:23.390 --> 00:24:27.770 align:start position:0%
I'll have to find them here yeah
so<00:24:24.410><c> we've</c><00:24:25.410><c> seen</c><00:24:25.650><c> hidden</c><00:24:25.950><c> allocations</c><00:24:26.720><c> but</c><00:24:27.720><c> I</c>

00:24:27.770 --> 00:24:27.780 align:start position:0%
so we've seen hidden allocations but I
 

00:24:27.780 --> 00:24:30.290 align:start position:0%
so we've seen hidden allocations but I
want<00:24:28.080><c> to</c><00:24:28.170><c> make</c><00:24:28.290><c> a</c><00:24:28.320><c> little</c><00:24:28.560><c> side</c><00:24:28.860><c> note</c><00:24:28.920><c> here</c><00:24:29.460><c> I'm</c>

00:24:30.290 --> 00:24:30.300 align:start position:0%
want to make a little side note here I'm
 

00:24:30.300 --> 00:24:32.810 align:start position:0%
want to make a little side note here I'm
a<00:24:30.570><c> talk</c><00:24:30.840><c> to</c><00:24:31.020><c> you</c><00:24:31.140><c> about</c><00:24:31.380><c> not</c><00:24:32.040><c> doing</c><00:24:32.490><c> those</c>

00:24:32.810 --> 00:24:32.820 align:start position:0%
a talk to you about not doing those
 

00:24:32.820 --> 00:24:34.670 align:start position:0%
a talk to you about not doing those
hidden<00:24:33.150><c> allocations</c><00:24:33.750><c> or</c><00:24:33.930><c> optimizing</c><00:24:34.650><c> your</c>

00:24:34.670 --> 00:24:34.680 align:start position:0%
hidden allocations or optimizing your
 

00:24:34.680 --> 00:24:38.000 align:start position:0%
hidden allocations or optimizing your
params<00:24:35.550><c> arrays</c><00:24:36.030><c> or</c><00:24:36.360><c> rewriting</c><00:24:37.200><c> linked</c><00:24:37.590><c> to</c><00:24:37.740><c> for</c>

00:24:38.000 --> 00:24:38.010 align:start position:0%
params arrays or rewriting linked to for
 

00:24:38.010 --> 00:24:40.730 align:start position:0%
params arrays or rewriting linked to for
statements<00:24:38.580><c> and</c><00:24:38.760><c> so</c><00:24:38.910><c> on</c><00:24:39.140><c> it</c><00:24:40.140><c> may</c><00:24:40.500><c> not</c><00:24:40.680><c> even</c>

00:24:40.730 --> 00:24:40.740 align:start position:0%
statements and so on it may not even
 

00:24:40.740 --> 00:24:42.950 align:start position:0%
statements and so on it may not even
matter<00:24:41.160><c> in</c><00:24:41.370><c> your</c><00:24:41.400><c> codes</c><00:24:41.820><c> if</c><00:24:42.120><c> something</c><00:24:42.810><c> like</c>

00:24:42.950 --> 00:24:42.960 align:start position:0%
matter in your codes if something like
 

00:24:42.960 --> 00:24:44.900 align:start position:0%
matter in your codes if something like
that<00:24:43.140><c> happens</c><00:24:43.560><c> and</c><00:24:43.770><c> is</c><00:24:43.860><c> only</c><00:24:44.100><c> called</c><00:24:44.340><c> one</c>

00:24:44.900 --> 00:24:44.910 align:start position:0%
that happens and is only called one
 

00:24:44.910 --> 00:24:46.790 align:start position:0%
that happens and is only called one
the<00:24:45.150><c> garbage</c><00:24:45.390><c> collector</c><00:24:45.960><c> will</c><00:24:46.110><c> run</c><00:24:46.320><c> happily</c>

00:24:46.790 --> 00:24:46.800 align:start position:0%
the garbage collector will run happily
 

00:24:46.800 --> 00:24:48.710 align:start position:0%
the garbage collector will run happily
and<00:24:47.070><c> will</c><00:24:47.250><c> be</c><00:24:47.370><c> perfectly</c><00:24:47.910><c> fine</c><00:24:48.150><c> in</c><00:24:48.330><c> cleaning</c>

00:24:48.710 --> 00:24:48.720 align:start position:0%
and will be perfectly fine in cleaning
 

00:24:48.720 --> 00:24:50.660 align:start position:0%
and will be perfectly fine in cleaning
up<00:24:48.810><c> the</c><00:24:48.930><c> memory</c><00:24:49.230><c> that</c><00:24:49.350><c> you</c><00:24:49.530><c> have</c><00:24:49.710><c> so</c><00:24:50.250><c> don't</c><00:24:50.280><c> do</c>

00:24:50.660 --> 00:24:50.670 align:start position:0%
up the memory that you have so don't do
 

00:24:50.670 --> 00:24:53.360 align:start position:0%
up the memory that you have so don't do
premature<00:24:51.180><c> optimization</c><00:24:51.620><c> don't</c><00:24:52.620><c> go</c><00:24:52.860><c> home</c><00:24:53.070><c> and</c>

00:24:53.360 --> 00:24:53.370 align:start position:0%
premature optimization don't go home and
 

00:24:53.370 --> 00:24:55.370 align:start position:0%
premature optimization don't go home and
rewrite<00:24:53.730><c> all</c><00:24:53.940><c> your</c><00:24:54.300><c> linked</c><00:24:54.510><c> statements</c><00:24:55.020><c> into</c>

00:24:55.370 --> 00:24:55.380 align:start position:0%
rewrite all your linked statements into
 

00:24:55.380 --> 00:24:57.830 align:start position:0%
rewrite all your linked statements into
regular<00:24:56.010><c> loops</c><00:24:56.280><c> always</c><00:24:57.000><c> measure</c><00:24:57.330><c> always</c>

00:24:57.830 --> 00:24:57.840 align:start position:0%
regular loops always measure always
 

00:24:57.840 --> 00:24:59.900 align:start position:0%
regular loops always measure always
profile<00:24:58.350><c> and</c><00:24:58.590><c> see</c><00:24:58.830><c> whatever</c><00:24:59.100><c> is</c><00:24:59.370><c> happening</c><00:24:59.730><c> in</c>

00:24:59.900 --> 00:24:59.910 align:start position:0%
profile and see whatever is happening in
 

00:24:59.910 --> 00:25:01.850 align:start position:0%
profile and see whatever is happening in
your<00:25:00.090><c> codes</c><00:25:00.390><c> there's</c><00:25:01.230><c> a</c><00:25:01.320><c> couple</c><00:25:01.620><c> of</c><00:25:01.680><c> things</c>

00:25:01.850 --> 00:25:01.860 align:start position:0%
your codes there's a couple of things
 

00:25:01.860 --> 00:25:03.590 align:start position:0%
your codes there's a couple of things
that<00:25:02.070><c> you</c><00:25:02.250><c> will</c><00:25:02.400><c> need</c><00:25:02.610><c> to</c><00:25:02.670><c> know</c><00:25:02.940><c> before</c><00:25:03.450><c> you</c>

00:25:03.590 --> 00:25:03.600 align:start position:0%
that you will need to know before you
 

00:25:03.600 --> 00:25:05.540 align:start position:0%
that you will need to know before you
start<00:25:03.660><c> optimizing</c><00:25:04.080><c> and</c><00:25:04.740><c> that</c><00:25:05.190><c> is</c><00:25:05.280><c> how</c>

00:25:05.540 --> 00:25:05.550 align:start position:0%
start optimizing and that is how
 

00:25:05.550 --> 00:25:07.850 align:start position:0%
start optimizing and that is how
frequently<00:25:06.120><c> are</c><00:25:06.210><c> you</c><00:25:06.540><c> allocating</c><00:25:07.140><c> if</c><00:25:07.320><c> it's</c>

00:25:07.850 --> 00:25:07.860 align:start position:0%
frequently are you allocating if it's
 

00:25:07.860 --> 00:25:10.460 align:start position:0%
frequently are you allocating if it's
millions<00:25:08.730><c> of</c><00:25:08.880><c> times</c><00:25:09.090><c> per</c><00:25:09.300><c> seconds</c><00:25:09.900><c> then</c><00:25:10.170><c> maybe</c>

00:25:10.460 --> 00:25:10.470 align:start position:0%
millions of times per seconds then maybe
 

00:25:10.470 --> 00:25:12.590 align:start position:0%
millions of times per seconds then maybe
you<00:25:11.130><c> want</c><00:25:11.310><c> to</c><00:25:11.370><c> look</c><00:25:11.520><c> into</c><00:25:11.820><c> optimizing</c><00:25:12.120><c> nets</c>

00:25:12.590 --> 00:25:12.600 align:start position:0%
you want to look into optimizing nets
 

00:25:12.600 --> 00:25:14.810 align:start position:0%
you want to look into optimizing nets
how<00:25:13.260><c> frequently</c><00:25:13.890><c> is</c><00:25:13.950><c> the</c><00:25:14.010><c> garbage</c><00:25:14.400><c> collector</c>

00:25:14.810 --> 00:25:14.820 align:start position:0%
how frequently is the garbage collector
 

00:25:14.820 --> 00:25:16.670 align:start position:0%
how frequently is the garbage collector
running<00:25:15.150><c> if</c><00:25:15.300><c> it</c><00:25:15.540><c> runs</c><00:25:15.720><c> every</c><00:25:16.080><c> second</c><00:25:16.500><c> or</c><00:25:16.650><c> every</c>

00:25:16.670 --> 00:25:16.680 align:start position:0%
running if it runs every second or every
 

00:25:16.680 --> 00:25:18.380 align:start position:0%
running if it runs every second or every
half<00:25:16.920><c> a</c><00:25:17.220><c> second</c><00:25:17.610><c> you</c><00:25:17.760><c> probably</c><00:25:18.150><c> want</c><00:25:18.330><c> to</c>

00:25:18.380 --> 00:25:18.390 align:start position:0%
half a second you probably want to
 

00:25:18.390 --> 00:25:20.990 align:start position:0%
half a second you probably want to
optimize<00:25:18.660><c> that</c><00:25:18.990><c> as</c><00:25:19.110><c> well</c><00:25:19.320><c> what</c><00:25:20.190><c> generation</c><00:25:20.610><c> do</c>

00:25:20.990 --> 00:25:21.000 align:start position:0%
optimize that as well what generation do
 

00:25:21.000 --> 00:25:22.940 align:start position:0%
optimize that as well what generation do
our<00:25:21.150><c> objects</c><00:25:21.570><c> end</c><00:25:21.780><c> on</c><00:25:21.990><c> that's</c><00:25:22.530><c> also</c><00:25:22.860><c> an</c>

00:25:22.940 --> 00:25:22.950 align:start position:0%
our objects end on that's also an
 

00:25:22.950 --> 00:25:24.590 align:start position:0%
our objects end on that's also an
important<00:25:23.430><c> one</c><00:25:23.550><c> if</c><00:25:23.700><c> garbage</c><00:25:24.060><c> collection</c><00:25:24.510><c> is</c>

00:25:24.590 --> 00:25:24.600 align:start position:0%
important one if garbage collection is
 

00:25:24.600 --> 00:25:26.870 align:start position:0%
important one if garbage collection is
always<00:25:24.930><c> on</c><00:25:25.080><c> gen</c><00:25:25.290><c> zero</c><00:25:25.560><c> it</c><00:25:25.920><c> will</c><00:25:26.310><c> be</c><00:25:26.430><c> perfectly</c>

00:25:26.870 --> 00:25:26.880 align:start position:0%
always on gen zero it will be perfectly
 

00:25:26.880 --> 00:25:29.090 align:start position:0%
always on gen zero it will be perfectly
fine<00:25:27.180><c> because</c><00:25:27.360><c> gen</c><00:25:27.750><c> zero</c><00:25:28.020><c> is</c><00:25:28.170><c> typically</c><00:25:28.560><c> for</c>

00:25:29.090 --> 00:25:29.100 align:start position:0%
fine because gen zero is typically for
 

00:25:29.100 --> 00:25:30.500 align:start position:0%
fine because gen zero is typically for
objects<00:25:29.550><c> that</c><00:25:29.670><c> have</c><00:25:29.970><c> not</c><00:25:30.270><c> a</c><00:25:30.300><c> lot</c><00:25:30.480><c> of</c>

00:25:30.500 --> 00:25:30.510 align:start position:0%
objects that have not a lot of
 

00:25:30.510 --> 00:25:31.430 align:start position:0%
objects that have not a lot of
references

00:25:31.430 --> 00:25:31.440 align:start position:0%
references
 

00:25:31.440 --> 00:25:34.520 align:start position:0%
references
so<00:25:31.830><c> garbage</c><00:25:32.340><c> collector</c><00:25:32.730><c> will</c><00:25:33.030><c> be</c><00:25:33.200><c> pretty</c><00:25:34.200><c> fast</c>

00:25:34.520 --> 00:25:34.530 align:start position:0%
so garbage collector will be pretty fast
 

00:25:34.530 --> 00:25:37.250 align:start position:0%
so garbage collector will be pretty fast
on<00:25:34.680><c> that</c><00:25:34.860><c> one</c><00:25:35.070><c> and</c><00:25:35.370><c> also</c><00:25:35.940><c> are</c><00:25:36.210><c> the</c><00:25:36.660><c> allocations</c>

00:25:37.250 --> 00:25:37.260 align:start position:0%
on that one and also are the allocations
 

00:25:37.260 --> 00:25:39.800 align:start position:0%
on that one and also are the allocations
in<00:25:37.470><c> the</c><00:25:37.560><c> collections</c><00:25:38.040><c> introducing</c><00:25:38.790><c> pauses</c><00:25:39.240><c> is</c>

00:25:39.800 --> 00:25:39.810 align:start position:0%
in the collections introducing pauses is
 

00:25:39.810 --> 00:25:41.690 align:start position:0%
in the collections introducing pauses is
the<00:25:40.260><c> fact</c><00:25:40.500><c> that</c><00:25:40.590><c> we</c><00:25:40.830><c> allocated</c><00:25:41.370><c> a</c><00:25:41.400><c> lot</c><00:25:41.550><c> of</c>

00:25:41.690 --> 00:25:41.700 align:start position:0%
the fact that we allocated a lot of
 

00:25:41.700 --> 00:25:43.880 align:start position:0%
the fact that we allocated a lot of
memory<00:25:42.060><c> causing</c><00:25:42.840><c> pauses</c><00:25:43.290><c> by</c><00:25:43.470><c> the</c><00:25:43.530><c> garbage</c>

00:25:43.880 --> 00:25:43.890 align:start position:0%
memory causing pauses by the garbage
 

00:25:43.890 --> 00:25:45.680 align:start position:0%
memory causing pauses by the garbage
collector<00:25:44.040><c> or</c><00:25:44.580><c> not</c><00:25:44.790><c> that's</c><00:25:45.150><c> also</c><00:25:45.450><c> something</c>

00:25:45.680 --> 00:25:45.690 align:start position:0%
collector or not that's also something
 

00:25:45.690 --> 00:25:47.870 align:start position:0%
collector or not that's also something
you<00:25:45.900><c> want</c><00:25:46.080><c> to</c><00:25:46.200><c> know</c><00:25:46.350><c> you</c><00:25:46.980><c> could</c><00:25:47.130><c> use</c><00:25:47.310><c> profilers</c>

00:25:47.870 --> 00:25:47.880 align:start position:0%
you want to know you could use profilers
 

00:25:47.880 --> 00:25:50.000 align:start position:0%
you want to know you could use profilers
for<00:25:48.090><c> debts</c><00:25:48.270><c> but</c><00:25:48.840><c> those</c><00:25:49.020><c> four</c><00:25:49.290><c> metrics</c><00:25:49.710><c> you</c><00:25:49.890><c> can</c>

00:25:50.000 --> 00:25:50.010 align:start position:0%
for debts but those four metrics you can
 

00:25:50.010 --> 00:25:51.800 align:start position:0%
for debts but those four metrics you can
also<00:25:50.160><c> get</c><00:25:50.490><c> them</c><00:25:50.670><c> from</c><00:25:50.700><c> performance</c><00:25:51.600><c> counters</c>

00:25:51.800 --> 00:25:51.810 align:start position:0%
also get them from performance counters
 

00:25:51.810 --> 00:25:54.350 align:start position:0%
also get them from performance counters
in<00:25:52.260><c> Windows</c><00:25:52.650><c> so</c><00:25:53.280><c> if</c><00:25:53.550><c> you</c><00:25:53.700><c> just</c><00:25:53.940><c> want</c><00:25:54.150><c> to</c><00:25:54.210><c> look</c>

00:25:54.350 --> 00:25:54.360 align:start position:0%
in Windows so if you just want to look
 

00:25:54.360 --> 00:25:55.820 align:start position:0%
in Windows so if you just want to look
at<00:25:54.480><c> how</c><00:25:54.660><c> your</c><00:25:54.870><c> application</c><00:25:55.410><c> is</c><00:25:55.470><c> behaving</c>

00:25:55.820 --> 00:25:55.830 align:start position:0%
at how your application is behaving
 

00:25:55.830 --> 00:25:58.130 align:start position:0%
at how your application is behaving
first<00:25:56.580><c> look</c><00:25:56.790><c> at</c><00:25:56.940><c> those</c><00:25:57.150><c> and</c><00:25:57.450><c> if</c><00:25:57.540><c> those</c><00:25:57.720><c> reveal</c>

00:25:58.130 --> 00:25:58.140 align:start position:0%
first look at those and if those reveal
 

00:25:58.140 --> 00:26:00.050 align:start position:0%
first look at those and if those reveal
something<00:25:58.440><c> that</c><00:25:58.740><c> worries</c><00:25:59.040><c> you</c><00:25:59.250><c> then</c><00:25:59.820><c> start</c>

00:26:00.050 --> 00:26:00.060 align:start position:0%
something that worries you then start
 

00:26:00.060 --> 00:26:02.180 align:start position:0%
something that worries you then start
profiling<00:26:00.660><c> maybe</c><00:26:00.870><c> but</c><00:26:01.200><c> don't</c><00:26:01.440><c> go</c><00:26:01.620><c> prematurely</c>

00:26:02.180 --> 00:26:02.190 align:start position:0%
profiling maybe but don't go prematurely
 

00:26:02.190 --> 00:26:04.720 align:start position:0%
profiling maybe but don't go prematurely
optimizing<00:26:02.940><c> all</c><00:26:03.090><c> the</c><00:26:03.210><c> code</c><00:26:03.390><c> that</c><00:26:03.420><c> you</c><00:26:03.720><c> have</c>

00:26:04.720 --> 00:26:04.730 align:start position:0%
optimizing all the code that you have
 

00:26:04.730 --> 00:26:08.150 align:start position:0%
optimizing all the code that you have
right<00:26:05.730><c> I</c><00:26:06.240><c> have</c><00:26:06.630><c> another</c><00:26:06.840><c> demo</c><00:26:07.230><c> here</c><00:26:07.500><c> where</c><00:26:08.130><c> I</c>

00:26:08.150 --> 00:26:08.160 align:start position:0%
right I have another demo here where I
 

00:26:08.160 --> 00:26:10.580 align:start position:0%
right I have another demo here where I
say<00:26:08.490><c> always</c><00:26:08.880><c> be</c><00:26:09.270><c> measuring</c><00:26:09.720><c> always</c><00:26:10.110><c> look</c><00:26:10.380><c> into</c>

00:26:10.580 --> 00:26:10.590 align:start position:0%
say always be measuring always look into
 

00:26:10.590 --> 00:26:12.050 align:start position:0%
say always be measuring always look into
the<00:26:11.220><c> different</c><00:26:11.580><c> things</c><00:26:11.760><c> that</c><00:26:11.850><c> you</c><00:26:12.030><c> have</c>

00:26:12.050 --> 00:26:12.060 align:start position:0%
the different things that you have
 

00:26:12.060 --> 00:26:14.960 align:start position:0%
the different things that you have
profile<00:26:12.780><c> your</c><00:26:12.930><c> codes</c><00:26:13.200><c> and</c><00:26:13.410><c> look</c><00:26:14.340><c> at</c><00:26:14.460><c> improving</c>

00:26:14.960 --> 00:26:14.970 align:start position:0%
profile your codes and look at improving
 

00:26:14.970 --> 00:26:17.000 align:start position:0%
profile your codes and look at improving
things<00:26:15.150><c> I</c><00:26:15.450><c> don't</c><00:26:16.170><c> know</c><00:26:16.410><c> if</c><00:26:16.530><c> you</c><00:26:16.650><c> know</c><00:26:16.770><c> this</c>

00:26:17.000 --> 00:26:17.010 align:start position:0%
things I don't know if you know this
 

00:26:17.010 --> 00:26:19.100 align:start position:0%
things I don't know if you know this
application<00:26:17.700><c> it's</c><00:26:17.850><c> called</c><00:26:18.120><c> untapped</c><00:26:18.600><c> who</c><00:26:19.020><c> is</c>

00:26:19.100 --> 00:26:19.110 align:start position:0%
application it's called untapped who is
 

00:26:19.110 --> 00:26:21.740 align:start position:0%
application it's called untapped who is
on<00:26:19.260><c> untappd</c><00:26:19.680><c> any</c><00:26:20.100><c> beer</c><00:26:20.550><c> lovers</c><00:26:21.150><c> here</c><00:26:21.360><c> ok</c><00:26:21.720><c> a</c>

00:26:21.740 --> 00:26:21.750 align:start position:0%
on untappd any beer lovers here ok a
 

00:26:21.750 --> 00:26:24.440 align:start position:0%
on untappd any beer lovers here ok a
couple<00:26:21.930><c> of</c><00:26:22.140><c> people</c><00:26:22.290><c> I</c><00:26:23.130><c> found</c><00:26:23.730><c> here</c><00:26:23.940><c> in</c><00:26:24.060><c> Kiev</c>

00:26:24.440 --> 00:26:24.450 align:start position:0%
couple of people I found here in Kiev
 

00:26:24.450 --> 00:26:26.060 align:start position:0%
couple of people I found here in Kiev
that<00:26:24.480><c> there's</c><00:26:24.960><c> not</c><00:26:25.110><c> a</c><00:26:25.170><c> lot</c><00:26:25.260><c> of</c><00:26:25.440><c> people</c><00:26:25.890><c> using</c>

00:26:26.060 --> 00:26:26.070 align:start position:0%
that there's not a lot of people using
 

00:26:26.070 --> 00:26:28.340 align:start position:0%
that there's not a lot of people using
untappd<00:26:26.640><c> so</c><00:26:26.850><c> the</c><00:26:27.000><c> data</c><00:26:27.180><c> sets</c><00:26:27.540><c> is</c><00:26:27.750><c> another</c>

00:26:28.340 --> 00:26:28.350 align:start position:0%
untappd so the data sets is another
 

00:26:28.350 --> 00:26:30.680 align:start position:0%
untappd so the data sets is another
ideal<00:26:28.620><c> but</c><00:26:29.220><c> the</c><00:26:29.340><c> idea</c><00:26:29.580><c> of</c><00:26:29.640><c> this</c><00:26:29.850><c> app</c><00:26:30.120><c> is</c><00:26:30.360><c> that</c>

00:26:30.680 --> 00:26:30.690 align:start position:0%
ideal but the idea of this app is that
 

00:26:30.690 --> 00:26:32.660 align:start position:0%
ideal but the idea of this app is that
whenever<00:26:30.900><c> I</c><00:26:31.080><c> drink</c><00:26:31.350><c> a</c><00:26:31.470><c> beer</c><00:26:31.650><c> I</c><00:26:31.860><c> check</c><00:26:32.190><c> it</c><00:26:32.310><c> in</c><00:26:32.460><c> I</c>

00:26:32.660 --> 00:26:32.670 align:start position:0%
whenever I drink a beer I check it in I
 

00:26:32.670 --> 00:26:35.360 align:start position:0%
whenever I drink a beer I check it in I
rate<00:26:33.180><c> the</c><00:26:33.330><c> beer</c><00:26:33.570><c> I</c><00:26:34.080><c> tell</c><00:26:34.680><c> people</c><00:26:34.920><c> where</c><00:26:35.340><c> I</c>

00:26:35.360 --> 00:26:35.370 align:start position:0%
rate the beer I tell people where I
 

00:26:35.370 --> 00:26:37.220 align:start position:0%
rate the beer I tell people where I
drank<00:26:35.700><c> this</c><00:26:35.850><c> beer</c><00:26:36.120><c> so</c><00:26:36.360><c> that's</c><00:26:36.570><c> other</c><00:26:36.810><c> people</c>

00:26:37.220 --> 00:26:37.230 align:start position:0%
drank this beer so that's other people
 

00:26:37.230 --> 00:26:39.110 align:start position:0%
drank this beer so that's other people
using<00:26:37.560><c> this</c><00:26:37.650><c> app</c><00:26:37.890><c> can</c><00:26:38.130><c> find</c><00:26:38.430><c> nice</c><00:26:38.760><c> beers</c>

00:26:39.110 --> 00:26:39.120 align:start position:0%
using this app can find nice beers
 

00:26:39.120 --> 00:26:41.120 align:start position:0%
using this app can find nice beers
wherever<00:26:39.900><c> they</c><00:26:40.110><c> are</c><00:26:40.290><c> there's</c><00:26:40.650><c> a</c><00:26:40.710><c> nice</c><00:26:40.920><c> feature</c>

00:26:41.120 --> 00:26:41.130 align:start position:0%
wherever they are there's a nice feature
 

00:26:41.130 --> 00:26:44.840 align:start position:0%
wherever they are there's a nice feature
for<00:26:41.460><c> that</c><00:26:41.490><c> in</c><00:26:41.670><c> the</c><00:26:41.760><c> application</c><00:26:42.620><c> also</c><00:26:43.700><c> for</c><00:26:44.700><c> me</c>

00:26:44.840 --> 00:26:44.850 align:start position:0%
for that in the application also for me
 

00:26:44.850 --> 00:26:46.790 align:start position:0%
for that in the application also for me
it's<00:26:44.970><c> really</c><00:26:45.300><c> nice</c><00:26:45.510><c> because</c><00:26:45.990><c> when</c><00:26:46.410><c> you</c><00:26:46.590><c> go</c><00:26:46.740><c> to</c>

00:26:46.790 --> 00:26:46.800 align:start position:0%
it's really nice because when you go to
 

00:26:46.800 --> 00:26:49.430 align:start position:0%
it's really nice because when you go to
a<00:26:46.950><c> bar</c><00:26:47.190><c> and</c><00:26:47.220><c> you</c><00:26:47.430><c> check</c><00:26:47.730><c> in</c><00:26:47.880><c> something</c><00:26:48.330><c> I</c><00:26:48.510><c> will</c>

00:26:49.430 --> 00:26:49.440 align:start position:0%
a bar and you check in something I will
 

00:26:49.440 --> 00:26:51.140 align:start position:0%
a bar and you check in something I will
see<00:26:49.620><c> what</c><00:26:49.860><c> beery</c><00:26:50.190><c> drank</c><00:26:50.490><c> what</c><00:26:50.790><c> he</c><00:26:50.910><c> thought</c>

00:26:51.140 --> 00:26:51.150 align:start position:0%
see what beery drank what he thought
 

00:26:51.150 --> 00:26:53.570 align:start position:0%
see what beery drank what he thought
about<00:26:51.300><c> it</c><00:26:51.420><c> so</c><00:26:51.720><c> I</c><00:26:51.750><c> may</c><00:26:52.020><c> actually</c><00:26:52.290><c> start</c><00:26:52.980><c> trying</c>

00:26:53.570 --> 00:26:53.580 align:start position:0%
about it so I may actually start trying
 

00:26:53.580 --> 00:26:56.000 align:start position:0%
about it so I may actually start trying
some<00:26:53.820><c> other</c><00:26:53.880><c> beers</c><00:26:54.240><c> now</c><00:26:55.080><c> this</c><00:26:55.560><c> one</c><00:26:55.770><c> on</c><00:26:55.890><c> the</c>

00:26:56.000 --> 00:26:56.010 align:start position:0%
some other beers now this one on the
 

00:26:56.010 --> 00:26:58.070 align:start position:0%
some other beers now this one on the
right<00:26:56.130><c> is</c><00:26:56.460><c> a</c><00:26:56.820><c> Belgian</c><00:26:57.210><c> beer</c><00:26:57.240><c> that</c><00:26:57.570><c> I</c><00:26:57.600><c> really</c>

00:26:58.070 --> 00:26:58.080 align:start position:0%
right is a Belgian beer that I really
 

00:26:58.080 --> 00:26:58.310 align:start position:0%
right is a Belgian beer that I really
like

00:26:58.310 --> 00:26:58.320 align:start position:0%
like
 

00:26:58.320 --> 00:27:01.340 align:start position:0%
like
a<00:26:58.350><c> lot</c><00:26:58.620><c> it's</c><00:26:58.860><c> my</c><00:26:59.039><c> only</c><00:26:59.279><c> 5</c><00:26:59.700><c> out</c><00:27:00.330><c> of</c><00:27:00.389><c> 5</c><00:27:00.750><c> stars</c><00:27:01.110><c> on</c>

00:27:01.340 --> 00:27:01.350 align:start position:0%
a lot it's my only 5 out of 5 stars on
 

00:27:01.350 --> 00:27:03.799 align:start position:0%
a lot it's my only 5 out of 5 stars on
untappd<00:27:01.769><c> and</c><00:27:02.279><c> what</c><00:27:02.909><c> I</c><00:27:02.940><c> wanted</c><00:27:03.269><c> to</c><00:27:03.419><c> do</c><00:27:03.570><c> was</c>

00:27:03.799 --> 00:27:03.809 align:start position:0%
untappd and what I wanted to do was
 

00:27:03.809 --> 00:27:06.139 align:start position:0%
untappd and what I wanted to do was
create<00:27:04.259><c> a</c><00:27:04.440><c> similar</c><00:27:04.799><c> application</c><00:27:05.149><c> that</c>

00:27:06.139 --> 00:27:06.149 align:start position:0%
create a similar application that
 

00:27:06.149 --> 00:27:08.269 align:start position:0%
create a similar application that
requires<00:27:06.779><c> a</c><00:27:06.899><c> lot</c><00:27:07.139><c> of</c><00:27:07.259><c> data</c><00:27:07.440><c> and</c><00:27:07.769><c> that</c><00:27:07.950><c> stores</c>

00:27:08.269 --> 00:27:08.279 align:start position:0%
requires a lot of data and that stores
 

00:27:08.279 --> 00:27:10.580 align:start position:0%
requires a lot of data and that stores
ratings<00:27:08.850><c> of</c><00:27:09.120><c> different</c><00:27:09.659><c> beers</c><00:27:09.960><c> and</c><00:27:10.230><c> breweries</c>

00:27:10.580 --> 00:27:10.590 align:start position:0%
ratings of different beers and breweries
 

00:27:10.590 --> 00:27:13.460 align:start position:0%
ratings of different beers and breweries
so<00:27:11.490><c> I</c><00:27:11.730><c> have</c><00:27:11.909><c> a</c><00:27:11.970><c> big</c><00:27:12.210><c> JSON</c><00:27:12.659><c> file</c><00:27:12.899><c> Visual</c><00:27:13.380><c> Studio</c>

00:27:13.460 --> 00:27:13.470 align:start position:0%
so I have a big JSON file Visual Studio
 

00:27:13.470 --> 00:27:15.139 align:start position:0%
so I have a big JSON file Visual Studio
crashes<00:27:14.190><c> when</c><00:27:14.399><c> I</c><00:27:14.429><c> open</c><00:27:14.789><c> it</c>

00:27:15.139 --> 00:27:15.149 align:start position:0%
crashes when I open it
 

00:27:15.149 --> 00:27:17.269 align:start position:0%
crashes when I open it
notepad<00:27:15.600><c> plus</c><00:27:16.019><c> plus</c><00:27:16.049><c> takes</c><00:27:16.529><c> five</c><00:27:16.769><c> minutes</c><00:27:16.980><c> to</c>

00:27:17.269 --> 00:27:17.279 align:start position:0%
notepad plus plus takes five minutes to
 

00:27:17.279 --> 00:27:19.460 align:start position:0%
notepad plus plus takes five minutes to
open<00:27:17.580><c> the</c><00:27:17.700><c> file</c><00:27:17.940><c> and</c><00:27:18.179><c> there's</c><00:27:18.809><c> basically</c><00:27:18.990><c> no</c>

00:27:19.460 --> 00:27:19.470 align:start position:0%
open the file and there's basically no
 

00:27:19.470 --> 00:27:21.529 align:start position:0%
open the file and there's basically no
way<00:27:19.620><c> to</c><00:27:19.679><c> really</c><00:27:20.669><c> look</c><00:27:20.820><c> at</c><00:27:20.970><c> that</c><00:27:21.120><c> thing</c><00:27:21.299><c> other</c>

00:27:21.529 --> 00:27:21.539 align:start position:0%
way to really look at that thing other
 

00:27:21.539 --> 00:27:23.990 align:start position:0%
way to really look at that thing other
than<00:27:21.779><c> just</c><00:27:22.080><c> tailing</c><00:27:22.590><c> and</c><00:27:22.799><c> and</c><00:27:23.070><c> taking</c><00:27:23.549><c> chunks</c>

00:27:23.990 --> 00:27:24.000 align:start position:0%
than just tailing and and taking chunks
 

00:27:24.000 --> 00:27:26.659 align:start position:0%
than just tailing and and taking chunks
of<00:27:24.120><c> this</c><00:27:24.269><c> file</c><00:27:24.539><c> the</c><00:27:25.230><c> file</c><00:27:25.409><c> contains</c><00:27:25.889><c> I</c><00:27:26.190><c> think</c>

00:27:26.659 --> 00:27:26.669 align:start position:0%
of this file the file contains I think
 

00:27:26.669 --> 00:27:28.370 align:start position:0%
of this file the file contains I think
all<00:27:26.880><c> of</c><00:27:26.909><c> the</c><00:27:27.090><c> Belgian</c><00:27:27.450><c> beers</c><00:27:27.690><c> that</c><00:27:27.899><c> exist</c><00:27:28.230><c> a</c>

00:27:28.370 --> 00:27:28.380 align:start position:0%
all of the Belgian beers that exist a
 

00:27:28.380 --> 00:27:30.080 align:start position:0%
all of the Belgian beers that exist a
couple<00:27:28.649><c> of</c><00:27:28.740><c> American</c><00:27:29.220><c> ones</c><00:27:29.399><c> and</c><00:27:29.610><c> so</c><00:27:29.730><c> on</c><00:27:29.880><c> and</c>

00:27:30.080 --> 00:27:30.090 align:start position:0%
couple of American ones and so on and
 

00:27:30.090 --> 00:27:32.060 align:start position:0%
couple of American ones and so on and
the<00:27:30.600><c> structure</c><00:27:30.990><c> is</c><00:27:31.080><c> like</c><00:27:31.259><c> this</c><00:27:31.470><c> it's</c><00:27:31.740><c> a</c><00:27:31.860><c> big</c>

00:27:32.060 --> 00:27:32.070 align:start position:0%
the structure is like this it's a big
 

00:27:32.070 --> 00:27:34.909 align:start position:0%
the structure is like this it's a big
JSON<00:27:32.460><c> array</c><00:27:32.909><c> that</c><00:27:33.690><c> contains</c><00:27:33.840><c> objects</c><00:27:34.740><c> that</c>

00:27:34.909 --> 00:27:34.919 align:start position:0%
JSON array that contains objects that
 

00:27:34.919 --> 00:27:37.430 align:start position:0%
JSON array that contains objects that
have<00:27:35.190><c> the</c><00:27:35.580><c> name</c><00:27:35.789><c> of</c><00:27:36.029><c> the</c><00:27:36.149><c> beer</c><00:27:36.299><c> that</c><00:27:36.570><c> have</c><00:27:37.289><c> the</c>

00:27:37.430 --> 00:27:37.440 align:start position:0%
have the name of the beer that have the
 

00:27:37.440 --> 00:27:39.169 align:start position:0%
have the name of the beer that have the
name<00:27:37.649><c> of</c><00:27:37.679><c> the</c><00:27:37.830><c> brewery</c><00:27:38.129><c> that</c><00:27:38.490><c> have</c><00:27:38.759><c> the</c><00:27:38.909><c> number</c>

00:27:39.169 --> 00:27:39.179 align:start position:0%
name of the brewery that have the number
 

00:27:39.179 --> 00:27:41.149 align:start position:0%
name of the brewery that have the number
of<00:27:39.269><c> votes</c><00:27:39.539><c> and</c><00:27:39.809><c> the</c><00:27:40.049><c> average</c><00:27:40.350><c> rating</c><00:27:40.710><c> for</c><00:27:41.129><c> that</c>

00:27:41.149 --> 00:27:41.159 align:start position:0%
of votes and the average rating for that
 

00:27:41.159 --> 00:27:43.009 align:start position:0%
of votes and the average rating for that
number<00:27:41.490><c> of</c><00:27:41.669><c> votes</c><00:27:41.940><c> so</c><00:27:42.419><c> that</c><00:27:42.450><c> I</c><00:27:42.600><c> have</c><00:27:42.809><c> some</c>

00:27:43.009 --> 00:27:43.019 align:start position:0%
number of votes so that I have some
 

00:27:43.019 --> 00:27:45.139 align:start position:0%
number of votes so that I have some
information<00:27:43.320><c> that</c><00:27:43.649><c> I</c><00:27:43.860><c> could</c><00:27:44.159><c> display</c><00:27:44.909><c> my</c>

00:27:45.139 --> 00:27:45.149 align:start position:0%
information that I could display my
 

00:27:45.149 --> 00:27:47.779 align:start position:0%
information that I could display my
application<00:27:45.779><c> so</c><00:27:46.649><c> let's</c><00:27:46.679><c> see</c><00:27:47.039><c> how</c><00:27:47.429><c> we</c><00:27:47.490><c> could</c>

00:27:47.779 --> 00:27:47.789 align:start position:0%
application so let's see how we could
 

00:27:47.789 --> 00:27:57.039 align:start position:0%
application so let's see how we could
load<00:27:48.029><c> that</c><00:27:48.269><c> into</c><00:27:48.539><c> memory</c><00:27:49.850><c> if</c><00:27:50.870><c> we</c><00:27:51.870><c> look</c><00:27:52.289><c> at</c><00:27:52.500><c> our</c>

00:27:57.039 --> 00:27:57.049 align:start position:0%
 
 

00:27:57.049 --> 00:28:03.230 align:start position:0%
 
unoptimized<00:27:58.049><c> version</c><00:28:00.919><c> yes</c><00:28:01.919><c> so</c><00:28:02.519><c> we</c><00:28:02.850><c> will</c><00:28:03.029><c> see</c>

00:28:03.230 --> 00:28:03.240 align:start position:0%
unoptimized version yes so we will see
 

00:28:03.240 --> 00:28:05.600 align:start position:0%
unoptimized version yes so we will see
that<00:28:03.570><c> I</c><00:28:03.779><c> created</c><00:28:04.200><c> an</c><00:28:04.440><c> insane</c><00:28:04.950><c> version</c><00:28:05.429><c> of</c>

00:28:05.600 --> 00:28:05.610 align:start position:0%
that I created an insane version of
 

00:28:05.610 --> 00:28:07.340 align:start position:0%
that I created an insane version of
loading<00:28:06.029><c> all</c><00:28:06.210><c> these</c><00:28:06.450><c> beers</c><00:28:06.750><c> into</c><00:28:06.929><c> memory</c>

00:28:07.340 --> 00:28:07.350 align:start position:0%
loading all these beers into memory
 

00:28:07.350 --> 00:28:08.840 align:start position:0%
loading all these beers into memory
basically<00:28:07.889><c> what</c><00:28:08.039><c> I</c><00:28:08.070><c> want</c><00:28:08.309><c> to</c><00:28:08.399><c> have</c><00:28:08.580><c> in</c><00:28:08.730><c> my</c>

00:28:08.840 --> 00:28:08.850 align:start position:0%
basically what I want to have in my
 

00:28:08.850 --> 00:28:11.509 align:start position:0%
basically what I want to have in my
application<00:28:09.000><c> is</c><00:28:09.779><c> a</c><00:28:10.409><c> dictionary</c><00:28:10.919><c> of</c><00:28:11.159><c> beers</c>

00:28:11.509 --> 00:28:11.519 align:start position:0%
application is a dictionary of beers
 

00:28:11.519 --> 00:28:14.659 align:start position:0%
application is a dictionary of beers
where<00:28:11.940><c> for</c><00:28:12.210><c> every</c><00:28:12.570><c> brewery</c><00:28:13.169><c> I</c><00:28:13.590><c> store</c><00:28:14.370><c> the</c>

00:28:14.659 --> 00:28:14.669 align:start position:0%
where for every brewery I store the
 

00:28:14.669 --> 00:28:17.090 align:start position:0%
where for every brewery I store the
beers<00:28:14.909><c> and</c><00:28:15.269><c> their</c><00:28:15.840><c> rating</c><00:28:16.289><c> so</c><00:28:16.620><c> that</c><00:28:16.799><c> I</c><00:28:16.830><c> can</c>

00:28:17.090 --> 00:28:17.100 align:start position:0%
beers and their rating so that I can
 

00:28:17.100 --> 00:28:18.950 align:start position:0%
beers and their rating so that I can
reuse<00:28:17.279><c> this</c><00:28:17.639><c> at</c><00:28:17.850><c> a</c><00:28:17.879><c> later</c><00:28:18.120><c> point</c><00:28:18.389><c> in</c><00:28:18.570><c> time</c><00:28:18.629><c> in</c>

00:28:18.950 --> 00:28:18.960 align:start position:0%
reuse this at a later point in time in
 

00:28:18.960 --> 00:28:21.549 align:start position:0%
reuse this at a later point in time in
my<00:28:18.990><c> application</c><00:28:19.230><c> so</c><00:28:19.889><c> what</c><00:28:20.669><c> I</c><00:28:20.700><c> do</c><00:28:20.820><c> here</c><00:28:21.210><c> is</c>

00:28:21.549 --> 00:28:21.559 align:start position:0%
my application so what I do here is
 

00:28:21.559 --> 00:28:25.129 align:start position:0%
my application so what I do here is
really<00:28:22.559><c> insane</c><00:28:22.860><c> don't</c><00:28:23.190><c> do</c><00:28:23.429><c> this</c><00:28:23.669><c> I</c><00:28:23.909><c> load</c><00:28:24.750><c> the</c>

00:28:25.129 --> 00:28:25.139 align:start position:0%
really insane don't do this I load the
 

00:28:25.139 --> 00:28:27.470 align:start position:0%
really insane don't do this I load the
entire<00:28:25.259><c> beers</c><00:28:25.919><c> that</c><00:28:26.129><c> Jason</c><00:28:26.549><c> into</c><00:28:26.759><c> memory</c><00:28:27.240><c> as</c><00:28:27.419><c> a</c>

00:28:27.470 --> 00:28:27.480 align:start position:0%
entire beers that Jason into memory as a
 

00:28:27.480 --> 00:28:31.039 align:start position:0%
entire beers that Jason into memory as a
string<00:28:28.519><c> then</c><00:28:29.519><c> parse</c><00:28:29.820><c> it</c><00:28:30.000><c> into</c><00:28:30.299><c> a</c><00:28:30.330><c> JSON</c><00:28:30.629><c> array</c>

00:28:31.039 --> 00:28:31.049 align:start position:0%
string then parse it into a JSON array
 

00:28:31.049 --> 00:28:33.860 align:start position:0%
string then parse it into a JSON array
and<00:28:31.409><c> then</c><00:28:32.159><c> start</c><00:28:32.519><c> populating</c><00:28:32.789><c> my</c><00:28:33.240><c> dictionary</c>

00:28:33.860 --> 00:28:33.870 align:start position:0%
and then start populating my dictionary
 

00:28:33.870 --> 00:28:35.779 align:start position:0%
and then start populating my dictionary
I<00:28:34.139><c> hope</c><00:28:34.379><c> all</c><00:28:34.590><c> of</c><00:28:34.649><c> you</c><00:28:34.950><c> see</c><00:28:35.250><c> that</c><00:28:35.279><c> this</c><00:28:35.610><c> is</c>

00:28:35.779 --> 00:28:35.789 align:start position:0%
I hope all of you see that this is
 

00:28:35.789 --> 00:28:37.549 align:start position:0%
I hope all of you see that this is
probably<00:28:36.090><c> an</c><00:28:36.330><c> insane</c><00:28:36.690><c> way</c><00:28:36.899><c> of</c><00:28:37.019><c> loading</c><00:28:37.409><c> this</c>

00:28:37.549 --> 00:28:37.559 align:start position:0%
probably an insane way of loading this
 

00:28:37.559 --> 00:28:40.430 align:start position:0%
probably an insane way of loading this
big<00:28:37.799><c> file</c><00:28:38.070><c> into</c><00:28:38.909><c> memory</c><00:28:39.059><c> because</c><00:28:39.870><c> in</c><00:28:39.990><c> fact</c><00:28:40.169><c> I'm</c>

00:28:40.430 --> 00:28:40.440 align:start position:0%
big file into memory because in fact I'm
 

00:28:40.440 --> 00:28:42.200 align:start position:0%
big file into memory because in fact I'm
loading<00:28:40.769><c> this</c><00:28:40.889><c> big</c><00:28:41.100><c> file</c><00:28:41.340><c> three</c><00:28:41.730><c> times</c><00:28:42.029><c> in</c>

00:28:42.200 --> 00:28:42.210 align:start position:0%
loading this big file three times in
 

00:28:42.210 --> 00:28:44.060 align:start position:0%
loading this big file three times in
memory<00:28:42.539><c> and</c><00:28:42.750><c> and</c><00:28:43.080><c> some</c><00:28:43.289><c> additional</c><00:28:43.500><c> things</c><00:28:43.919><c> as</c>

00:28:44.060 --> 00:28:44.070 align:start position:0%
memory and and some additional things as
 

00:28:44.070 --> 00:28:44.389 align:start position:0%
memory and and some additional things as
well

00:28:44.389 --> 00:28:44.399 align:start position:0%
well
 

00:28:44.399 --> 00:28:46.100 align:start position:0%
well
I'm<00:28:44.460><c> loading</c><00:28:45.149><c> the</c><00:28:45.269><c> entire</c><00:28:45.539><c> string</c><00:28:45.929><c> I'm</c>

00:28:46.100 --> 00:28:46.110 align:start position:0%
I'm loading the entire string I'm
 

00:28:46.110 --> 00:28:48.409 align:start position:0%
I'm loading the entire string I'm
creating<00:28:46.950><c> a</c><00:28:47.009><c> big</c><00:28:47.190><c> JSON</c><00:28:47.639><c> array</c><00:28:47.850><c> with</c><00:28:48.120><c> all</c><00:28:48.269><c> the</c>

00:28:48.409 --> 00:28:48.419 align:start position:0%
creating a big JSON array with all the
 

00:28:48.419 --> 00:28:50.210 align:start position:0%
creating a big JSON array with all the
objects<00:28:48.779><c> representing</c><00:28:49.500><c> all</c><00:28:49.740><c> the</c><00:28:49.889><c> things</c><00:28:50.100><c> that</c>

00:28:50.210 --> 00:28:50.220 align:start position:0%
objects representing all the things that
 

00:28:50.220 --> 00:28:52.129 align:start position:0%
objects representing all the things that
are<00:28:50.340><c> in</c><00:28:50.490><c> this</c><00:28:50.580><c> string</c><00:28:50.879><c> and</c><00:28:51.029><c> then</c><00:28:51.690><c> I'm</c><00:28:51.899><c> filling</c>

00:28:52.129 --> 00:28:52.139 align:start position:0%
are in this string and then I'm filling
 

00:28:52.139 --> 00:28:54.889 align:start position:0%
are in this string and then I'm filling
my<00:28:52.289><c> dictionary</c><00:28:53.129><c> and</c><00:28:53.399><c> storing</c><00:28:53.879><c> them</c><00:28:54.029><c> again</c><00:28:54.509><c> so</c>

00:28:54.889 --> 00:28:54.899 align:start position:0%
my dictionary and storing them again so
 

00:28:54.899 --> 00:28:56.570 align:start position:0%
my dictionary and storing them again so
this<00:28:55.019><c> is</c><00:28:55.169><c> probably</c><00:28:55.470><c> not</c><00:28:55.679><c> a</c><00:28:55.740><c> good</c><00:28:55.919><c> way</c><00:28:56.129><c> of</c><00:28:56.159><c> doing</c>

00:28:56.570 --> 00:28:56.580 align:start position:0%
this is probably not a good way of doing
 

00:28:56.580 --> 00:28:58.340 align:start position:0%
this is probably not a good way of doing
things<00:28:56.940><c> and</c><00:28:57.149><c> I</c><00:28:57.509><c> hope</c><00:28:57.659><c> you</c><00:28:57.779><c> understand</c><00:28:58.289><c> that</c>

00:28:58.340 --> 00:28:58.350 align:start position:0%
things and I hope you understand that
 

00:28:58.350 --> 00:29:01.700 align:start position:0%
things and I hope you understand that
without<00:28:58.830><c> having</c><00:28:59.580><c> to</c><00:28:59.700><c> profile</c><00:29:00.120><c> here</c><00:29:00.450><c> now</c><00:29:01.409><c> I</c>

00:29:01.700 --> 00:29:01.710 align:start position:0%
without having to profile here now I
 

00:29:01.710 --> 00:29:04.039 align:start position:0%
without having to profile here now I
created<00:29:02.220><c> a</c><00:29:02.370><c> second</c><00:29:02.730><c> version</c><00:29:02.940><c> that</c><00:29:03.509><c> is</c><00:29:03.659><c> more</c>

00:29:04.039 --> 00:29:04.049 align:start position:0%
created a second version that is more
 

00:29:04.049 --> 00:29:05.690 align:start position:0%
created a second version that is more
optimized<00:29:04.559><c> so</c><00:29:04.830><c> in</c><00:29:04.950><c> this</c><00:29:05.070><c> case</c><00:29:05.340><c> same</c>

00:29:05.690 --> 00:29:05.700 align:start position:0%
optimized so in this case same
 

00:29:05.700 --> 00:29:08.210 align:start position:0%
optimized so in this case same
dictionary<00:29:05.940><c> breweries</c><00:29:06.779><c> all</c><00:29:07.260><c> their</c><00:29:07.649><c> beers</c><00:29:07.889><c> and</c>

00:29:08.210 --> 00:29:08.220 align:start position:0%
dictionary breweries all their beers and
 

00:29:08.220 --> 00:29:10.129 align:start position:0%
dictionary breweries all their beers and
all<00:29:08.309><c> their</c><00:29:08.490><c> ratings</c><00:29:08.850><c> but</c><00:29:09.480><c> what</c><00:29:09.629><c> I</c><00:29:09.659><c> do</c><00:29:09.779><c> in</c><00:29:09.990><c> this</c>

00:29:10.129 --> 00:29:10.139 align:start position:0%
all their ratings but what I do in this
 

00:29:10.139 --> 00:29:12.110 align:start position:0%
all their ratings but what I do in this
case<00:29:10.350><c> is</c><00:29:10.590><c> I</c><00:29:10.889><c> use</c><00:29:11.039><c> a</c><00:29:11.070><c> JSON</c><00:29:11.549><c> text</c>

00:29:12.110 --> 00:29:12.120 align:start position:0%
case is I use a JSON text
 

00:29:12.120 --> 00:29:14.720 align:start position:0%
case is I use a JSON text
that<00:29:12.420><c> basically</c><00:29:12.750><c> streams</c><00:29:13.260><c> the</c><00:29:13.500><c> Jason</c><00:29:13.950><c> into</c><00:29:14.580><c> my</c>

00:29:14.720 --> 00:29:14.730 align:start position:0%
that basically streams the Jason into my
 

00:29:14.730 --> 00:29:17.150 align:start position:0%
that basically streams the Jason into my
application<00:29:14.880><c> and</c><00:29:15.690><c> whenever</c><00:29:16.140><c> I</c><00:29:16.380><c> encounter</c><00:29:16.530><c> an</c>

00:29:17.150 --> 00:29:17.160 align:start position:0%
application and whenever I encounter an
 

00:29:17.160 --> 00:29:18.890 align:start position:0%
application and whenever I encounter an
object<00:29:17.580><c> I</c><00:29:17.820><c> know</c><00:29:17.880><c> the</c><00:29:18.120><c> structure</c><00:29:18.570><c> of</c><00:29:18.660><c> my</c>

00:29:18.890 --> 00:29:18.900 align:start position:0%
object I know the structure of my
 

00:29:18.900 --> 00:29:21.110 align:start position:0%
object I know the structure of my
bierstadt<00:29:19.710><c> Jason</c><00:29:20.100><c> whenever</c><00:29:20.400><c> I</c><00:29:20.490><c> see</c><00:29:20.670><c> an</c><00:29:20.790><c> object</c>

00:29:21.110 --> 00:29:21.120 align:start position:0%
bierstadt Jason whenever I see an object
 

00:29:21.120 --> 00:29:24.650 align:start position:0%
bierstadt Jason whenever I see an object
I<00:29:21.360><c> load</c><00:29:21.930><c> just</c><00:29:22.440><c> that</c><00:29:22.680><c> object</c><00:29:23.160><c> into</c><00:29:23.610><c> memory</c><00:29:23.910><c> then</c>

00:29:24.650 --> 00:29:24.660 align:start position:0%
I load just that object into memory then
 

00:29:24.660 --> 00:29:26.180 align:start position:0%
I load just that object into memory then
look<00:29:24.840><c> at</c><00:29:24.990><c> the</c><00:29:25.080><c> brewery</c><00:29:25.260><c> name</c><00:29:25.620><c> the</c><00:29:25.830><c> beer</c><00:29:26.010><c> name</c>

00:29:26.180 --> 00:29:26.190 align:start position:0%
look at the brewery name the beer name
 

00:29:26.190 --> 00:29:27.920 align:start position:0%
look at the brewery name the beer name
and<00:29:26.400><c> the</c><00:29:26.490><c> rating</c><00:29:26.850><c> and</c><00:29:27.030><c> then</c><00:29:27.150><c> starts</c><00:29:27.480><c> adding</c><00:29:27.840><c> it</c>

00:29:27.920 --> 00:29:27.930 align:start position:0%
and the rating and then starts adding it
 

00:29:27.930 --> 00:29:30.410 align:start position:0%
and the rating and then starts adding it
into<00:29:28.200><c> my</c><00:29:28.470><c> dictionary</c><00:29:29.040><c> so</c><00:29:29.670><c> that's</c><00:29:29.850><c> a</c><00:29:29.970><c> nice</c><00:29:30.150><c> coat</c>

00:29:30.410 --> 00:29:30.420 align:start position:0%
into my dictionary so that's a nice coat
 

00:29:30.420 --> 00:29:32.390 align:start position:0%
into my dictionary so that's a nice coat
of<00:29:30.660><c> loading</c><00:29:31.020><c> things</c><00:29:31.200><c> and</c><00:29:31.500><c> now</c><00:29:31.710><c> I'm</c><00:29:31.950><c> not</c>

00:29:32.390 --> 00:29:32.400 align:start position:0%
of loading things and now I'm not
 

00:29:32.400 --> 00:29:34.250 align:start position:0%
of loading things and now I'm not
loading<00:29:32.760><c> the</c><00:29:32.910><c> entire</c><00:29:33.180><c> file</c><00:29:33.480><c> as</c><00:29:33.690><c> a</c><00:29:33.720><c> string</c><00:29:34.080><c> I'm</c>

00:29:34.250 --> 00:29:34.260 align:start position:0%
loading the entire file as a string I'm
 

00:29:34.260 --> 00:29:36.560 align:start position:0%
loading the entire file as a string I'm
just<00:29:34.500><c> loading</c><00:29:34.710><c> parts</c><00:29:35.610><c> of</c><00:29:35.760><c> this</c><00:29:35.940><c> file</c><00:29:36.240><c> into</c>

00:29:36.560 --> 00:29:36.570 align:start position:0%
just loading parts of this file into
 

00:29:36.570 --> 00:29:38.390 align:start position:0%
just loading parts of this file into
memory<00:29:37.110><c> and</c><00:29:37.260><c> that</c><00:29:37.350><c> should</c><00:29:37.560><c> be</c><00:29:37.710><c> more</c><00:29:37.890><c> optimized</c>

00:29:38.390 --> 00:29:38.400 align:start position:0%
memory and that should be more optimized
 

00:29:38.400 --> 00:29:40.730 align:start position:0%
memory and that should be more optimized
the<00:29:39.300><c> important</c><00:29:39.750><c> thing</c><00:29:39.900><c> to</c><00:29:39.930><c> see</c><00:29:40.080><c> here</c><00:29:40.260><c> is</c><00:29:40.590><c> that</c>

00:29:40.730 --> 00:29:40.740 align:start position:0%
the important thing to see here is that
 

00:29:40.740 --> 00:29:43.130 align:start position:0%
the important thing to see here is that
whenever<00:29:41.310><c> I</c><00:29:41.400><c> load</c><00:29:41.850><c> the</c><00:29:42.000><c> beers</c><00:29:42.270><c> I'm</c><00:29:42.510><c> creating</c><00:29:43.050><c> a</c>

00:29:43.130 --> 00:29:43.140 align:start position:0%
whenever I load the beers I'm creating a
 

00:29:43.140 --> 00:29:46.790 align:start position:0%
whenever I load the beers I'm creating a
new<00:29:43.170><c> dictionary</c><00:29:44.570><c> why</c><00:29:45.570><c> well</c><00:29:46.080><c> I</c><00:29:46.110><c> just</c><00:29:46.290><c> want</c><00:29:46.710><c> the</c>

00:29:46.790 --> 00:29:46.800 align:start position:0%
new dictionary why well I just want the
 

00:29:46.800 --> 00:29:48.440 align:start position:0%
new dictionary why well I just want the
new<00:29:46.950><c> beers</c><00:29:47.250><c> and</c><00:29:47.490><c> if</c><00:29:47.610><c> the</c><00:29:47.730><c> ratings</c><00:29:48.120><c> have</c><00:29:48.270><c> been</c>

00:29:48.440 --> 00:29:48.450 align:start position:0%
new beers and if the ratings have been
 

00:29:48.450 --> 00:29:49.880 align:start position:0%
new beers and if the ratings have been
updated<00:29:48.840><c> I</c><00:29:48.990><c> want</c><00:29:49.170><c> to</c><00:29:49.230><c> have</c><00:29:49.380><c> those</c><00:29:49.530><c> in</c><00:29:49.800><c> the</c>

00:29:49.880 --> 00:29:49.890 align:start position:0%
updated I want to have those in the
 

00:29:49.890 --> 00:29:52.490 align:start position:0%
updated I want to have those in the
dictionary<00:29:50.370><c> so</c><00:29:51.240><c> if</c><00:29:51.540><c> we</c><00:29:51.900><c> profile</c><00:29:52.350><c> that</c>

00:29:52.490 --> 00:29:52.500 align:start position:0%
dictionary so if we profile that
 

00:29:52.500 --> 00:29:58.400 align:start position:0%
dictionary so if we profile that
application<00:29:53.750><c> you</c><00:29:54.750><c> will</c><00:29:54.930><c> see</c><00:29:55.200><c> that</c><00:29:57.050><c> the</c><00:29:58.050><c> chart</c>

00:29:58.400 --> 00:29:58.410 align:start position:0%
application you will see that the chart
 

00:29:58.410 --> 00:30:00.250 align:start position:0%
application you will see that the chart
of<00:29:58.620><c> memory</c><00:29:59.010><c> usage</c><00:29:59.340><c> is</c><00:29:59.580><c> kind</c><00:29:59.880><c> of</c><00:29:59.970><c> interesting</c>

00:30:00.250 --> 00:30:00.260 align:start position:0%
of memory usage is kind of interesting
 

00:30:00.260 --> 00:30:02.780 align:start position:0%
of memory usage is kind of interesting
so<00:30:01.260><c> first</c><00:30:01.560><c> of</c><00:30:01.710><c> all</c><00:30:01.800><c> you</c><00:30:01.980><c> see</c><00:30:02.190><c> the</c><00:30:02.340><c> beers</c><00:30:02.550><c> being</c>

00:30:02.780 --> 00:30:02.790 align:start position:0%
so first of all you see the beers being
 

00:30:02.790 --> 00:30:04.370 align:start position:0%
so first of all you see the beers being
loaded<00:30:03.210><c> you</c><00:30:03.360><c> see</c><00:30:03.390><c> lots</c><00:30:03.870><c> and</c><00:30:04.050><c> lots</c><00:30:04.260><c> of</c>

00:30:04.370 --> 00:30:04.380 align:start position:0%
loaded you see lots and lots of
 

00:30:04.380 --> 00:30:06.680 align:start position:0%
loaded you see lots and lots of
allocations<00:30:04.980><c> happening</c><00:30:05.460><c> a</c><00:30:06.030><c> lot</c><00:30:06.390><c> of</c><00:30:06.540><c> those</c>

00:30:06.680 --> 00:30:06.690 align:start position:0%
allocations happening a lot of those
 

00:30:06.690 --> 00:30:09.350 align:start position:0%
allocations happening a lot of those
allocations<00:30:07.320><c> go</c><00:30:07.620><c> to</c><00:30:07.680><c> generation</c><00:30:08.610><c> -</c><00:30:08.820><c> well</c>

00:30:09.350 --> 00:30:09.360 align:start position:0%
allocations go to generation - well
 

00:30:09.360 --> 00:30:11.450 align:start position:0%
allocations go to generation - well
that's<00:30:09.540><c> perfectly</c><00:30:10.020><c> fine</c><00:30:10.320><c> because</c><00:30:10.890><c> I'm</c>

00:30:11.450 --> 00:30:11.460 align:start position:0%
that's perfectly fine because I'm
 

00:30:11.460 --> 00:30:13.190 align:start position:0%
that's perfectly fine because I'm
storing<00:30:12.000><c> this</c><00:30:12.120><c> in</c><00:30:12.300><c> a</c><00:30:12.390><c> dictionary</c><00:30:12.840><c> that</c><00:30:12.930><c> is</c>

00:30:13.190 --> 00:30:13.200 align:start position:0%
storing this in a dictionary that is
 

00:30:13.200 --> 00:30:15.050 align:start position:0%
storing this in a dictionary that is
static<00:30:13.590><c> and</c><00:30:13.800><c> that</c><00:30:13.920><c> will</c><00:30:14.100><c> live</c><00:30:14.280><c> forever</c><00:30:14.670><c> in</c><00:30:14.910><c> my</c>

00:30:15.050 --> 00:30:15.060 align:start position:0%
static and that will live forever in my
 

00:30:15.060 --> 00:30:17.120 align:start position:0%
static and that will live forever in my
application<00:30:15.180><c> so</c><00:30:15.840><c> it's</c><00:30:16.260><c> kind</c><00:30:16.530><c> of</c><00:30:16.650><c> expected</c>

00:30:17.120 --> 00:30:17.130 align:start position:0%
application so it's kind of expected
 

00:30:17.130 --> 00:30:19.520 align:start position:0%
application so it's kind of expected
that<00:30:17.160><c> things</c><00:30:17.580><c> will</c><00:30:17.790><c> end</c><00:30:18.000><c> up</c><00:30:18.180><c> on</c><00:30:18.390><c> generation</c><00:30:19.260><c> 2</c>

00:30:19.520 --> 00:30:19.530 align:start position:0%
that things will end up on generation 2
 

00:30:19.530 --> 00:30:22.130 align:start position:0%
that things will end up on generation 2
the<00:30:20.460><c> interesting</c><00:30:20.880><c> thing</c><00:30:21.120><c> though</c><00:30:21.300><c> is</c><00:30:21.330><c> I</c><00:30:21.690><c> took</c><00:30:21.840><c> a</c>

00:30:22.130 --> 00:30:22.140 align:start position:0%
the interesting thing though is I took a
 

00:30:22.140 --> 00:30:24.590 align:start position:0%
the interesting thing though is I took a
snapshot<00:30:22.410><c> here</c><00:30:22.950><c> when</c><00:30:23.490><c> I</c><00:30:23.520><c> first</c><00:30:23.880><c> loaded</c><00:30:24.420><c> all</c>

00:30:24.590 --> 00:30:24.600 align:start position:0%
snapshot here when I first loaded all
 

00:30:24.600 --> 00:30:27.050 align:start position:0%
snapshot here when I first loaded all
these<00:30:24.750><c> objects</c><00:30:25.110><c> into</c><00:30:25.380><c> memory</c><00:30:25.680><c> then</c><00:30:26.580><c> I</c><00:30:26.820><c> waited</c>

00:30:27.050 --> 00:30:27.060 align:start position:0%
these objects into memory then I waited
 

00:30:27.060 --> 00:30:28.880 align:start position:0%
these objects into memory then I waited
a<00:30:27.300><c> little</c><00:30:27.420><c> bit</c><00:30:27.690><c> and</c><00:30:27.930><c> I</c><00:30:27.990><c> reloaded</c><00:30:28.560><c> to</c><00:30:28.800><c> the</c>

00:30:28.880 --> 00:30:28.890 align:start position:0%
a little bit and I reloaded to the
 

00:30:28.890 --> 00:30:30.650 align:start position:0%
a little bit and I reloaded to the
objects<00:30:29.280><c> in</c><00:30:29.400><c> memory</c><00:30:29.550><c> which</c><00:30:30.030><c> meant</c><00:30:30.330><c> that</c><00:30:30.540><c> I</c><00:30:30.570><c> had</c>

00:30:30.650 --> 00:30:30.660 align:start position:0%
objects in memory which meant that I had
 

00:30:30.660 --> 00:30:33.230 align:start position:0%
objects in memory which meant that I had
my<00:30:30.960><c> original</c><00:30:31.170><c> dictionary</c><00:30:31.760><c> but</c><00:30:32.760><c> also</c><00:30:33.030><c> in</c><00:30:33.150><c> the</c>

00:30:33.230 --> 00:30:33.240 align:start position:0%
my original dictionary but also in the
 

00:30:33.240 --> 00:30:35.450 align:start position:0%
my original dictionary but also in the
meanwhile<00:30:33.630><c> a</c><00:30:33.840><c> new</c><00:30:34.080><c> dictionary</c><00:30:34.350><c> was</c><00:30:35.100><c> filling</c>

00:30:35.450 --> 00:30:35.460 align:start position:0%
meanwhile a new dictionary was filling
 

00:30:35.460 --> 00:30:37.250 align:start position:0%
meanwhile a new dictionary was filling
up<00:30:35.580><c> and</c><00:30:35.790><c> only</c><00:30:36.000><c> when</c><00:30:36.240><c> that</c><00:30:36.420><c> one</c><00:30:36.660><c> was</c><00:30:36.870><c> filled</c><00:30:37.110><c> up</c>

00:30:37.250 --> 00:30:37.260 align:start position:0%
up and only when that one was filled up
 

00:30:37.260 --> 00:30:39.890 align:start position:0%
up and only when that one was filled up
I<00:30:37.560><c> discard</c><00:30:38.340><c> the</c><00:30:38.580><c> old</c><00:30:38.610><c> one</c><00:30:38.940><c> and</c><00:30:39.120><c> I</c><00:30:39.300><c> could</c><00:30:39.510><c> reuse</c>

00:30:39.890 --> 00:30:39.900 align:start position:0%
I discard the old one and I could reuse
 

00:30:39.900 --> 00:30:42.920 align:start position:0%
I discard the old one and I could reuse
the<00:30:40.440><c> new</c><00:30:40.620><c> one</c><00:30:40.830><c> in</c><00:30:41.190><c> my</c><00:30:41.370><c> application</c><00:30:41.490><c> as</c><00:30:42.150><c> you</c><00:30:42.600><c> can</c>

00:30:42.920 --> 00:30:42.930 align:start position:0%
the new one in my application as you can
 

00:30:42.930 --> 00:30:44.630 align:start position:0%
the new one in my application as you can
see<00:30:43.140><c> that's</c><00:30:43.440><c> not</c><00:30:43.680><c> ideal</c><00:30:43.800><c> because</c><00:30:44.460><c> we're</c>

00:30:44.630 --> 00:30:44.640 align:start position:0%
see that's not ideal because we're
 

00:30:44.640 --> 00:30:46.340 align:start position:0%
see that's not ideal because we're
basically<00:30:45.150><c> spending</c><00:30:45.540><c> lots</c><00:30:45.810><c> and</c><00:30:46.020><c> lots</c><00:30:46.200><c> of</c>

00:30:46.340 --> 00:30:46.350 align:start position:0%
basically spending lots and lots of
 

00:30:46.350 --> 00:30:48.290 align:start position:0%
basically spending lots and lots of
memory<00:30:46.680><c> there</c><00:30:46.920><c> and</c><00:30:47.130><c> there's</c><00:30:47.640><c> also</c><00:30:47.790><c> lots</c><00:30:48.090><c> of</c>

00:30:48.290 --> 00:30:48.300 align:start position:0%
memory there and there's also lots of
 

00:30:48.300 --> 00:30:50.030 align:start position:0%
memory there and there's also lots of
memory<00:30:48.630><c> traffic</c><00:30:48.990><c> going</c><00:30:49.170><c> on</c><00:30:49.440><c> and</c><00:30:49.650><c> imagine</c>

00:30:50.030 --> 00:30:50.040 align:start position:0%
memory traffic going on and imagine
 

00:30:50.040 --> 00:30:52.820 align:start position:0%
memory traffic going on and imagine
parsing<00:30:50.580><c> a</c><00:30:51.180><c> few</c><00:30:51.720><c> ten</c><00:30:51.990><c> thousands</c><00:30:52.440><c> of</c><00:30:52.590><c> beers</c>

00:30:52.820 --> 00:30:52.830 align:start position:0%
parsing a few ten thousands of beers
 

00:30:52.830 --> 00:30:54.920 align:start position:0%
parsing a few ten thousands of beers
that<00:30:53.100><c> come</c><00:30:53.340><c> from</c><00:30:53.490><c> this</c><00:30:53.670><c> JSON</c><00:30:53.940><c> file</c><00:30:54.270><c> that's</c><00:30:54.780><c> a</c>

00:30:54.920 --> 00:30:54.930 align:start position:0%
that come from this JSON file that's a
 

00:30:54.930 --> 00:30:56.570 align:start position:0%
that come from this JSON file that's a
big<00:30:55.110><c> allocation</c><00:30:55.710><c> and</c><00:30:55.890><c> it's</c><00:30:56.250><c> almost</c>

00:30:56.570 --> 00:30:56.580 align:start position:0%
big allocation and it's almost
 

00:30:56.580 --> 00:30:58.970 align:start position:0%
big allocation and it's almost
guaranteed<00:30:57.000><c> well</c><00:30:57.690><c> it's</c><00:30:58.110><c> actually</c><00:30:58.260><c> visible</c><00:30:58.860><c> as</c>

00:30:58.970 --> 00:30:58.980 align:start position:0%
guaranteed well it's actually visible as
 

00:30:58.980 --> 00:31:00.920 align:start position:0%
guaranteed well it's actually visible as
well<00:30:59.010><c> that</c><00:30:59.640><c> the</c><00:30:59.760><c> garbage</c><00:31:00.090><c> collector</c><00:31:00.510><c> will</c><00:31:00.540><c> run</c>

00:31:00.920 --> 00:31:00.930 align:start position:0%
well that the garbage collector will run
 

00:31:00.930 --> 00:31:02.600 align:start position:0%
well that the garbage collector will run
and<00:31:01.200><c> have</c><00:31:01.380><c> to</c><00:31:01.530><c> clean</c><00:31:01.770><c> up</c><00:31:01.950><c> those</c><00:31:02.100><c> things</c><00:31:02.400><c> and</c>

00:31:02.600 --> 00:31:02.610 align:start position:0%
and have to clean up those things and
 

00:31:02.610 --> 00:31:05.180 align:start position:0%
and have to clean up those things and
maybe<00:31:02.730><c> even</c><00:31:03.060><c> pause</c><00:31:03.300><c> my</c><00:31:03.510><c> application</c><00:31:04.170><c> so</c><00:31:05.010><c> let's</c>

00:31:05.180 --> 00:31:05.190 align:start position:0%
maybe even pause my application so let's
 

00:31:05.190 --> 00:31:07.940 align:start position:0%
maybe even pause my application so let's
see<00:31:05.370><c> if</c><00:31:05.490><c> we</c><00:31:05.520><c> can</c><00:31:05.820><c> optimize</c><00:31:05.940><c> this</c><00:31:06.420><c> thing</c><00:31:06.860><c> so</c><00:31:07.860><c> we</c>

00:31:07.940 --> 00:31:07.950 align:start position:0%
see if we can optimize this thing so we
 

00:31:07.950 --> 00:31:09.650 align:start position:0%
see if we can optimize this thing so we
profiled<00:31:08.490><c> we</c><00:31:08.610><c> looked</c><00:31:08.820><c> at</c><00:31:08.940><c> the</c><00:31:09.120><c> chart</c><00:31:09.420><c> there</c>

00:31:09.650 --> 00:31:09.660 align:start position:0%
profiled we looked at the chart there
 

00:31:09.660 --> 00:31:11.150 align:start position:0%
profiled we looked at the chart there
and<00:31:09.840><c> we</c><00:31:09.930><c> saw</c><00:31:10.140><c> that</c><00:31:10.320><c> there's</c><00:31:10.500><c> a</c><00:31:10.560><c> lot</c><00:31:10.740><c> of</c><00:31:10.860><c> memory</c>

00:31:11.150 --> 00:31:11.160 align:start position:0%
and we saw that there's a lot of memory
 

00:31:11.160 --> 00:31:14.450 align:start position:0%
and we saw that there's a lot of memory
traffic<00:31:11.400><c> going</c><00:31:11.820><c> on</c><00:31:11.970><c> and</c><00:31:12.210><c> in</c><00:31:12.300><c> fact</c><00:31:12.440><c> I</c><00:31:13.460><c> cannot</c>

00:31:14.450 --> 00:31:14.460 align:start position:0%
traffic going on and in fact I cannot
 

00:31:14.460 --> 00:31:16.880 align:start position:0%
traffic going on and in fact I cannot
scroll<00:31:14.880><c> in</c><00:31:15.090><c> there</c><00:31:15.300><c> but</c><00:31:16.200><c> just</c><00:31:16.590><c> believe</c><00:31:16.860><c> me</c>

00:31:16.880 --> 00:31:16.890 align:start position:0%
scroll in there but just believe me
 

00:31:16.890 --> 00:31:18.350 align:start position:0%
scroll in there but just believe me
there's<00:31:17.190><c> lots</c><00:31:17.400><c> of</c><00:31:17.520><c> memory</c><00:31:17.820><c> traffic</c><00:31:18.060><c> and</c>

00:31:18.350 --> 00:31:18.360 align:start position:0%
there's lots of memory traffic and
 

00:31:18.360 --> 00:31:21.470 align:start position:0%
there's lots of memory traffic and
that's<00:31:18.510><c> in</c><00:31:18.780><c> using</c><00:31:19.380><c> garbage</c><00:31:19.950><c> collection</c><00:31:20.550><c> now</c>

00:31:21.470 --> 00:31:21.480 align:start position:0%
that's in using garbage collection now
 

00:31:21.480 --> 00:31:23.300 align:start position:0%
that's in using garbage collection now
we<00:31:21.750><c> could</c><00:31:21.960><c> rewrite</c><00:31:22.200><c> our</c><00:31:22.410><c> code</c><00:31:22.770><c> a</c><00:31:22.800><c> little</c><00:31:23.040><c> bit</c>

00:31:23.300 --> 00:31:23.310 align:start position:0%
we could rewrite our code a little bit
 

00:31:23.310 --> 00:31:25.820 align:start position:0%
we could rewrite our code a little bit
and<00:31:23.550><c> instead</c><00:31:23.760><c> of</c><00:31:24.030><c> allocating</c><00:31:24.870><c> a</c><00:31:25.260><c> new</c><00:31:25.290><c> B</c>

00:31:25.820 --> 00:31:25.830 align:start position:0%
and instead of allocating a new B
 

00:31:25.830 --> 00:31:28.519 align:start position:0%
and instead of allocating a new B
arrey<00:31:26.190><c> every</c><00:31:26.610><c> time</c><00:31:26.820><c> we</c><00:31:27.000><c> start</c><00:31:27.269><c> loading</c><00:31:27.630><c> this</c>

00:31:28.519 --> 00:31:28.529 align:start position:0%
arrey every time we start loading this
 

00:31:28.529 --> 00:31:32.840 align:start position:0%
arrey every time we start loading this
this<00:31:29.460><c> JSON</c><00:31:29.760><c> file</c><00:31:30.090><c> we</c><00:31:30.720><c> could</c><00:31:30.899><c> also</c><00:31:31.080><c> just</c><00:31:31.850><c> reuse</c>

00:31:32.840 --> 00:31:32.850 align:start position:0%
this JSON file we could also just reuse
 

00:31:32.850 --> 00:31:34.789 align:start position:0%
this JSON file we could also just reuse
the<00:31:33.059><c> existing</c><00:31:33.149><c> one</c><00:31:33.720><c> so</c><00:31:33.990><c> I</c><00:31:34.019><c> have</c><00:31:34.140><c> an</c><00:31:34.260><c> optimized</c>

00:31:34.789 --> 00:31:34.799 align:start position:0%
the existing one so I have an optimized
 

00:31:34.799 --> 00:31:36.740 align:start position:0%
the existing one so I have an optimized
version<00:31:34.890><c> which</c><00:31:35.399><c> is</c><00:31:35.549><c> almost</c><00:31:36.090><c> the</c><00:31:36.240><c> same</c><00:31:36.480><c> the</c>

00:31:36.740 --> 00:31:36.750 align:start position:0%
version which is almost the same the
 

00:31:36.750 --> 00:31:39.350 align:start position:0%
version which is almost the same the
only<00:31:37.559><c> thing</c><00:31:37.769><c> I'm</c><00:31:37.890><c> doing</c><00:31:38.220><c> is</c><00:31:38.399><c> checking</c><00:31:38.820><c> if</c><00:31:39.179><c> the</c>

00:31:39.350 --> 00:31:39.360 align:start position:0%
only thing I'm doing is checking if the
 

00:31:39.360 --> 00:31:42.080 align:start position:0%
only thing I'm doing is checking if the
object<00:31:39.690><c> is</c><00:31:39.809><c> already</c><00:31:40.350><c> stored</c><00:31:40.830><c> in</c><00:31:41.010><c> memory</c><00:31:41.220><c> if</c><00:31:41.640><c> it</c>

00:31:42.080 --> 00:31:42.090 align:start position:0%
object is already stored in memory if it
 

00:31:42.090 --> 00:31:44.120 align:start position:0%
object is already stored in memory if it
is<00:31:42.210><c> I</c><00:31:42.390><c> just</c><00:31:42.720><c> replaced</c><00:31:43.110><c> the</c><00:31:43.289><c> rating</c><00:31:43.679><c> and</c><00:31:43.919><c> maybe</c>

00:31:44.120 --> 00:31:44.130 align:start position:0%
is I just replaced the rating and maybe
 

00:31:44.130 --> 00:31:46.970 align:start position:0%
is I just replaced the rating and maybe
the<00:31:44.370><c> number</c><00:31:44.519><c> of</c><00:31:44.760><c> votes</c><00:31:45.320><c> reason</c><00:31:46.320><c> for</c><00:31:46.500><c> that</c><00:31:46.590><c> is</c><00:31:46.799><c> I</c>

00:31:46.970 --> 00:31:46.980 align:start position:0%
the number of votes reason for that is I
 

00:31:46.980 --> 00:31:48.919 align:start position:0%
the number of votes reason for that is I
don't<00:31:47.340><c> think</c><00:31:47.580><c> there's</c><00:31:47.820><c> gonna</c><00:31:48.210><c> be</c><00:31:48.360><c> a</c><00:31:48.390><c> new</c><00:31:48.659><c> beer</c>

00:31:48.919 --> 00:31:48.929 align:start position:0%
don't think there's gonna be a new beer
 

00:31:48.929 --> 00:31:50.870 align:start position:0%
don't think there's gonna be a new beer
every<00:31:49.350><c> five</c><00:31:49.620><c> minutes</c><00:31:49.799><c> whenever</c><00:31:50.399><c> I</c><00:31:50.490><c> would</c><00:31:50.580><c> load</c>

00:31:50.870 --> 00:31:50.880 align:start position:0%
every five minutes whenever I would load
 

00:31:50.880 --> 00:31:53.060 align:start position:0%
every five minutes whenever I would load
these<00:31:51.029><c> goats</c><00:31:51.330><c> and</c><00:31:51.600><c> I</c><00:31:52.080><c> also</c><00:31:52.169><c> don't</c><00:31:52.590><c> think</c><00:31:52.679><c> that</c>

00:31:53.060 --> 00:31:53.070 align:start position:0%
these goats and I also don't think that
 

00:31:53.070 --> 00:31:54.590 align:start position:0%
these goats and I also don't think that
it<00:31:53.250><c> really</c><00:31:53.309><c> matters</c><00:31:53.640><c> that</c><00:31:54.149><c> the</c><00:31:54.299><c> number</c><00:31:54.570><c> of</c>

00:31:54.590 --> 00:31:54.600 align:start position:0%
it really matters that the number of
 

00:31:54.600 --> 00:31:56.990 align:start position:0%
it really matters that the number of
votes<00:31:54.899><c> and</c><00:31:55.200><c> the</c><00:31:55.320><c> rating</c><00:31:55.679><c> is</c><00:31:55.799><c> real</c><00:31:56.100><c> time</c><00:31:56.370><c> so</c>

00:31:56.990 --> 00:31:57.000 align:start position:0%
votes and the rating is real time so
 

00:31:57.000 --> 00:31:58.789 align:start position:0%
votes and the rating is real time so
every<00:31:57.360><c> five</c><00:31:57.600><c> minutes</c><00:31:57.929><c> for</c><00:31:58.080><c> example</c><00:31:58.200><c> I</c><00:31:58.590><c> could</c>

00:31:58.789 --> 00:31:58.799 align:start position:0%
every five minutes for example I could
 

00:31:58.799 --> 00:32:00.799 align:start position:0%
every five minutes for example I could
load<00:31:59.010><c> this</c><00:31:59.159><c> into</c><00:31:59.370><c> memory</c><00:31:59.760><c> and</c><00:31:59.970><c> just</c><00:32:00.000><c> reuse</c>

00:32:00.799 --> 00:32:00.809 align:start position:0%
load this into memory and just reuse
 

00:32:00.809 --> 00:32:02.570 align:start position:0%
load this into memory and just reuse
what<00:32:01.080><c> I</c><00:32:01.110><c> already</c><00:32:01.320><c> had</c><00:32:01.710><c> and</c><00:32:02.010><c> just</c><00:32:02.190><c> update</c><00:32:02.399><c> a</c>

00:32:02.570 --> 00:32:02.580 align:start position:0%
what I already had and just update a
 

00:32:02.580 --> 00:32:06.529 align:start position:0%
what I already had and just update a
couple<00:32:02.700><c> of</c><00:32:03.029><c> values</c><00:32:03.649><c> in</c><00:32:04.649><c> doing</c><00:32:05.010><c> so</c><00:32:05.250><c> we</c><00:32:06.179><c> can</c><00:32:06.210><c> see</c>

00:32:06.529 --> 00:32:06.539 align:start position:0%
couple of values in doing so we can see
 

00:32:06.539 --> 00:32:11.299 align:start position:0%
couple of values in doing so we can see
in<00:32:06.659><c> the</c><00:32:06.750><c> profiler</c><00:32:08.510><c> let's</c><00:32:09.510><c> go</c><00:32:09.720><c> back</c><00:32:10.309><c> the</c>

00:32:11.299 --> 00:32:11.309 align:start position:0%
in the profiler let's go back the
 

00:32:11.309 --> 00:32:13.669 align:start position:0%
in the profiler let's go back the
optimized<00:32:11.760><c> one</c><00:32:11.970><c> we</c><00:32:12.720><c> can</c><00:32:12.870><c> see</c><00:32:13.080><c> in</c><00:32:13.169><c> a</c><00:32:13.260><c> profiler</c>

00:32:13.669 --> 00:32:13.679 align:start position:0%
optimized one we can see in a profiler
 

00:32:13.679 --> 00:32:15.740 align:start position:0%
optimized one we can see in a profiler
that<00:32:14.039><c> the</c><00:32:14.279><c> memory</c><00:32:14.549><c> usage</c><00:32:14.700><c> here</c><00:32:14.909><c> is</c><00:32:15.240><c> much</c><00:32:15.480><c> more</c>

00:32:15.740 --> 00:32:15.750 align:start position:0%
that the memory usage here is much more
 

00:32:15.750 --> 00:32:18.049 align:start position:0%
that the memory usage here is much more
flat<00:32:16.080><c> okay</c><00:32:16.710><c> there's</c><00:32:16.889><c> the</c><00:32:17.039><c> initial</c><00:32:17.220><c> loads</c><00:32:17.639><c> that</c>

00:32:18.049 --> 00:32:18.059 align:start position:0%
flat okay there's the initial loads that
 

00:32:18.059 --> 00:32:20.539 align:start position:0%
flat okay there's the initial loads that
happens<00:32:18.480><c> but</c><00:32:19.110><c> whenever</c><00:32:19.380><c> I</c><00:32:19.590><c> trigger</c><00:32:19.950><c> a</c><00:32:20.039><c> reload</c>

00:32:20.539 --> 00:32:20.549 align:start position:0%
happens but whenever I trigger a reload
 

00:32:20.549 --> 00:32:22.460 align:start position:0%
happens but whenever I trigger a reload
at<00:32:20.789><c> some</c><00:32:21.000><c> points</c><00:32:21.389><c> which</c><00:32:21.570><c> happens</c><00:32:22.019><c> here</c><00:32:22.440><c> I</c>

00:32:22.460 --> 00:32:22.470 align:start position:0%
at some points which happens here I
 

00:32:22.470 --> 00:32:25.340 align:start position:0%
at some points which happens here I
think<00:32:22.850><c> the</c><00:32:23.850><c> memory</c><00:32:24.120><c> is</c><00:32:24.240><c> pretty</c><00:32:24.510><c> much</c><00:32:24.720><c> flat</c><00:32:24.990><c> it</c>

00:32:25.340 --> 00:32:25.350 align:start position:0%
think the memory is pretty much flat it
 

00:32:25.350 --> 00:32:27.139 align:start position:0%
think the memory is pretty much flat it
only<00:32:25.500><c> scans</c><00:32:25.860><c> all</c><00:32:26.429><c> the</c><00:32:26.549><c> objects</c><00:32:26.880><c> that</c><00:32:26.940><c> are</c><00:32:27.029><c> in</c>

00:32:27.139 --> 00:32:27.149 align:start position:0%
only scans all the objects that are in
 

00:32:27.149 --> 00:32:29.000 align:start position:0%
only scans all the objects that are in
memory<00:32:27.419><c> and</c><00:32:27.720><c> there's</c><00:32:28.230><c> some</c><00:32:28.380><c> updates</c><00:32:28.740><c> and</c>

00:32:29.000 --> 00:32:29.010 align:start position:0%
memory and there's some updates and
 

00:32:29.010 --> 00:32:31.129 align:start position:0%
memory and there's some updates and
that's<00:32:29.190><c> it</c><00:32:29.399><c> it</c><00:32:29.970><c> doesn't</c><00:32:30.389><c> spend</c><00:32:30.690><c> too</c><00:32:30.990><c> many</c>

00:32:31.129 --> 00:32:31.139 align:start position:0%
that's it it doesn't spend too many
 

00:32:31.139 --> 00:32:33.440 align:start position:0%
that's it it doesn't spend too many
allocations<00:32:31.830><c> and</c><00:32:32.010><c> it</c><00:32:32.100><c> doesn't</c><00:32:32.429><c> even</c><00:32:32.549><c> induce</c>

00:32:33.440 --> 00:32:33.450 align:start position:0%
allocations and it doesn't even induce
 

00:32:33.450 --> 00:32:35.720 align:start position:0%
allocations and it doesn't even induce
much<00:32:33.690><c> garbage</c><00:32:33.990><c> collection</c><00:32:34.620><c> there</c><00:32:34.799><c> because</c><00:32:35.610><c> of</c>

00:32:35.720 --> 00:32:35.730 align:start position:0%
much garbage collection there because of
 

00:32:35.730 --> 00:32:37.220 align:start position:0%
much garbage collection there because of
the<00:32:35.820><c> fact</c><00:32:36.029><c> that</c><00:32:36.090><c> I'm</c><00:32:36.269><c> just</c><00:32:36.299><c> updating</c><00:32:37.080><c> and</c>

00:32:37.220 --> 00:32:37.230 align:start position:0%
the fact that I'm just updating and
 

00:32:37.230 --> 00:32:40.810 align:start position:0%
the fact that I'm just updating and
reusing<00:32:37.769><c> the</c><00:32:38.250><c> existing</c><00:32:38.279><c> objects</c><00:32:39.120><c> in</c><00:32:39.240><c> memory</c>

00:32:40.810 --> 00:32:40.820 align:start position:0%
reusing the existing objects in memory
 

00:32:40.820 --> 00:32:43.039 align:start position:0%
reusing the existing objects in memory
the<00:32:41.820><c> point</c><00:32:42.059><c> that</c><00:32:42.210><c> I</c><00:32:42.299><c> want</c><00:32:42.480><c> to</c><00:32:42.570><c> make</c><00:32:42.720><c> here</c><00:32:42.990><c> is</c>

00:32:43.039 --> 00:32:43.049 align:start position:0%
the point that I want to make here is
 

00:32:43.049 --> 00:32:44.509 align:start position:0%
the point that I want to make here is
that<00:32:43.409><c> it</c><00:32:43.529><c> may</c><00:32:43.740><c> make</c><00:32:43.980><c> sense</c><00:32:44.220><c> in</c><00:32:44.429><c> your</c>

00:32:44.509 --> 00:32:44.519 align:start position:0%
that it may make sense in your
 

00:32:44.519 --> 00:32:46.639 align:start position:0%
that it may make sense in your
application<00:32:45.149><c> to</c><00:32:45.269><c> reuse</c><00:32:45.840><c> objects</c><00:32:46.440><c> and</c>

00:32:46.639 --> 00:32:46.649 align:start position:0%
application to reuse objects and
 

00:32:46.649 --> 00:32:49.580 align:start position:0%
application to reuse objects and
eventually<00:32:47.460><c> reuse</c><00:32:48.409><c> dictionaries</c><00:32:49.409><c> and</c>

00:32:49.580 --> 00:32:49.590 align:start position:0%
eventually reuse dictionaries and
 

00:32:49.590 --> 00:32:51.620 align:start position:0%
eventually reuse dictionaries and
collections<00:32:50.070><c> and</c><00:32:50.220><c> so</c><00:32:50.399><c> on</c><00:32:50.580><c> because</c><00:32:51.269><c> that</c><00:32:51.450><c> may</c>

00:32:51.620 --> 00:32:51.630 align:start position:0%
collections and so on because that may
 

00:32:51.630 --> 00:32:53.269 align:start position:0%
collections and so on because that may
mean<00:32:51.870><c> that</c><00:32:51.899><c> you're</c><00:32:52.260><c> doing</c><00:32:52.409><c> fewer</c><00:32:52.799><c> allocations</c>

00:32:53.269 --> 00:32:53.279 align:start position:0%
mean that you're doing fewer allocations
 

00:32:53.279 --> 00:32:56.090 align:start position:0%
mean that you're doing fewer allocations
in<00:32:53.940><c> my</c><00:32:54.179><c> case</c><00:32:54.419><c> here</c><00:32:54.720><c> the</c><00:32:55.380><c> shape</c><00:32:55.710><c> of</c><00:32:55.919><c> my</c>

00:32:56.090 --> 00:32:56.100 align:start position:0%
in my case here the shape of my
 

00:32:56.100 --> 00:32:57.680 align:start position:0%
in my case here the shape of my
dictionary<00:32:56.340><c> would</c><00:32:56.820><c> probably</c><00:32:57.210><c> be</c><00:32:57.360><c> the</c><00:32:57.480><c> same</c>

00:32:57.680 --> 00:32:57.690 align:start position:0%
dictionary would probably be the same
 

00:32:57.690 --> 00:32:59.210 align:start position:0%
dictionary would probably be the same
the<00:32:57.870><c> only</c><00:32:57.929><c> thing</c><00:32:58.289><c> that</c><00:32:58.440><c> I</c><00:32:58.470><c> would</c><00:32:58.679><c> want</c><00:32:58.919><c> to</c><00:32:59.039><c> have</c>

00:32:59.210 --> 00:32:59.220 align:start position:0%
the only thing that I would want to have
 

00:32:59.220 --> 00:33:01.430 align:start position:0%
the only thing that I would want to have
is<00:32:59.460><c> updated</c><00:33:00.090><c> ratings</c><00:33:00.510><c> and</c><00:33:00.659><c> updated</c><00:33:01.080><c> number</c><00:33:01.350><c> of</c>

00:33:01.430 --> 00:33:01.440 align:start position:0%
is updated ratings and updated number of
 

00:33:01.440 --> 00:33:03.590 align:start position:0%
is updated ratings and updated number of
votes<00:33:01.679><c> so</c><00:33:02.250><c> all</c><00:33:02.460><c> the</c><00:33:02.610><c> rest</c><00:33:02.789><c> could</c><00:33:03.029><c> be</c><00:33:03.210><c> the</c><00:33:03.330><c> same</c>

00:33:03.590 --> 00:33:03.600 align:start position:0%
votes so all the rest could be the same
 

00:33:03.600 --> 00:33:06.139 align:start position:0%
votes so all the rest could be the same
I<00:33:03.809><c> could</c><00:33:04.019><c> reuse</c><00:33:04.529><c> the</c><00:33:05.370><c> collection</c><00:33:05.850><c> and</c><00:33:06.029><c> even</c>

00:33:06.139 --> 00:33:06.149 align:start position:0%
I could reuse the collection and even
 

00:33:06.149 --> 00:33:07.759 align:start position:0%
I could reuse the collection and even
the<00:33:06.389><c> objects</c><00:33:06.720><c> that</c><00:33:06.840><c> are</c><00:33:07.019><c> in</c><00:33:07.049><c> my</c><00:33:07.260><c> collection</c>

00:33:07.759 --> 00:33:07.769 align:start position:0%
the objects that are in my collection
 

00:33:07.769 --> 00:33:10.250 align:start position:0%
the objects that are in my collection
there<00:33:08.419><c> it's</c><00:33:09.419><c> called</c><00:33:09.659><c> the</c><00:33:09.779><c> object</c><00:33:10.049><c> pool</c>

00:33:10.250 --> 00:33:10.260 align:start position:0%
there it's called the object pool
 

00:33:10.260 --> 00:33:11.629 align:start position:0%
there it's called the object pool
pattern<00:33:10.620><c> if</c><00:33:10.860><c> you</c><00:33:10.950><c> don't</c><00:33:11.130><c> know</c><00:33:11.279><c> this</c><00:33:11.429><c> one</c>

00:33:11.629 --> 00:33:11.639 align:start position:0%
pattern if you don't know this one
 

00:33:11.639 --> 00:33:15.049 align:start position:0%
pattern if you don't know this one
there's<00:33:12.570><c> a</c><00:33:12.659><c> nice</c><00:33:13.380><c> article</c><00:33:13.559><c> on</c><00:33:13.980><c> that</c><00:33:14.010><c> I</c><00:33:14.490><c> think</c>

00:33:15.049 --> 00:33:15.059 align:start position:0%
there's a nice article on that I think
 

00:33:15.059 --> 00:33:17.269 align:start position:0%
there's a nice article on that I think
David<00:33:15.360><c> Fowler</c><00:33:15.570><c> also</c><00:33:15.899><c> wrote</c><00:33:16.320><c> a</c><00:33:16.350><c> nice</c><00:33:16.620><c> blog</c><00:33:17.010><c> post</c>

00:33:17.269 --> 00:33:17.279 align:start position:0%
David Fowler also wrote a nice blog post
 

00:33:17.279 --> 00:33:19.519 align:start position:0%
David Fowler also wrote a nice blog post
on<00:33:17.580><c> how</c><00:33:18.330><c> they</c><00:33:18.510><c> use</c><00:33:18.539><c> object</c><00:33:19.110><c> pooling</c><00:33:19.320><c> in</c>

00:33:19.519 --> 00:33:19.529 align:start position:0%
on how they use object pooling in
 

00:33:19.529 --> 00:33:21.470 align:start position:0%
on how they use object pooling in
asp.net<00:33:19.830><c> core</c><00:33:20.490><c> if</c><00:33:20.639><c> you</c><00:33:20.760><c> want</c><00:33:20.940><c> to</c><00:33:21.029><c> read</c><00:33:21.210><c> up</c><00:33:21.330><c> on</c>

00:33:21.470 --> 00:33:21.480 align:start position:0%
asp.net core if you want to read up on
 

00:33:21.480 --> 00:33:24.289 align:start position:0%
asp.net core if you want to read up on
that<00:33:21.769><c> and</c><00:33:22.769><c> if</c><00:33:22.950><c> you</c><00:33:23.100><c> just</c><00:33:23.460><c> want</c><00:33:23.700><c> a</c><00:33:23.789><c> pool</c><00:33:24.029><c> of</c>

00:33:24.289 --> 00:33:24.299 align:start position:0%
that and if you just want a pool of
 

00:33:24.299 --> 00:33:26.539 align:start position:0%
that and if you just want a pool of
objects<00:33:24.690><c> that</c><00:33:24.750><c> you</c><00:33:24.960><c> can</c><00:33:25.110><c> reuse</c><00:33:25.500><c> the</c><00:33:26.100><c> system</c>

00:33:26.539 --> 00:33:26.549 align:start position:0%
objects that you can reuse the system
 

00:33:26.549 --> 00:33:28.279 align:start position:0%
objects that you can reuse the system
that<00:33:26.700><c> buffers</c><00:33:27.059><c> that</c><00:33:27.090><c> array</c><00:33:27.480><c> pool</c><00:33:27.750><c> is</c><00:33:27.929><c> a</c><00:33:27.960><c> really</c>

00:33:28.279 --> 00:33:28.289 align:start position:0%
that buffers that array pool is a really
 

00:33:28.289 --> 00:33:30.919 align:start position:0%
that buffers that array pool is a really
nice<00:33:28.440><c> one</c><00:33:28.649><c> where</c><00:33:28.919><c> you</c><00:33:29.730><c> can</c><00:33:29.909><c> recycle</c><00:33:30.389><c> arrays</c>

00:33:30.919 --> 00:33:30.929 align:start position:0%
nice one where you can recycle arrays
 

00:33:30.929 --> 00:33:32.930 align:start position:0%
nice one where you can recycle arrays
instead<00:33:31.409><c> of</c><00:33:31.529><c> reallocating</c><00:33:32.309><c> arrays</c><00:33:32.580><c> whenever</c>

00:33:32.930 --> 00:33:32.940 align:start position:0%
instead of reallocating arrays whenever
 

00:33:32.940 --> 00:33:34.299 align:start position:0%
instead of reallocating arrays whenever
you<00:33:33.090><c> need</c><00:33:33.240><c> them</c>

00:33:34.299 --> 00:33:34.309 align:start position:0%
you need them
 

00:33:34.309 --> 00:33:37.730 align:start position:0%
you need them
right<00:33:35.360><c> so</c><00:33:36.360><c> in</c><00:33:36.600><c> summary</c><00:33:37.019><c> the</c><00:33:37.409><c> garbage</c>

00:33:37.730 --> 00:33:37.740 align:start position:0%
right so in summary the garbage
 

00:33:37.740 --> 00:33:39.560 align:start position:0%
right so in summary the garbage
collector<00:33:38.190><c> is</c><00:33:38.220><c> optimized</c><00:33:38.760><c> for</c><00:33:38.970><c> high</c><00:33:39.029><c> memory</c>

00:33:39.560 --> 00:33:39.570 align:start position:0%
collector is optimized for high memory
 

00:33:39.570 --> 00:33:41.720 align:start position:0%
collector is optimized for high memory
traffic<00:33:39.809><c> and</c><00:33:40.230><c> lots</c><00:33:40.529><c> of</c><00:33:40.679><c> short-lived</c><00:33:41.070><c> objects</c>

00:33:41.720 --> 00:33:41.730 align:start position:0%
traffic and lots of short-lived objects
 

00:33:41.730 --> 00:33:44.000 align:start position:0%
traffic and lots of short-lived objects
so<00:33:42.240><c> use</c><00:33:42.779><c> that</c><00:33:42.990><c> knowledge</c><00:33:43.200><c> don't</c><00:33:43.679><c> fear</c>

00:33:44.000 --> 00:33:44.010 align:start position:0%
so use that knowledge don't fear
 

00:33:44.010 --> 00:33:46.549 align:start position:0%
so use that knowledge don't fear
allocations<00:33:44.789><c> it</c><00:33:45.240><c> may</c><00:33:45.450><c> be</c><00:33:45.510><c> perfectly</c><00:33:46.110><c> fine</c><00:33:46.350><c> to</c>

00:33:46.549 --> 00:33:46.559 align:start position:0%
allocations it may be perfectly fine to
 

00:33:46.559 --> 00:33:48.139 align:start position:0%
allocations it may be perfectly fine to
allocate<00:33:46.919><c> lots</c><00:33:47.190><c> and</c><00:33:47.370><c> lots</c><00:33:47.519><c> of</c><00:33:47.640><c> objects</c><00:33:48.000><c> in</c>

00:33:48.139 --> 00:33:48.149 align:start position:0%
allocate lots and lots of objects in
 

00:33:48.149 --> 00:33:49.909 align:start position:0%
allocate lots and lots of objects in
your<00:33:48.299><c> codes</c><00:33:48.570><c> when</c><00:33:49.080><c> the</c><00:33:49.200><c> garbage</c><00:33:49.500><c> collector</c>

00:33:49.909 --> 00:33:49.919 align:start position:0%
your codes when the garbage collector
 

00:33:49.919 --> 00:33:52.639 align:start position:0%
your codes when the garbage collector
can<00:33:50.130><c> collect</c><00:33:50.490><c> them</c><00:33:50.640><c> easily</c><00:33:51.330><c> and</c><00:33:51.630><c> early</c><00:33:52.169><c> it</c>

00:33:52.639 --> 00:33:52.649 align:start position:0%
can collect them easily and early it
 

00:33:52.649 --> 00:33:55.310 align:start position:0%
can collect them easily and early it
doesn't<00:33:53.100><c> even</c><00:33:53.220><c> matter</c><00:33:53.519><c> so</c><00:33:54.330><c> don't</c><00:33:54.630><c> just</c><00:33:54.929><c> go</c><00:33:55.049><c> and</c>

00:33:55.310 --> 00:33:55.320 align:start position:0%
doesn't even matter so don't just go and
 

00:33:55.320 --> 00:33:58.430 align:start position:0%
doesn't even matter so don't just go and
optimize<00:33:55.740><c> always</c><00:33:56.250><c> measure</c><00:33:56.840><c> your</c><00:33:57.840><c> application</c>

00:33:58.430 --> 00:33:58.440 align:start position:0%
optimize always measure your application
 

00:33:58.440 --> 00:34:00.139 align:start position:0%
optimize always measure your application
and<00:33:58.590><c> how</c><00:33:58.740><c> it</c><00:33:58.890><c> is</c><00:33:59.010><c> behaving</c><00:33:59.220><c> and</c><00:33:59.760><c> know</c><00:33:59.970><c> when</c>

00:34:00.139 --> 00:34:00.149 align:start position:0%
and how it is behaving and know when
 

00:34:00.149 --> 00:34:02.060 align:start position:0%
and how it is behaving and know when
allocations<00:34:00.720><c> happen</c><00:34:01.110><c> and</c><00:34:01.260><c> based</c><00:34:01.740><c> on</c><00:34:01.950><c> that</c>

00:34:02.060 --> 00:34:02.070 align:start position:0%
allocations happen and based on that
 

00:34:02.070 --> 00:34:03.740 align:start position:0%
allocations happen and based on that
knowledge<00:34:02.340><c> look</c><00:34:02.730><c> into</c><00:34:03.029><c> whether</c><00:34:03.510><c> you</c><00:34:03.690><c> should</c>

00:34:03.740 --> 00:34:03.750 align:start position:0%
knowledge look into whether you should
 

00:34:03.750 --> 00:34:05.750 align:start position:0%
knowledge look into whether you should
optimize<00:34:04.140><c> this</c><00:34:04.500><c> thing</c><00:34:04.710><c> or</c><00:34:05.159><c> not</c>

00:34:05.750 --> 00:34:05.760 align:start position:0%
optimize this thing or not
 

00:34:05.760 --> 00:34:08.570 align:start position:0%
optimize this thing or not
now<00:34:06.750><c> let's</c><00:34:07.440><c> take</c><00:34:07.649><c> a</c><00:34:07.679><c> different</c><00:34:07.919><c> angle</c><00:34:08.220><c> and</c>

00:34:08.570 --> 00:34:08.580 align:start position:0%
now let's take a different angle and
 

00:34:08.580 --> 00:34:10.550 align:start position:0%
now let's take a different angle and
let's<00:34:08.820><c> explore</c><00:34:09.030><c> the</c><00:34:09.570><c> heap</c><00:34:09.750><c> let's</c><00:34:10.050><c> see</c><00:34:10.260><c> what</c>

00:34:10.550 --> 00:34:10.560 align:start position:0%
let's explore the heap let's see what
 

00:34:10.560 --> 00:34:13.879 align:start position:0%
let's explore the heap let's see what
dotnet<00:34:11.070><c> is</c><00:34:11.280><c> actually</c><00:34:11.849><c> storing</c><00:34:12.330><c> in</c><00:34:13.020><c> memory</c><00:34:13.409><c> to</c>

00:34:13.879 --> 00:34:13.889 align:start position:0%
dotnet is actually storing in memory to
 

00:34:13.889 --> 00:34:16.190 align:start position:0%
dotnet is actually storing in memory to
see<00:34:14.159><c> how</c><00:34:14.490><c> how</c><00:34:15.330><c> your</c><00:34:15.480><c> application</c><00:34:16.050><c> or</c><00:34:16.169><c> your</c>

00:34:16.190 --> 00:34:16.200 align:start position:0%
see how how your application or your
 

00:34:16.200 --> 00:34:19.270 align:start position:0%
see how how your application or your
memory<00:34:16.589><c> space</c><00:34:16.859><c> works</c><00:34:17.190><c> so</c><00:34:18.179><c> how</c><00:34:18.780><c> would</c><00:34:18.839><c> you</c>

00:34:19.270 --> 00:34:19.280 align:start position:0%
memory space works so how would you
 

00:34:19.280 --> 00:34:22.190 align:start position:0%
memory space works so how would you
build<00:34:20.280><c> something</c><00:34:20.730><c> like</c><00:34:20.940><c> dotnet</c><00:34:21.690><c> samanage</c>

00:34:22.190 --> 00:34:22.200 align:start position:0%
build something like dotnet samanage
 

00:34:22.200 --> 00:34:24.530 align:start position:0%
build something like dotnet samanage
type<00:34:22.470><c> system</c><00:34:22.889><c> that</c><00:34:23.520><c> is</c><00:34:23.639><c> stored</c><00:34:23.940><c> in</c><00:34:24.149><c> memory</c><00:34:24.419><c> of</c>

00:34:24.530 --> 00:34:24.540 align:start position:0%
type system that is stored in memory of
 

00:34:24.540 --> 00:34:27.530 align:start position:0%
type system that is stored in memory of
a<00:34:24.720><c> computer</c><00:34:25.250><c> and</c><00:34:26.250><c> that</c><00:34:26.280><c> is</c><00:34:26.460><c> both</c><00:34:26.730><c> CPU</c><00:34:27.330><c> and</c>

00:34:27.530 --> 00:34:27.540 align:start position:0%
a computer and that is both CPU and
 

00:34:27.540 --> 00:34:29.359 align:start position:0%
a computer and that is both CPU and
memory<00:34:28.080><c> friendly</c><00:34:28.710><c> how</c><00:34:28.919><c> would</c><00:34:29.129><c> you</c><00:34:29.250><c> build</c>

00:34:29.359 --> 00:34:29.369 align:start position:0%
memory friendly how would you build
 

00:34:29.369 --> 00:34:31.970 align:start position:0%
memory friendly how would you build
something<00:34:29.669><c> like</c><00:34:29.970><c> that</c><00:34:30.149><c> well</c><00:34:30.869><c> probably</c><00:34:31.290><c> you</c>

00:34:31.970 --> 00:34:31.980 align:start position:0%
something like that well probably you
 

00:34:31.980 --> 00:34:34.460 align:start position:0%
something like that well probably you
would<00:34:32.129><c> go</c><00:34:32.339><c> with</c><00:34:32.700><c> something</c><00:34:33.179><c> that</c><00:34:33.419><c> resembles</c><00:34:34.290><c> a</c>

00:34:34.460 --> 00:34:34.470 align:start position:0%
would go with something that resembles a
 

00:34:34.470 --> 00:34:36.230 align:start position:0%
would go with something that resembles a
relational<00:34:35.040><c> database</c><00:34:35.220><c> you</c><00:34:35.760><c> would</c><00:34:35.879><c> probably</c>

00:34:36.230 --> 00:34:36.240 align:start position:0%
relational database you would probably
 

00:34:36.240 --> 00:34:38.570 align:start position:0%
relational database you would probably
have<00:34:36.270><c> a</c><00:34:36.419><c> table</c><00:34:37.409><c> that</c><00:34:37.619><c> stores</c><00:34:38.250><c> information</c>

00:34:38.570 --> 00:34:38.580 align:start position:0%
have a table that stores information
 

00:34:38.580 --> 00:34:41.329 align:start position:0%
have a table that stores information
about<00:34:39.119><c> the</c><00:34:39.389><c> type</c><00:34:39.629><c> I</c><00:34:39.929><c> have</c><00:34:40.649><c> a</c><00:34:40.679><c> class</c><00:34:41.040><c> named</c>

00:34:41.329 --> 00:34:41.339 align:start position:0%
about the type I have a class named
 

00:34:41.339 --> 00:34:43.609 align:start position:0%
about the type I have a class named
person<00:34:41.849><c> this</c><00:34:42.300><c> person</c><00:34:42.780><c> has</c><00:34:42.960><c> three</c><00:34:43.230><c> properties</c>

00:34:43.609 --> 00:34:43.619 align:start position:0%
person this person has three properties
 

00:34:43.619 --> 00:34:46.460 align:start position:0%
person this person has three properties
name<00:34:44.250><c> a</c><00:34:44.460><c> first</c><00:34:44.730><c> name</c><00:34:45.000><c> last</c><00:34:45.270><c> name</c><00:34:45.570><c> and</c><00:34:45.869><c> maybe</c><00:34:46.139><c> H</c>

00:34:46.460 --> 00:34:46.470 align:start position:0%
name a first name last name and maybe H
 

00:34:46.470 --> 00:34:48.889 align:start position:0%
name a first name last name and maybe H
first<00:34:47.339><c> name</c><00:34:47.609><c> is</c><00:34:47.730><c> a</c><00:34:47.760><c> string</c><00:34:48.030><c> last</c><00:34:48.510><c> name</c><00:34:48.720><c> is</c><00:34:48.869><c> a</c>

00:34:48.889 --> 00:34:48.899 align:start position:0%
first name is a string last name is a
 

00:34:48.899 --> 00:34:49.250 align:start position:0%
first name is a string last name is a
string

00:34:49.250 --> 00:34:49.260 align:start position:0%
string
 

00:34:49.260 --> 00:34:52.129 align:start position:0%
string
H<00:34:49.500><c> is</c><00:34:49.800><c> an</c><00:34:49.950><c> integer</c><00:34:50.570><c> information</c><00:34:51.570><c> about</c><00:34:51.839><c> the</c>

00:34:52.129 --> 00:34:52.139 align:start position:0%
H is an integer information about the
 

00:34:52.139 --> 00:34:54.470 align:start position:0%
H is an integer information about the
types<00:34:52.560><c> that</c><00:34:52.710><c> you</c><00:34:52.950><c> have</c><00:34:53.099><c> in</c><00:34:53.250><c> memory</c><00:34:53.580><c> then</c><00:34:54.450><c> you</c>

00:34:54.470 --> 00:34:54.480 align:start position:0%
types that you have in memory then you
 

00:34:54.480 --> 00:34:56.270 align:start position:0%
types that you have in memory then you
would<00:34:54.690><c> probably</c><00:34:55.050><c> have</c><00:34:55.080><c> another</c><00:34:55.679><c> table</c><00:34:55.980><c> that</c>

00:34:56.270 --> 00:34:56.280 align:start position:0%
would probably have another table that
 

00:34:56.280 --> 00:34:58.550 align:start position:0%
would probably have another table that
just<00:34:56.700><c> contains</c><00:34:57.089><c> the</c><00:34:57.210><c> values</c><00:34:57.630><c> so</c><00:34:58.230><c> for</c><00:34:58.440><c> my</c>

00:34:58.550 --> 00:34:58.560 align:start position:0%
just contains the values so for my
 

00:34:58.560 --> 00:35:00.950 align:start position:0%
just contains the values so for my
person<00:34:59.280><c> there</c><00:34:59.760><c> would</c><00:34:59.880><c> be</c><00:34:59.910><c> the</c><00:35:00.210><c> value</c><00:35:00.510><c> Martin</c>

00:35:00.950 --> 00:35:00.960 align:start position:0%
person there would be the value Martin
 

00:35:00.960 --> 00:35:04.490 align:start position:0%
person there would be the value Martin
Bal<00:35:01.230><c> my</c><00:35:01.800><c> age</c><00:35:02.119><c> and</c><00:35:03.119><c> I</c><00:35:03.480><c> could</c><00:35:03.690><c> run</c><00:35:03.869><c> a</c><00:35:03.930><c> query</c><00:35:04.380><c> that</c>

00:35:04.490 --> 00:35:04.500 align:start position:0%
Bal my age and I could run a query that
 

00:35:04.500 --> 00:35:06.680 align:start position:0%
Bal my age and I could run a query that
basically<00:35:05.130><c> links</c><00:35:05.520><c> the</c><00:35:05.700><c> values</c><00:35:06.060><c> and</c><00:35:06.300><c> the</c><00:35:06.480><c> type</c>

00:35:06.680 --> 00:35:06.690 align:start position:0%
basically links the values and the type
 

00:35:06.690 --> 00:35:08.540 align:start position:0%
basically links the values and the type
information<00:35:07.290><c> together</c><00:35:07.470><c> whenever</c><00:35:08.250><c> I'm</c>

00:35:08.540 --> 00:35:08.550 align:start position:0%
information together whenever I'm
 

00:35:08.550 --> 00:35:10.220 align:start position:0%
information together whenever I'm
running<00:35:08.849><c> my</c><00:35:08.940><c> application</c><00:35:09.540><c> so</c><00:35:09.570><c> you</c><00:35:09.750><c> get</c><00:35:09.960><c> some</c>

00:35:10.220 --> 00:35:10.230 align:start position:0%
running my application so you get some
 

00:35:10.230 --> 00:35:12.650 align:start position:0%
running my application so you get some
sort<00:35:10.500><c> of</c><00:35:10.589><c> a</c><00:35:10.680><c> relational</c><00:35:11.160><c> database</c><00:35:11.480><c> to</c><00:35:12.480><c> build</c>

00:35:12.650 --> 00:35:12.660 align:start position:0%
sort of a relational database to build
 

00:35:12.660 --> 00:35:14.480 align:start position:0%
sort of a relational database to build
something<00:35:12.990><c> like</c><00:35:13.170><c> that</c><00:35:13.320><c> probably</c><00:35:14.070><c> you'll</c><00:35:14.430><c> have</c>

00:35:14.480 --> 00:35:14.490 align:start position:0%
something like that probably you'll have
 

00:35:14.490 --> 00:35:16.130 align:start position:0%
something like that probably you'll have
another<00:35:14.820><c> table</c><00:35:15.150><c> that</c><00:35:15.450><c> stores</c><00:35:15.690><c> method</c>

00:35:16.130 --> 00:35:16.140 align:start position:0%
another table that stores method
 

00:35:16.140 --> 00:35:18.349 align:start position:0%
another table that stores method
pointers<00:35:16.560><c> like</c><00:35:16.800><c> where</c><00:35:17.070><c> can</c><00:35:17.310><c> I</c><00:35:17.430><c> get</c><00:35:17.670><c> for</c>

00:35:18.349 --> 00:35:18.359 align:start position:0%
pointers like where can I get for
 

00:35:18.359 --> 00:35:20.630 align:start position:0%
pointers like where can I get for
example<00:35:18.450><c> the</c><00:35:18.869><c> create</c><00:35:19.740><c> new</c><00:35:19.920><c> person</c><00:35:20.400><c> or</c><00:35:20.550><c> the</c>

00:35:20.630 --> 00:35:20.640 align:start position:0%
example the create new person or the
 

00:35:20.640 --> 00:35:22.670 align:start position:0%
example the create new person or the
constructor<00:35:21.180><c> of</c><00:35:21.210><c> this</c><00:35:21.450><c> type</c><00:35:22.020><c> object</c><00:35:22.410><c> and</c><00:35:22.560><c> so</c>

00:35:22.670 --> 00:35:22.680 align:start position:0%
constructor of this type object and so
 

00:35:22.680 --> 00:35:25.400 align:start position:0%
constructor of this type object and so
on<00:35:22.800><c> and</c><00:35:22.950><c> some</c><00:35:23.580><c> other</c><00:35:23.960><c> inheritance</c><00:35:24.960><c> things</c><00:35:25.230><c> for</c>

00:35:25.400 --> 00:35:25.410 align:start position:0%
on and some other inheritance things for
 

00:35:25.410 --> 00:35:27.470 align:start position:0%
on and some other inheritance things for
example<00:35:25.500><c> like</c><00:35:26.280><c> how</c><00:35:26.460><c> is</c><00:35:26.609><c> the</c><00:35:26.730><c> type</c><00:35:26.940><c> structured</c>

00:35:27.470 --> 00:35:27.480 align:start position:0%
example like how is the type structured
 

00:35:27.480 --> 00:35:30.710 align:start position:0%
example like how is the type structured
is<00:35:27.690><c> personal</c><00:35:28.200><c> subclass</c><00:35:28.619><c> of</c><00:35:29.390><c> something</c><00:35:30.390><c> in</c><00:35:30.599><c> the</c>

00:35:30.710 --> 00:35:30.720 align:start position:0%
is personal subclass of something in the
 

00:35:30.720 --> 00:35:34.040 align:start position:0%
is personal subclass of something in the
application<00:35:31.320><c> things</c><00:35:31.589><c> like</c><00:35:31.740><c> that</c><00:35:32.270><c> well</c><00:35:33.270><c> it</c>

00:35:34.040 --> 00:35:34.050 align:start position:0%
application things like that well it
 

00:35:34.050 --> 00:35:36.859 align:start position:0%
application things like that well it
turns<00:35:34.349><c> out</c><00:35:34.530><c> Donuts</c><00:35:35.130><c> works</c><00:35:35.550><c> very</c><00:35:36.030><c> very</c><00:35:36.150><c> similar</c>

00:35:36.859 --> 00:35:36.869 align:start position:0%
turns out Donuts works very very similar
 

00:35:36.869 --> 00:35:39.740 align:start position:0%
turns out Donuts works very very similar
to<00:35:37.050><c> that</c><00:35:37.200><c> structure</c><00:35:37.950><c> so</c><00:35:38.730><c> if</c><00:35:38.849><c> you</c><00:35:38.970><c> push</c><00:35:39.420><c> stuff</c>

00:35:39.740 --> 00:35:39.750 align:start position:0%
to that structure so if you push stuff
 

00:35:39.750 --> 00:35:41.870 align:start position:0%
to that structure so if you push stuff
on<00:35:39.990><c> the</c><00:35:40.140><c> stack</c><00:35:40.380><c> not</c><00:35:40.980><c> managed</c><00:35:41.400><c> by</c><00:35:41.550><c> the</c><00:35:41.609><c> garbage</c>

00:35:41.870 --> 00:35:41.880 align:start position:0%
on the stack not managed by the garbage
 

00:35:41.880 --> 00:35:43.640 align:start position:0%
on the stack not managed by the garbage
collector<00:35:42.000><c> whenever</c><00:35:42.990><c> you</c><00:35:43.260><c> allocate</c>

00:35:43.640 --> 00:35:43.650 align:start position:0%
collector whenever you allocate
 

00:35:43.650 --> 00:35:45.589 align:start position:0%
collector whenever you allocate
something<00:35:43.950><c> what</c><00:35:44.310><c> you</c><00:35:44.460><c> will</c><00:35:44.609><c> get</c><00:35:44.790><c> back</c><00:35:45.030><c> is</c><00:35:45.240><c> an</c>

00:35:45.589 --> 00:35:45.599 align:start position:0%
something what you will get back is an
 

00:35:45.599 --> 00:35:48.380 align:start position:0%
something what you will get back is an
instance<00:35:46.109><c> ID</c><00:35:46.880><c> dotnet</c><00:35:47.880><c> will</c><00:35:48.030><c> work</c>

00:35:48.380 --> 00:35:48.390 align:start position:0%
instance ID dotnet will work
 

00:35:48.390 --> 00:35:49.910 align:start position:0%
instance ID dotnet will work
that<00:35:48.599><c> instanceid</c><00:35:49.109><c> and</c><00:35:49.470><c> follow</c><00:35:49.710><c> that</c>

00:35:49.910 --> 00:35:49.920 align:start position:0%
that instanceid and follow that
 

00:35:49.920 --> 00:35:52.220 align:start position:0%
that instanceid and follow that
instanceid<00:35:50.430><c> to</c><00:35:50.849><c> a</c><00:35:50.880><c> pointer</c><00:35:51.359><c> with</c><00:35:51.569><c> the</c><00:35:51.869><c> values</c>

00:35:52.220 --> 00:35:52.230 align:start position:0%
instanceid to a pointer with the values
 

00:35:52.230 --> 00:35:53.990 align:start position:0%
instanceid to a pointer with the values
that<00:35:52.470><c> live</c><00:35:52.740><c> on</c><00:35:53.010><c> the</c><00:35:53.160><c> stack</c><00:35:53.400><c> so</c><00:35:53.700><c> that's</c>

00:35:53.990 --> 00:35:54.000 align:start position:0%
that live on the stack so that's
 

00:35:54.000 --> 00:35:56.150 align:start position:0%
that live on the stack so that's
something<00:35:54.539><c> that</c><00:35:54.690><c> happens</c><00:35:54.990><c> in</c><00:35:55.109><c> there</c><00:35:55.289><c> for</c>

00:35:56.150 --> 00:35:56.160 align:start position:0%
something that happens in there for
 

00:35:56.160 --> 00:35:58.190 align:start position:0%
something that happens in there for
everything<00:35:56.430><c> on</c><00:35:56.700><c> the</c><00:35:56.789><c> heap</c><00:35:57.000><c> you</c><00:35:57.359><c> will</c><00:35:57.539><c> see</c><00:35:57.779><c> some</c>

00:35:58.190 --> 00:35:58.200 align:start position:0%
everything on the heap you will see some
 

00:35:58.200 --> 00:36:00.140 align:start position:0%
everything on the heap you will see some
table<00:35:58.680><c> structure</c><00:35:59.130><c> you</c><00:35:59.250><c> also</c><00:35:59.400><c> get</c><00:35:59.700><c> an</c><00:35:59.789><c> instance</c>

00:36:00.140 --> 00:36:00.150 align:start position:0%
table structure you also get an instance
 

00:36:00.150 --> 00:36:02.720 align:start position:0%
table structure you also get an instance
ID<00:36:00.359><c> that</c><00:36:01.049><c> points</c><00:36:01.470><c> to</c><00:36:01.650><c> a</c><00:36:01.890><c> table</c><00:36:02.400><c> that</c><00:36:02.549><c> contains</c>

00:36:02.720 --> 00:36:02.730 align:start position:0%
ID that points to a table that contains
 

00:36:02.730 --> 00:36:05.569 align:start position:0%
ID that points to a table that contains
just<00:36:03.390><c> the</c><00:36:03.510><c> values</c><00:36:03.930><c> of</c><00:36:04.079><c> your</c><00:36:04.230><c> type</c><00:36:04.529><c> as</c><00:36:04.829><c> well</c><00:36:05.519><c> as</c>

00:36:05.569 --> 00:36:05.579 align:start position:0%
just the values of your type as well as
 

00:36:05.579 --> 00:36:07.519 align:start position:0%
just the values of your type as well as
a<00:36:05.760><c> pointer</c><00:36:06.269><c> to</c><00:36:06.299><c> another</c><00:36:06.720><c> table</c><00:36:07.019><c> that</c><00:36:07.380><c> contains</c>

00:36:07.519 --> 00:36:07.529 align:start position:0%
a pointer to another table that contains
 

00:36:07.529 --> 00:36:10.220 align:start position:0%
a pointer to another table that contains
the<00:36:07.980><c> type</c><00:36:08.190><c> information</c><00:36:08.940><c> and</c><00:36:09.180><c> the</c><00:36:09.690><c> methods</c><00:36:10.049><c> and</c>

00:36:10.220 --> 00:36:10.230 align:start position:0%
the type information and the methods and
 

00:36:10.230 --> 00:36:11.930 align:start position:0%
the type information and the methods and
so<00:36:10.440><c> on</c><00:36:10.589><c> that</c><00:36:10.769><c> are</c><00:36:10.829><c> in</c><00:36:11.190><c> the</c><00:36:11.339><c> type</c><00:36:11.519><c> that</c><00:36:11.700><c> you</c><00:36:11.849><c> are</c>

00:36:11.930 --> 00:36:11.940 align:start position:0%
so on that are in the type that you are
 

00:36:11.940 --> 00:36:13.940 align:start position:0%
so on that are in the type that you are
making<00:36:12.150><c> use</c><00:36:12.450><c> of</c><00:36:12.480><c> so</c><00:36:13.200><c> that's</c><00:36:13.380><c> nice</c>

00:36:13.940 --> 00:36:13.950 align:start position:0%
making use of so that's nice
 

00:36:13.950 --> 00:36:16.279 align:start position:0%
making use of so that's nice
dotnet<00:36:14.700><c> really</c><00:36:15.059><c> works</c><00:36:15.329><c> like</c><00:36:15.660><c> a</c><00:36:15.690><c> relational</c>

00:36:16.279 --> 00:36:16.289 align:start position:0%
dotnet really works like a relational
 

00:36:16.289 --> 00:36:17.930 align:start position:0%
dotnet really works like a relational
database<00:36:16.470><c> internally</c><00:36:17.309><c> it</c><00:36:17.400><c> has</c><00:36:17.460><c> different</c>

00:36:17.930 --> 00:36:17.940 align:start position:0%
database internally it has different
 

00:36:17.940 --> 00:36:23.470 align:start position:0%
database internally it has different
tables<00:36:18.299><c> that</c><00:36:18.390><c> are</c><00:36:18.450><c> linked</c><00:36:18.839><c> together</c><00:36:20.059><c> now</c>

00:36:23.470 --> 00:36:23.480 align:start position:0%
 
 

00:36:23.480 --> 00:36:26.299 align:start position:0%
 
theories<00:36:24.480><c> nice</c><00:36:24.750><c> let's</c><00:36:25.710><c> see</c><00:36:25.890><c> if</c><00:36:26.010><c> we</c><00:36:26.130><c> can</c>

00:36:26.299 --> 00:36:26.309 align:start position:0%
theories nice let's see if we can
 

00:36:26.309 --> 00:36:28.160 align:start position:0%
theories nice let's see if we can
actually<00:36:26.460><c> explore</c><00:36:27.089><c> this</c><00:36:27.269><c> method</c><00:36:27.660><c> table</c><00:36:27.990><c> or</c>

00:36:28.160 --> 00:36:28.170 align:start position:0%
actually explore this method table or
 

00:36:28.170 --> 00:36:30.230 align:start position:0%
actually explore this method table or
explore<00:36:28.589><c> this</c><00:36:28.740><c> table</c><00:36:29.160><c> in</c><00:36:29.250><c> memory</c><00:36:29.640><c> and</c><00:36:29.819><c> see</c>

00:36:30.230 --> 00:36:30.240 align:start position:0%
explore this table in memory and see
 

00:36:30.240 --> 00:36:31.759 align:start position:0%
explore this table in memory and see
whatever<00:36:30.510><c> is</c><00:36:30.779><c> happening</c><00:36:31.200><c> in</c><00:36:31.319><c> there</c><00:36:31.470><c> there's</c><00:36:31.710><c> a</c>

00:36:31.759 --> 00:36:31.769 align:start position:0%
whatever is happening in there there's a
 

00:36:31.769 --> 00:36:33.829 align:start position:0%
whatever is happening in there there's a
nice<00:36:32.010><c> new</c><00:36:32.579><c> kit</c><00:36:32.730><c> package</c><00:36:33.059><c> called</c><00:36:33.299><c> Microsoft</c>

00:36:33.829 --> 00:36:33.839 align:start position:0%
nice new kit package called Microsoft
 

00:36:33.839 --> 00:36:35.779 align:start position:0%
nice new kit package called Microsoft
Diagnostics<00:36:34.559><c> of</c><00:36:34.680><c> runtime</c><00:36:34.980><c> that</c><00:36:35.160><c> you</c><00:36:35.460><c> can</c><00:36:35.640><c> use</c>

00:36:35.779 --> 00:36:35.789 align:start position:0%
Diagnostics of runtime that you can use
 

00:36:35.789 --> 00:36:38.420 align:start position:0%
Diagnostics of runtime that you can use
for<00:36:36.000><c> this</c><00:36:36.150><c> or</c><00:36:37.019><c> CLR</c><00:36:37.559><c> MD</c><00:36:37.829><c> which</c><00:36:38.039><c> was</c><00:36:38.279><c> the</c>

00:36:38.420 --> 00:36:38.430 align:start position:0%
for this or CLR MD which was the
 

00:36:38.430 --> 00:36:40.640 align:start position:0%
for this or CLR MD which was the
codename<00:36:38.700><c> I</c><00:36:39.029><c> think</c><00:36:39.269><c> for</c><00:36:39.450><c> that</c><00:36:39.480><c> one</c><00:36:39.750><c> and</c><00:36:39.960><c> it</c>

00:36:40.640 --> 00:36:40.650 align:start position:0%
codename I think for that one and it
 

00:36:40.650 --> 00:36:42.170 align:start position:0%
codename I think for that one and it
allows<00:36:40.890><c> you</c><00:36:41.069><c> to</c><00:36:41.130><c> attach</c><00:36:41.730><c> to</c><00:36:41.910><c> a</c><00:36:41.940><c> running</c>

00:36:42.170 --> 00:36:42.180 align:start position:0%
allows you to attach to a running
 

00:36:42.180 --> 00:36:44.150 align:start position:0%
allows you to attach to a running
process<00:36:42.480><c> pause</c><00:36:43.230><c> the</c><00:36:43.410><c> world</c><00:36:43.619><c> to</c><00:36:43.799><c> pause</c><00:36:43.980><c> the</c>

00:36:44.150 --> 00:36:44.160 align:start position:0%
process pause the world to pause the
 

00:36:44.160 --> 00:36:45.920 align:start position:0%
process pause the world to pause the
entire<00:36:44.430><c> application</c><00:36:45.089><c> and</c><00:36:45.240><c> see</c><00:36:45.450><c> what</c><00:36:45.660><c> is</c><00:36:45.779><c> in</c>

00:36:45.920 --> 00:36:45.930 align:start position:0%
entire application and see what is in
 

00:36:45.930 --> 00:36:48.440 align:start position:0%
entire application and see what is in
memory<00:36:46.279><c> my</c><00:36:47.279><c> short</c><00:36:47.579><c> definition</c><00:36:48.029><c> of</c><00:36:48.150><c> that</c><00:36:48.269><c> one</c>

00:36:48.440 --> 00:36:48.450 align:start position:0%
memory my short definition of that one
 

00:36:48.450 --> 00:36:49.910 align:start position:0%
memory my short definition of that one
is<00:36:48.569><c> linked</c><00:36:48.809><c> to</c><00:36:48.990><c> heap</c><00:36:49.170><c> because</c><00:36:49.619><c> you</c><00:36:49.740><c> can</c>

00:36:49.910 --> 00:36:49.920 align:start position:0%
is linked to heap because you can
 

00:36:49.920 --> 00:36:52.250 align:start position:0%
is linked to heap because you can
actually<00:36:50.309><c> query</c><00:36:50.549><c> what</c><00:36:51.420><c> is</c><00:36:51.510><c> in</c><00:36:51.630><c> memory</c><00:36:51.779><c> at</c><00:36:52.019><c> some</c>

00:36:52.250 --> 00:36:52.260 align:start position:0%
actually query what is in memory at some
 

00:36:52.260 --> 00:36:57.490 align:start position:0%
actually query what is in memory at some
point<00:36:52.500><c> in</c><00:36:52.619><c> time</c><00:36:52.650><c> so</c><00:36:53.130><c> let's</c><00:36:53.309><c> look</c><00:36:53.519><c> into</c><00:36:53.839><c> CLR</c><00:36:54.839><c> MD</c>

00:36:57.490 --> 00:36:57.500 align:start position:0%
 
 

00:36:57.500 --> 00:37:00.980 align:start position:0%
 
visual<00:36:58.500><c> studio</c><00:36:58.829><c> there</c><00:36:59.039><c> so</c><00:36:59.940><c> I</c><00:37:00.240><c> have</c><00:37:00.480><c> a</c><00:37:00.509><c> solution</c>

00:37:00.980 --> 00:37:00.990 align:start position:0%
visual studio there so I have a solution
 

00:37:00.990 --> 00:37:03.650 align:start position:0%
visual studio there so I have a solution
here<00:37:01.230><c> that</c><00:37:01.259><c> has</c><00:37:01.619><c> two</c><00:37:02.089><c> projects</c><00:37:03.089><c> one</c><00:37:03.390><c> is</c><00:37:03.539><c> the</c>

00:37:03.650 --> 00:37:03.660 align:start position:0%
here that has two projects one is the
 

00:37:03.660 --> 00:37:05.509 align:start position:0%
here that has two projects one is the
one<00:37:03.809><c> that</c><00:37:03.960><c> I</c><00:37:03.990><c> will</c><00:37:04.259><c> be</c><00:37:04.410><c> using</c><00:37:04.710><c> to</c><00:37:04.859><c> explore</c><00:37:05.309><c> what</c>

00:37:05.509 --> 00:37:05.519 align:start position:0%
one that I will be using to explore what
 

00:37:05.519 --> 00:37:06.859 align:start position:0%
one that I will be using to explore what
is<00:37:05.640><c> in</c><00:37:05.759><c> memory</c><00:37:05.940><c> and</c><00:37:06.269><c> the</c><00:37:06.359><c> other</c><00:37:06.450><c> one</c><00:37:06.660><c> is</c><00:37:06.839><c> a</c>

00:37:06.859 --> 00:37:06.869 align:start position:0%
is in memory and the other one is a
 

00:37:06.869 --> 00:37:09.920 align:start position:0%
is in memory and the other one is a
target<00:37:07.440><c> application</c><00:37:08.099><c> that</c><00:37:08.640><c> I</c><00:37:08.670><c> will</c><00:37:08.970><c> run</c><00:37:09.210><c> to</c><00:37:09.420><c> do</c>

00:37:09.920 --> 00:37:09.930 align:start position:0%
target application that I will run to do
 

00:37:09.930 --> 00:37:11.809 align:start position:0%
target application that I will run to do
something<00:37:10.380><c> so</c><00:37:10.589><c> my</c><00:37:10.710><c> target</c><00:37:10.950><c> application</c><00:37:11.670><c> is</c>

00:37:11.809 --> 00:37:11.819 align:start position:0%
something so my target application is
 

00:37:11.819 --> 00:37:16.190 align:start position:0%
something so my target application is
quite<00:37:12.210><c> simple</c><00:37:12.599><c> all</c><00:37:13.529><c> it</c><00:37:13.859><c> does</c><00:37:14.069><c> is</c><00:37:15.200><c> write</c>

00:37:16.190 --> 00:37:16.200 align:start position:0%
quite simple all it does is write
 

00:37:16.200 --> 00:37:19.069 align:start position:0%
quite simple all it does is write
something<00:37:16.650><c> to</c><00:37:16.859><c> console</c><00:37:17.690><c> create</c><00:37:18.690><c> a</c><00:37:18.720><c> timer</c>

00:37:19.069 --> 00:37:19.079 align:start position:0%
something to console create a timer
 

00:37:19.079 --> 00:37:21.140 align:start position:0%
something to console create a timer
creates<00:37:19.769><c> a</c><00:37:19.920><c> type</c><00:37:20.160><c> that</c><00:37:20.339><c> I</c><00:37:20.400><c> created</c><00:37:20.789><c> called</c>

00:37:21.140 --> 00:37:21.150 align:start position:0%
creates a type that I created called
 

00:37:21.150 --> 00:37:24.650 align:start position:0%
creates a type that I created called
clock<00:37:21.509><c> and</c><00:37:21.779><c> whenever</c><00:37:22.380><c> the</c><00:37:22.559><c> clock</c><00:37:22.769><c> ticks</c><00:37:23.660><c> this</c>

00:37:24.650 --> 00:37:24.660 align:start position:0%
clock and whenever the clock ticks this
 

00:37:24.660 --> 00:37:26.509 align:start position:0%
clock and whenever the clock ticks this
method<00:37:25.079><c> is</c><00:37:25.200><c> executed</c><00:37:25.470><c> and</c><00:37:26.009><c> I</c><00:37:26.069><c> write</c><00:37:26.309><c> the</c>

00:37:26.509 --> 00:37:26.519 align:start position:0%
method is executed and I write the
 

00:37:26.519 --> 00:37:29.440 align:start position:0%
method is executed and I write the
current<00:37:26.730><c> date</c><00:37:27.059><c> time</c><00:37:27.420><c> to</c><00:37:28.069><c> console</c><00:37:29.069><c> and</c>

00:37:29.440 --> 00:37:29.450 align:start position:0%
current date time to console and
 

00:37:29.450 --> 00:37:31.999 align:start position:0%
current date time to console and
basically<00:37:30.450><c> almost</c><00:37:30.839><c> immediately</c><00:37:31.650><c> after</c>

00:37:31.999 --> 00:37:32.009 align:start position:0%
basically almost immediately after
 

00:37:32.009 --> 00:37:33.109 align:start position:0%
basically almost immediately after
allocating<00:37:32.579><c> my</c><00:37:32.700><c> clock</c>

00:37:33.109 --> 00:37:33.119 align:start position:0%
allocating my clock
 

00:37:33.119 --> 00:37:35.089 align:start position:0%
allocating my clock
I<00:37:33.150><c> run</c><00:37:33.420><c> garbage</c><00:37:33.809><c> collection</c><00:37:34.319><c> and</c><00:37:34.410><c> I</c><00:37:34.559><c> expect</c><00:37:34.920><c> my</c>

00:37:35.089 --> 00:37:35.099 align:start position:0%
I run garbage collection and I expect my
 

00:37:35.099 --> 00:37:37.999 align:start position:0%
I run garbage collection and I expect my
clock<00:37:35.339><c> to</c><00:37:35.519><c> become</c><00:37:35.819><c> from</c><00:37:36.089><c> memory</c><00:37:36.390><c> etc</c><00:37:36.920><c> so</c><00:37:37.920><c> if</c>

00:37:37.999 --> 00:37:38.009 align:start position:0%
clock to become from memory etc so if
 

00:37:38.009 --> 00:37:39.499 align:start position:0%
clock to become from memory etc so if
you<00:37:38.160><c> run</c><00:37:38.339><c> this</c><00:37:38.519><c> this</c><00:37:38.759><c> is</c><00:37:38.910><c> the</c><00:37:39.029><c> most</c><00:37:39.240><c> boring</c>

00:37:39.499 --> 00:37:39.509 align:start position:0%
you run this this is the most boring
 

00:37:39.509 --> 00:37:43.039 align:start position:0%
you run this this is the most boring
demo<00:37:39.960><c> application</c><00:37:40.589><c> ever</c><00:37:41.599><c> but</c><00:37:42.599><c> if</c><00:37:42.720><c> you</c><00:37:42.750><c> run</c>

00:37:43.039 --> 00:37:43.049 align:start position:0%
demo application ever but if you run
 

00:37:43.049 --> 00:37:46.940 align:start position:0%
demo application ever but if you run
this<00:37:43.200><c> you</c><00:37:43.470><c> will</c><00:37:43.619><c> see</c><00:37:45.170><c> it</c><00:37:46.170><c> shows</c><00:37:46.500><c> up</c><00:37:46.650><c> on</c><00:37:46.769><c> this</c>

00:37:46.940 --> 00:37:46.950 align:start position:0%
this you will see it shows up on this
 

00:37:46.950 --> 00:37:49.759 align:start position:0%
this you will see it shows up on this
screen<00:37:47.250><c> you</c><00:37:48.059><c> will</c><00:37:48.089><c> see</c><00:37:48.390><c> that</c><00:37:48.630><c> it's</c><00:37:48.839><c> print</c>

00:37:49.759 --> 00:37:49.769 align:start position:0%
screen you will see that it's print
 

00:37:49.769 --> 00:37:51.470 align:start position:0%
screen you will see that it's print
something<00:37:50.009><c> it</c><00:37:50.339><c> runs</c><00:37:50.609><c> a</c><00:37:50.730><c> collection</c><00:37:51.180><c> and</c><00:37:51.329><c> even</c>

00:37:51.470 --> 00:37:51.480 align:start position:0%
something it runs a collection and even
 

00:37:51.480 --> 00:37:52.880 align:start position:0%
something it runs a collection and even
after<00:37:51.809><c> the</c><00:37:51.930><c> collection</c><00:37:52.140><c> it's</c><00:37:52.470><c> still</c><00:37:52.680><c> running</c>

00:37:52.880 --> 00:37:52.890 align:start position:0%
after the collection it's still running
 

00:37:52.890 --> 00:37:55.400 align:start position:0%
after the collection it's still running
my<00:37:53.039><c> timer</c><00:37:53.430><c> so</c><00:37:53.730><c> you</c><00:37:53.789><c> already</c><00:37:53.970><c> see</c><00:37:54.359><c> something</c><00:37:55.289><c> is</c>

00:37:55.400 --> 00:37:55.410 align:start position:0%
my timer so you already see something is
 

00:37:55.410 --> 00:37:56.960 align:start position:0%
my timer so you already see something is
wrong<00:37:55.589><c> with</c><00:37:55.769><c> this</c><00:37:55.890><c> application</c><00:37:56.369><c> but</c><00:37:56.670><c> just</c><00:37:56.880><c> to</c>

00:37:56.960 --> 00:37:56.970 align:start position:0%
wrong with this application but just to
 

00:37:56.970 --> 00:37:58.370 align:start position:0%
wrong with this application but just to
give<00:37:57.089><c> you</c><00:37:57.119><c> an</c><00:37:57.269><c> idea</c><00:37:57.390><c> I</c><00:37:57.750><c> have</c><00:37:57.869><c> an</c><00:37:58.019><c> application</c>

00:37:58.370 --> 00:37:58.380 align:start position:0%
give you an idea I have an application
 

00:37:58.380 --> 00:38:02.660 align:start position:0%
give you an idea I have an application
that<00:37:58.559><c> prints</c><00:37:58.950><c> the</c><00:37:59.069><c> time</c><00:37:59.309><c> awesome</c>

00:38:02.660 --> 00:38:02.670 align:start position:0%
 
 

00:38:02.670 --> 00:38:05.310 align:start position:0%
 
then<00:38:03.670><c> in</c><00:38:03.880><c> my</c><00:38:04.000><c> other</c><00:38:04.150><c> projects</c><00:38:04.720><c> what</c><00:38:04.900><c> I'm</c><00:38:05.020><c> doing</c>

00:38:05.310 --> 00:38:05.320 align:start position:0%
then in my other projects what I'm doing
 

00:38:05.320 --> 00:38:08.520 align:start position:0%
then in my other projects what I'm doing
is<00:38:05.500><c> I'm</c><00:38:06.090><c> basically</c><00:38:07.090><c> starting</c><00:38:07.930><c> my</c><00:38:08.230><c> demo</c>

00:38:08.520 --> 00:38:08.530 align:start position:0%
is I'm basically starting my demo
 

00:38:08.530 --> 00:38:10.320 align:start position:0%
is I'm basically starting my demo
application<00:38:09.190><c> and</c><00:38:09.370><c> what</c><00:38:09.580><c> that</c><00:38:09.760><c> does</c><00:38:09.970><c> is</c><00:38:10.120><c> it</c>

00:38:10.320 --> 00:38:10.330 align:start position:0%
application and what that does is it
 

00:38:10.330 --> 00:38:12.480 align:start position:0%
application and what that does is it
simply<00:38:10.660><c> opens</c><00:38:11.350><c> the</c><00:38:11.470><c> application</c><00:38:12.100><c> and</c><00:38:12.250><c> gives</c>

00:38:12.480 --> 00:38:12.490 align:start position:0%
simply opens the application and gives
 

00:38:12.490 --> 00:38:14.940 align:start position:0%
simply opens the application and gives
me<00:38:12.610><c> back</c><00:38:12.850><c> the</c><00:38:13.150><c> process</c><00:38:13.870><c> so</c><00:38:14.140><c> I</c><00:38:14.170><c> have</c><00:38:14.380><c> a</c><00:38:14.410><c> process</c>

00:38:14.940 --> 00:38:14.950 align:start position:0%
me back the process so I have a process
 

00:38:14.950 --> 00:38:17.940 align:start position:0%
me back the process so I have a process
ID<00:38:15.100><c> that</c><00:38:15.400><c> I</c><00:38:15.550><c> can</c><00:38:15.730><c> work</c><00:38:15.910><c> with</c><00:38:15.970><c> and</c><00:38:16.650><c> when</c><00:38:17.650><c> I</c><00:38:17.680><c> run</c>

00:38:17.940 --> 00:38:17.950 align:start position:0%
ID that I can work with and when I run
 

00:38:17.950 --> 00:38:20.940 align:start position:0%
ID that I can work with and when I run
it<00:38:18.100><c> I</c><00:38:18.480><c> start</c><00:38:19.480><c> the</c><00:38:19.600><c> other</c><00:38:19.720><c> application</c><00:38:20.410><c> I</c><00:38:20.590><c> wait</c>

00:38:20.940 --> 00:38:20.950 align:start position:0%
it I start the other application I wait
 

00:38:20.950 --> 00:38:23.310 align:start position:0%
it I start the other application I wait
for<00:38:21.160><c> a</c><00:38:21.220><c> couple</c><00:38:21.550><c> of</c><00:38:21.640><c> seconds</c><00:38:22.030><c> and</c><00:38:22.270><c> after</c><00:38:23.140><c> that</c>

00:38:23.310 --> 00:38:23.320 align:start position:0%
for a couple of seconds and after that
 

00:38:23.320 --> 00:38:26.580 align:start position:0%
for a couple of seconds and after that
wait<00:38:23.560><c> I</c><00:38:23.830><c> attach</c><00:38:24.340><c> CLR</c><00:38:25.000><c> MD</c><00:38:25.270><c> to</c><00:38:25.600><c> the</c><00:38:25.780><c> run</c><00:38:25.930><c> to</c><00:38:26.470><c> the</c>

00:38:26.580 --> 00:38:26.590 align:start position:0%
wait I attach CLR MD to the run to the
 

00:38:26.590 --> 00:38:28.920 align:start position:0%
wait I attach CLR MD to the run to the
running<00:38:26.830><c> process</c><00:38:27.040><c> so</c><00:38:27.940><c> attaching</c><00:38:28.690><c> to</c><00:38:28.810><c> the</c>

00:38:28.920 --> 00:38:28.930 align:start position:0%
running process so attaching to the
 

00:38:28.930 --> 00:38:30.600 align:start position:0%
running process so attaching to the
running<00:38:29.170><c> process</c><00:38:29.380><c> works</c><00:38:29.920><c> based</c><00:38:30.280><c> on</c><00:38:30.490><c> the</c>

00:38:30.600 --> 00:38:30.610 align:start position:0%
running process works based on the
 

00:38:30.610 --> 00:38:32.550 align:start position:0%
running process works based on the
process<00:38:31.060><c> ID</c><00:38:31.240><c> so</c><00:38:31.540><c> I</c><00:38:31.570><c> needed</c><00:38:31.840><c> the</c><00:38:31.990><c> process</c><00:38:32.380><c> ID</c>

00:38:32.550 --> 00:38:32.560 align:start position:0%
process ID so I needed the process ID
 

00:38:32.560 --> 00:38:35.040 align:start position:0%
process ID so I needed the process ID
there<00:38:32.860><c> and</c><00:38:33.190><c> I'll</c><00:38:33.640><c> wait</c><00:38:33.850><c> 10</c><00:38:34.240><c> seconds</c><00:38:34.690><c> for</c><00:38:34.900><c> it</c><00:38:34.960><c> to</c>

00:38:35.040 --> 00:38:35.050 align:start position:0%
there and I'll wait 10 seconds for it to
 

00:38:35.050 --> 00:38:37.170 align:start position:0%
there and I'll wait 10 seconds for it to
attach<00:38:35.500><c> in</c><00:38:35.740><c> case</c><00:38:35.980><c> it</c><00:38:36.460><c> takes</c><00:38:36.790><c> a</c><00:38:37.000><c> while</c><00:38:37.150><c> to</c>

00:38:37.170 --> 00:38:37.180 align:start position:0%
attach in case it takes a while to
 

00:38:37.180 --> 00:38:39.750 align:start position:0%
attach in case it takes a while to
attach<00:38:37.600><c> now</c><00:38:38.530><c> one</c><00:38:38.680><c> important</c><00:38:39.160><c> flag</c><00:38:39.460><c> that</c><00:38:39.640><c> I'm</c>

00:38:39.750 --> 00:38:39.760 align:start position:0%
attach now one important flag that I'm
 

00:38:39.760 --> 00:38:41.970 align:start position:0%
attach now one important flag that I'm
passing<00:38:40.240><c> in</c><00:38:40.330><c> to</c><00:38:40.480><c> CLR</c><00:38:40.870><c> MV</c><00:38:41.110><c> is</c><00:38:41.170><c> the</c><00:38:41.410><c> fact</c><00:38:41.890><c> that</c>

00:38:41.970 --> 00:38:41.980 align:start position:0%
passing in to CLR MV is the fact that
 

00:38:41.980 --> 00:38:44.420 align:start position:0%
passing in to CLR MV is the fact that
I'm<00:38:42.160><c> attaching</c><00:38:42.580><c> in</c><00:38:42.910><c> an</c><00:38:43.030><c> invasive</c><00:38:43.450><c> manner</c>

00:38:44.420 --> 00:38:44.430 align:start position:0%
I'm attaching in an invasive manner
 

00:38:44.430 --> 00:38:46.890 align:start position:0%
I'm attaching in an invasive manner
whenever<00:38:45.430><c> I</c><00:38:45.520><c> want</c><00:38:45.790><c> to</c><00:38:45.850><c> explore</c><00:38:46.390><c> the</c><00:38:46.600><c> memory</c>

00:38:46.890 --> 00:38:46.900 align:start position:0%
whenever I want to explore the memory
 

00:38:46.900 --> 00:38:50.310 align:start position:0%
whenever I want to explore the memory
space<00:38:47.080><c> it</c><00:38:47.920><c> would</c><00:38:48.250><c> be</c><00:38:48.430><c> very</c><00:38:48.820><c> very</c><00:38:49.270><c> unhandy</c><00:38:50.080><c> and</c>

00:38:50.310 --> 00:38:50.320 align:start position:0%
space it would be very very unhandy and
 

00:38:50.320 --> 00:38:52.320 align:start position:0%
space it would be very very unhandy and
very<00:38:50.500><c> difficult</c><00:38:50.980><c> for</c><00:38:51.160><c> me</c><00:38:51.310><c> to</c><00:38:51.340><c> analyze</c><00:38:51.820><c> what</c><00:38:52.210><c> is</c>

00:38:52.320 --> 00:38:52.330 align:start position:0%
very difficult for me to analyze what is
 

00:38:52.330 --> 00:38:54.180 align:start position:0%
very difficult for me to analyze what is
going<00:38:52.630><c> on</c><00:38:52.720><c> in</c><00:38:52.930><c> the</c><00:38:53.050><c> application</c><00:38:53.650><c> if</c><00:38:53.920><c> the</c>

00:38:54.180 --> 00:38:54.190 align:start position:0%
going on in the application if the
 

00:38:54.190 --> 00:38:56.130 align:start position:0%
going on in the application if the
application<00:38:55.120><c> would</c><00:38:55.240><c> still</c><00:38:55.480><c> be</c><00:38:55.630><c> running</c><00:38:55.990><c> the</c>

00:38:56.130 --> 00:38:56.140 align:start position:0%
application would still be running the
 

00:38:56.140 --> 00:38:57.390 align:start position:0%
application would still be running the
garbage<00:38:56.290><c> collector</c><00:38:56.860><c> would</c><00:38:56.980><c> be</c><00:38:57.160><c> running</c>

00:38:57.390 --> 00:38:57.400 align:start position:0%
garbage collector would be running
 

00:38:57.400 --> 00:38:58.980 align:start position:0%
garbage collector would be running
memory<00:38:57.850><c> could</c><00:38:58.030><c> change</c><00:38:58.330><c> and</c><00:38:58.660><c> so</c><00:38:58.780><c> on</c>

00:38:58.980 --> 00:38:58.990 align:start position:0%
memory could change and so on
 

00:38:58.990 --> 00:39:01.200 align:start position:0%
memory could change and so on
so<00:38:59.500><c> bypassing</c><00:39:00.040><c> this</c><00:39:00.160><c> invasive</c><00:39:00.580><c> flag</c><00:39:00.970><c> I'm</c>

00:39:01.200 --> 00:39:01.210 align:start position:0%
so bypassing this invasive flag I'm
 

00:39:01.210 --> 00:39:03.180 align:start position:0%
so bypassing this invasive flag I'm
actually<00:39:01.360><c> telling</c><00:39:01.750><c> the</c><00:39:01.960><c> run</c><00:39:02.110><c> time</c><00:39:02.320><c> pause</c><00:39:03.010><c> the</c>

00:39:03.180 --> 00:39:03.190 align:start position:0%
actually telling the run time pause the
 

00:39:03.190 --> 00:39:04.950 align:start position:0%
actually telling the run time pause the
world's<00:39:03.550><c> boss</c><00:39:03.850><c> everything</c><00:39:04.450><c> and</c><00:39:04.630><c> give</c><00:39:04.750><c> me</c><00:39:04.930><c> a</c>

00:39:04.950 --> 00:39:04.960 align:start position:0%
world's boss everything and give me a
 

00:39:04.960 --> 00:39:06.780 align:start position:0%
world's boss everything and give me a
static<00:39:05.350><c> representation</c><00:39:05.770><c> of</c><00:39:06.280><c> what</c><00:39:06.490><c> is</c><00:39:06.580><c> in</c><00:39:06.700><c> the</c>

00:39:06.780 --> 00:39:06.790 align:start position:0%
static representation of what is in the
 

00:39:06.790 --> 00:39:08.730 align:start position:0%
static representation of what is in the
application<00:39:06.910><c> so</c><00:39:07.540><c> that</c><00:39:07.660><c> I</c><00:39:07.780><c> can</c><00:39:07.990><c> reason</c><00:39:08.560><c> about</c>

00:39:08.730 --> 00:39:08.740 align:start position:0%
application so that I can reason about
 

00:39:08.740 --> 00:39:09.530 align:start position:0%
application so that I can reason about
that<00:39:09.100><c> one</c>

00:39:09.530 --> 00:39:09.540 align:start position:0%
that one
 

00:39:09.540 --> 00:39:12.630 align:start position:0%
that one
so<00:39:10.540><c> let's</c><00:39:10.750><c> maybe</c><00:39:11.320><c> just</c><00:39:11.440><c> run</c><00:39:11.890><c> it</c><00:39:12.010><c> and</c><00:39:12.220><c> see</c><00:39:12.430><c> what</c>

00:39:12.630 --> 00:39:12.640 align:start position:0%
so let's maybe just run it and see what
 

00:39:12.640 --> 00:39:16.170 align:start position:0%
so let's maybe just run it and see what
comes<00:39:12.850><c> out</c><00:39:13.120><c> so</c><00:39:13.420><c> my</c><00:39:14.370><c> CLR</c><00:39:15.370><c> MD</c><00:39:15.580><c> process</c><00:39:16.000><c> will</c>

00:39:16.170 --> 00:39:16.180 align:start position:0%
comes out so my CLR MD process will
 

00:39:16.180 --> 00:39:18.150 align:start position:0%
comes out so my CLR MD process will
start<00:39:16.480><c> my</c><00:39:17.020><c> actual</c><00:39:17.350><c> application</c><00:39:17.950><c> will</c><00:39:18.130><c> start</c>

00:39:18.150 --> 00:39:18.160 align:start position:0%
start my actual application will start
 

00:39:18.160 --> 00:39:20.460 align:start position:0%
start my actual application will start
as<00:39:18.520><c> well</c><00:39:18.700><c> and</c><00:39:18.940><c> as</c><00:39:19.360><c> you</c><00:39:19.480><c> can</c><00:39:19.630><c> see</c><00:39:19.810><c> after</c><00:39:20.050><c> about</c>

00:39:20.460 --> 00:39:20.470 align:start position:0%
as well and as you can see after about
 

00:39:20.470 --> 00:39:22.590 align:start position:0%
as well and as you can see after about
two<00:39:20.740><c> seconds</c><00:39:21.190><c> I</c><00:39:21.340><c> attach</c><00:39:21.700><c> to</c><00:39:21.910><c> it</c><00:39:22.030><c> and</c><00:39:22.240><c> you</c><00:39:22.360><c> see</c>

00:39:22.590 --> 00:39:22.600 align:start position:0%
two seconds I attach to it and you see
 

00:39:22.600 --> 00:39:24.540 align:start position:0%
two seconds I attach to it and you see
the<00:39:22.630><c> application</c><00:39:23.350><c> really</c><00:39:23.530><c> being</c><00:39:23.920><c> passed</c><00:39:24.280><c> and</c>

00:39:24.540 --> 00:39:24.550 align:start position:0%
the application really being passed and
 

00:39:24.550 --> 00:39:26.850 align:start position:0%
the application really being passed and
the<00:39:25.060><c> date</c><00:39:25.240><c> time</c><00:39:25.450><c> is</c><00:39:25.720><c> no</c><00:39:25.870><c> longer</c><00:39:26.140><c> printed</c><00:39:26.620><c> to</c>

00:39:26.850 --> 00:39:26.860 align:start position:0%
the date time is no longer printed to
 

00:39:26.860 --> 00:39:28.740 align:start position:0%
the date time is no longer printed to
consult<00:39:27.400><c> there</c><00:39:27.610><c> because</c><00:39:28.270><c> I</c><00:39:28.300><c> use</c><00:39:28.570><c> this</c>

00:39:28.740 --> 00:39:28.750 align:start position:0%
consult there because I use this
 

00:39:28.750 --> 00:39:32.100 align:start position:0%
consult there because I use this
invasive<00:39:29.170><c> flag</c><00:39:29.850><c> now</c><00:39:30.850><c> in</c><00:39:31.120><c> source</c><00:39:31.600><c> codes</c><00:39:31.900><c> what</c><00:39:32.080><c> I</c>

00:39:32.100 --> 00:39:32.110 align:start position:0%
invasive flag now in source codes what I
 

00:39:32.110 --> 00:39:35.310 align:start position:0%
invasive flag now in source codes what I
can<00:39:32.350><c> do</c><00:39:32.530><c> is</c><00:39:33.220><c> I</c><00:39:33.640><c> can</c><00:39:33.820><c> use</c><00:39:34.210><c> this</c><00:39:34.420><c> data</c><00:39:34.660><c> targets</c>

00:39:35.310 --> 00:39:35.320 align:start position:0%
can do is I can use this data targets
 

00:39:35.320 --> 00:39:37.980 align:start position:0%
can do is I can use this data targets
that<00:39:35.500><c> I</c><00:39:35.560><c> get</c><00:39:35.830><c> from</c><00:39:36.010><c> CLR</c><00:39:36.520><c> MV</c><00:39:36.760><c> to</c><00:39:37.270><c> inspect</c><00:39:37.660><c> lots</c>

00:39:37.980 --> 00:39:37.990 align:start position:0%
that I get from CLR MV to inspect lots
 

00:39:37.990 --> 00:39:39.720 align:start position:0%
that I get from CLR MV to inspect lots
and<00:39:38.230><c> lots</c><00:39:38.410><c> of</c><00:39:38.560><c> things</c><00:39:38.800><c> that</c><00:39:38.980><c> are</c><00:39:39.280><c> in</c><00:39:39.580><c> the</c>

00:39:39.720 --> 00:39:39.730 align:start position:0%
and lots of things that are in the
 

00:39:39.730 --> 00:39:41.280 align:start position:0%
and lots of things that are in the
runtime<00:39:39.910><c> so</c><00:39:40.300><c> the</c><00:39:40.420><c> first</c><00:39:40.690><c> thing</c><00:39:40.870><c> that</c><00:39:41.020><c> I</c><00:39:41.110><c> could</c>

00:39:41.280 --> 00:39:41.290 align:start position:0%
runtime so the first thing that I could
 

00:39:41.290 --> 00:39:43.830 align:start position:0%
runtime so the first thing that I could
look<00:39:41.440><c> at</c><00:39:41.650><c> is</c><00:39:42.040><c> for</c><00:39:42.460><c> example</c><00:39:42.910><c> the</c><00:39:43.030><c> CLR</c><00:39:43.450><c> info</c>

00:39:43.830 --> 00:39:43.840 align:start position:0%
look at is for example the CLR info
 

00:39:43.840 --> 00:39:46.980 align:start position:0%
look at is for example the CLR info
which<00:39:44.500><c> version</c><00:39:45.160><c> of</c><00:39:45.340><c> the</c><00:39:45.790><c> CLR</c><00:39:46.150><c> am</c><00:39:46.360><c> i</c><00:39:46.510><c> reviewing</c>

00:39:46.980 --> 00:39:46.990 align:start position:0%
which version of the CLR am i reviewing
 

00:39:46.990 --> 00:39:50.150 align:start position:0%
which version of the CLR am i reviewing
using<00:39:47.560><c> to</c><00:39:48.040><c> run</c><00:39:48.280><c> this</c><00:39:48.460><c> specific</c><00:39:49.000><c> application</c>

00:39:50.150 --> 00:39:50.160 align:start position:0%
using to run this specific application
 

00:39:50.160 --> 00:39:52.500 align:start position:0%
using to run this specific application
it<00:39:51.160><c> gives</c><00:39:51.370><c> me</c><00:39:51.490><c> back</c><00:39:51.520><c> the</c><00:39:51.670><c> version</c><00:39:52.180><c> in</c><00:39:52.360><c> this</c>

00:39:52.500 --> 00:39:52.510 align:start position:0%
it gives me back the version in this
 

00:39:52.510 --> 00:39:55.920 align:start position:0%
it gives me back the version in this
case<00:39:52.750><c> net</c><00:39:53.140><c> 4.7</c><00:39:53.920><c> as</c><00:39:54.070><c> well</c><00:39:54.550><c> as</c><00:39:54.760><c> the</c><00:39:54.970><c> DAC</c><00:39:55.450><c> file</c>

00:39:55.920 --> 00:39:55.930 align:start position:0%
case net 4.7 as well as the DAC file
 

00:39:55.930 --> 00:39:59.220 align:start position:0%
case net 4.7 as well as the DAC file
that's<00:39:56.200><c> a</c><00:39:56.380><c> data</c><00:39:56.650><c> access</c><00:39:57.010><c> file</c><00:39:57.970><c> look</c><00:39:58.960><c> at</c><00:39:59.110><c> it</c>

00:39:59.220 --> 00:39:59.230 align:start position:0%
that's a data access file look at it
 

00:39:59.230 --> 00:40:02.370 align:start position:0%
that's a data access file look at it
like<00:39:59.440><c> the</c><00:39:59.680><c> data</c><00:39:59.920><c> layer</c><00:40:00.280><c> -</c><00:40:00.850><c> from</c><00:40:01.540><c> runtime</c>

00:40:02.370 --> 00:40:02.380 align:start position:0%
like the data layer - from runtime
 

00:40:02.380 --> 00:40:04.290 align:start position:0%
like the data layer - from runtime
towards<00:40:02.980><c> the</c><00:40:03.310><c> actual</c><00:40:03.610><c> stuff</c><00:40:03.910><c> that</c><00:40:04.060><c> is</c><00:40:04.180><c> in</c>

00:40:04.290 --> 00:40:04.300 align:start position:0%
towards the actual stuff that is in
 

00:40:04.300 --> 00:40:06.120 align:start position:0%
towards the actual stuff that is in
memory<00:40:04.480><c> so</c><00:40:05.050><c> every</c><00:40:05.290><c> single</c><00:40:05.620><c> version</c><00:40:05.980><c> of.net</c>

00:40:06.120 --> 00:40:06.130 align:start position:0%
memory so every single version of.net
 

00:40:06.130 --> 00:40:08.660 align:start position:0%
memory so every single version of.net
has<00:40:06.940><c> this</c><00:40:07.210><c> DAC</c><00:40:07.600><c> file</c><00:40:07.840><c> that</c><00:40:08.050><c> you</c><00:40:08.170><c> have</c><00:40:08.320><c> to</c><00:40:08.470><c> use</c>

00:40:08.660 --> 00:40:08.670 align:start position:0%
has this DAC file that you have to use
 

00:40:08.670 --> 00:40:13.220 align:start position:0%
has this DAC file that you have to use
anyone<00:40:09.670><c> has</c><00:40:09.970><c> used</c><00:40:10.000><c> windbg</c><00:40:10.930><c> and</c><00:40:11.500><c> SOS</c><00:40:11.980><c> before</c>

00:40:13.220 --> 00:40:13.230 align:start position:0%
anyone has used windbg and SOS before
 

00:40:13.230 --> 00:40:15.080 align:start position:0%
anyone has used windbg and SOS before
a couple<00:40:13.590><c> of</c><00:40:13.650><c> people</c><00:40:13.980><c> this</c><00:40:14.490><c> file</c><00:40:14.790><c> you</c><00:40:15.000><c> would</c>

00:40:15.080 --> 00:40:15.090 align:start position:0%
a couple of people this file you would
 

00:40:15.090 --> 00:40:16.760 align:start position:0%
a couple of people this file you would
normally<00:40:15.720><c> have</c><00:40:15.840><c> to</c><00:40:15.869><c> load</c><00:40:16.170><c> as</c><00:40:16.350><c> well</c>

00:40:16.760 --> 00:40:16.770 align:start position:0%
normally have to load as well
 

00:40:16.770 --> 00:40:19.190 align:start position:0%
normally have to load as well
what<00:40:17.100><c> CLR</c><00:40:17.490><c> MD</c><00:40:17.760><c> does</c><00:40:18.000><c> for</c><00:40:18.240><c> you</c><00:40:18.390><c> is</c><00:40:18.600><c> download</c><00:40:19.080><c> the</c>

00:40:19.190 --> 00:40:19.200 align:start position:0%
what CLR MD does for you is download the
 

00:40:19.200 --> 00:40:20.780 align:start position:0%
what CLR MD does for you is download the
correct<00:40:19.410><c> file</c><00:40:19.680><c> to</c><00:40:19.859><c> work</c><00:40:20.040><c> with</c><00:40:20.250><c> so</c><00:40:20.700><c> it's</c>

00:40:20.780 --> 00:40:20.790 align:start position:0%
correct file to work with so it's
 

00:40:20.790 --> 00:40:23.290 align:start position:0%
correct file to work with so it's
actually<00:40:21.180><c> easier</c><00:40:21.480><c> than</c><00:40:21.690><c> working</c><00:40:22.260><c> with</c><00:40:22.410><c> windbg</c>

00:40:23.290 --> 00:40:23.300 align:start position:0%
actually easier than working with windbg
 

00:40:23.300 --> 00:40:26.900 align:start position:0%
actually easier than working with windbg
now<00:40:24.300><c> other</c><00:40:24.810><c> things</c><00:40:24.990><c> that</c><00:40:25.320><c> I</c><00:40:25.350><c> can</c><00:40:25.590><c> do</c><00:40:25.770><c> is</c><00:40:26.100><c> dump</c>

00:40:26.900 --> 00:40:26.910 align:start position:0%
now other things that I can do is dump
 

00:40:26.910 --> 00:40:29.540 align:start position:0%
now other things that I can do is dump
runtime<00:40:27.480><c> info</c><00:40:27.840><c> so</c><00:40:28.109><c> what</c><00:40:28.260><c> I</c><00:40:28.290><c> can</c><00:40:28.560><c> do</c><00:40:28.710><c> is</c><00:40:28.980><c> explore</c>

00:40:29.540 --> 00:40:29.550 align:start position:0%
runtime info so what I can do is explore
 

00:40:29.550 --> 00:40:33.410 align:start position:0%
runtime info so what I can do is explore
my<00:40:29.760><c> data</c><00:40:30.000><c> targets</c><00:40:30.510><c> and</c><00:40:31.580><c> dump</c><00:40:32.580><c> for</c><00:40:32.790><c> example</c><00:40:33.240><c> the</c>

00:40:33.410 --> 00:40:33.420 align:start position:0%
my data targets and dump for example the
 

00:40:33.420 --> 00:40:35.540 align:start position:0%
my data targets and dump for example the
number<00:40:33.780><c> of</c><00:40:33.810><c> threads</c><00:40:34.140><c> that</c><00:40:34.380><c> I</c><00:40:34.410><c> have</c><00:40:34.710><c> and</c><00:40:35.010><c> for</c>

00:40:35.540 --> 00:40:35.550 align:start position:0%
number of threads that I have and for
 

00:40:35.550 --> 00:40:37.849 align:start position:0%
number of threads that I have and for
every<00:40:35.820><c> treads</c><00:40:36.180><c> check</c><00:40:37.050><c> if</c><00:40:37.200><c> it's</c><00:40:37.350><c> a</c><00:40:37.440><c> background</c>

00:40:37.849 --> 00:40:37.859 align:start position:0%
every treads check if it's a background
 

00:40:37.859 --> 00:40:39.770 align:start position:0%
every treads check if it's a background
thread<00:40:37.980><c> or</c><00:40:38.280><c> a</c><00:40:38.340><c> foreground</c><00:40:38.790><c> threads</c><00:40:39.150><c> and</c><00:40:39.390><c> then</c>

00:40:39.770 --> 00:40:39.780 align:start position:0%
thread or a foreground threads and then
 

00:40:39.780 --> 00:40:41.540 align:start position:0%
thread or a foreground threads and then
print<00:40:40.200><c> the</c><00:40:40.440><c> entire</c><00:40:40.710><c> stack</c><00:40:40.980><c> trace</c><00:40:41.220><c> of</c><00:40:41.400><c> that</c>

00:40:41.540 --> 00:40:41.550 align:start position:0%
print the entire stack trace of that
 

00:40:41.550 --> 00:40:44.240 align:start position:0%
print the entire stack trace of that
treads<00:40:41.820><c> so</c><00:40:42.060><c> let's</c><00:40:42.240><c> do</c><00:40:42.390><c> that</c><00:40:42.570><c> and</c><00:40:42.840><c> run</c><00:40:43.020><c> it</c><00:40:43.250><c> we'll</c>

00:40:44.240 --> 00:40:44.250 align:start position:0%
treads so let's do that and run it we'll
 

00:40:44.250 --> 00:40:46.670 align:start position:0%
treads so let's do that and run it we'll
get<00:40:44.430><c> all</c><00:40:45.330><c> the</c><00:40:45.630><c> threads</c><00:40:45.900><c> that</c><00:40:46.050><c> are</c><00:40:46.109><c> running</c><00:40:46.260><c> in</c>

00:40:46.670 --> 00:40:46.680 align:start position:0%
get all the threads that are running in
 

00:40:46.680 --> 00:40:48.380 align:start position:0%
get all the threads that are running in
my<00:40:46.800><c> demo</c><00:40:47.100><c> application</c><00:40:47.700><c> there's</c><00:40:47.880><c> a</c><00:40:47.970><c> background</c>

00:40:48.380 --> 00:40:48.390 align:start position:0%
my demo application there's a background
 

00:40:48.390 --> 00:40:50.660 align:start position:0%
my demo application there's a background
thread<00:40:48.570><c> that</c><00:40:48.900><c> does</c><00:40:49.200><c> a</c><00:40:49.530><c> console</c><00:40:50.220><c> dot</c><00:40:50.400><c> readline</c>

00:40:50.660 --> 00:40:50.670 align:start position:0%
thread that does a console dot readline
 

00:40:50.670 --> 00:40:53.630 align:start position:0%
thread that does a console dot readline
at<00:40:51.119><c> some</c><00:40:51.420><c> points</c><00:40:51.980><c> and</c><00:40:52.980><c> I</c><00:40:53.220><c> have</c><00:40:53.310><c> some</c><00:40:53.490><c> other</c>

00:40:53.630 --> 00:40:53.640 align:start position:0%
at some points and I have some other
 

00:40:53.640 --> 00:40:55.130 align:start position:0%
at some points and I have some other
background<00:40:53.850><c> threads</c><00:40:54.359><c> I</c><00:40:54.570><c> don't</c><00:40:54.840><c> know</c><00:40:54.960><c> what</c>

00:40:55.130 --> 00:40:55.140 align:start position:0%
background threads I don't know what
 

00:40:55.140 --> 00:40:58.370 align:start position:0%
background threads I don't know what
they<00:40:55.260><c> are</c><00:40:55.290><c> doing</c><00:40:55.470><c> but</c><00:40:55.830><c> they're</c><00:40:56.130><c> there</c><00:40:57.380><c> other</c>

00:40:58.370 --> 00:40:58.380 align:start position:0%
they are doing but they're there other
 

00:40:58.380 --> 00:41:00.650 align:start position:0%
they are doing but they're there other
stuff<00:40:58.740><c> that</c><00:40:58.890><c> I</c><00:40:58.920><c> can</c><00:40:59.160><c> do</c><00:40:59.310><c> here</c><00:40:59.609><c> is</c><00:41:00.180><c> for</c><00:41:00.510><c> example</c>

00:41:00.650 --> 00:41:00.660 align:start position:0%
stuff that I can do here is for example
 

00:41:00.660 --> 00:41:02.720 align:start position:0%
stuff that I can do here is for example
dump<00:41:01.320><c> the</c><00:41:01.530><c> objects</c><00:41:01.920><c> that</c><00:41:02.040><c> are</c><00:41:02.220><c> on</c><00:41:02.250><c> the</c><00:41:02.550><c> heap</c>

00:41:02.720 --> 00:41:02.730 align:start position:0%
dump the objects that are on the heap
 

00:41:02.730 --> 00:41:05.690 align:start position:0%
dump the objects that are on the heap
now<00:41:03.150><c> that's</c><00:41:03.359><c> a</c><00:41:03.480><c> really</c><00:41:04.490><c> impressive</c><00:41:05.490><c> one</c>

00:41:05.690 --> 00:41:05.700 align:start position:0%
now that's a really impressive one
 

00:41:05.700 --> 00:41:07.490 align:start position:0%
now that's a really impressive one
actually<00:41:06.060><c> I</c><00:41:06.240><c> can</c><00:41:06.600><c> get</c><00:41:06.750><c> all</c><00:41:06.960><c> the</c><00:41:07.109><c> objects</c><00:41:07.470><c> that</c>

00:41:07.490 --> 00:41:07.500 align:start position:0%
actually I can get all the objects that
 

00:41:07.500 --> 00:41:09.590 align:start position:0%
actually I can get all the objects that
are<00:41:07.710><c> in</c><00:41:07.770><c> memory</c><00:41:08.100><c> of</c><00:41:08.250><c> my</c><00:41:08.670><c> running</c><00:41:08.880><c> application</c>

00:41:09.590 --> 00:41:09.600 align:start position:0%
are in memory of my running application
 

00:41:09.600 --> 00:41:11.900 align:start position:0%
are in memory of my running application
I<00:41:09.780><c> get</c><00:41:10.290><c> back</c><00:41:10.500><c> the</c><00:41:10.800><c> different</c><00:41:11.130><c> generations</c><00:41:11.700><c> I</c>

00:41:11.900 --> 00:41:11.910 align:start position:0%
I get back the different generations I
 

00:41:11.910 --> 00:41:14.180 align:start position:0%
I get back the different generations I
can<00:41:12.119><c> look</c><00:41:12.330><c> at</c><00:41:12.510><c> what's</c><00:41:12.720><c> engine</c><00:41:13.109><c> zero</c><00:41:13.380><c> Gen</c><00:41:13.740><c> 1</c><00:41:13.920><c> Gen</c>

00:41:14.180 --> 00:41:14.190 align:start position:0%
can look at what's engine zero Gen 1 Gen
 

00:41:14.190 --> 00:41:16.490 align:start position:0%
can look at what's engine zero Gen 1 Gen
2<00:41:14.400><c> and</c><00:41:14.609><c> so</c><00:41:15.150><c> on</c><00:41:15.300><c> and</c><00:41:15.570><c> get</c><00:41:15.720><c> information</c><00:41:15.990><c> about</c>

00:41:16.490 --> 00:41:16.500 align:start position:0%
2 and so on and get information about
 

00:41:16.500 --> 00:41:18.710 align:start position:0%
2 and so on and get information about
the<00:41:16.619><c> objects</c><00:41:17.070><c> so</c><00:41:17.730><c> the</c><00:41:17.940><c> way</c><00:41:18.060><c> this</c><00:41:18.210><c> works</c><00:41:18.510><c> is</c>

00:41:18.710 --> 00:41:18.720 align:start position:0%
the objects so the way this works is
 

00:41:18.720 --> 00:41:21.980 align:start position:0%
the objects so the way this works is
that<00:41:18.810><c> for</c><00:41:19.350><c> my</c><00:41:19.530><c> heap</c><00:41:19.770><c> I</c><00:41:20.100><c> can</c><00:41:21.060><c> enumerate</c><00:41:21.480><c> all</c><00:41:21.930><c> the</c>

00:41:21.980 --> 00:41:21.990 align:start position:0%
that for my heap I can enumerate all the
 

00:41:21.990 --> 00:41:24.770 align:start position:0%
that for my heap I can enumerate all the
object<00:41:22.710><c> addresses</c><00:41:23.250><c> this</c><00:41:23.520><c> initial</c><00:41:24.210><c> pointer</c>

00:41:24.770 --> 00:41:24.780 align:start position:0%
object addresses this initial pointer
 

00:41:24.780 --> 00:41:27.109 align:start position:0%
object addresses this initial pointer
that<00:41:24.960><c> I</c><00:41:25.020><c> had</c><00:41:25.320><c> in</c><00:41:25.470><c> a</c><00:41:25.560><c> table</c><00:41:25.980><c> then</c><00:41:26.760><c> for</c><00:41:27.030><c> every</c>

00:41:27.109 --> 00:41:27.119 align:start position:0%
that I had in a table then for every
 

00:41:27.119 --> 00:41:30.290 align:start position:0%
that I had in a table then for every
pointer<00:41:27.750><c> I</c><00:41:27.930><c> can</c><00:41:28.560><c> get</c><00:41:28.770><c> the</c><00:41:29.070><c> object</c><00:41:29.250><c> type</c><00:41:29.790><c> make</c>

00:41:30.290 --> 00:41:30.300 align:start position:0%
pointer I can get the object type make
 

00:41:30.300 --> 00:41:32.090 align:start position:0%
pointer I can get the object type make
the<00:41:30.480><c> link</c><00:41:30.690><c> to</c><00:41:30.930><c> this</c><00:41:31.050><c> other</c><00:41:31.230><c> table</c><00:41:31.530><c> that</c><00:41:31.920><c> has</c>

00:41:32.090 --> 00:41:32.100 align:start position:0%
the link to this other table that has
 

00:41:32.100 --> 00:41:34.970 align:start position:0%
the link to this other table that has
the<00:41:32.280><c> type</c><00:41:32.609><c> information</c><00:41:33.359><c> and</c><00:41:33.800><c> whenever</c><00:41:34.800><c> I</c>

00:41:34.970 --> 00:41:34.980 align:start position:0%
the type information and whenever I
 

00:41:34.980 --> 00:41:38.660 align:start position:0%
the type information and whenever I
actually<00:41:35.430><c> have</c><00:41:35.880><c> a</c><00:41:35.910><c> type</c><00:41:36.240><c> I</c><00:41:36.710><c> can</c><00:41:37.710><c> call</c><00:41:38.100><c> type</c><00:41:38.400><c> dot</c>

00:41:38.660 --> 00:41:38.670 align:start position:0%
actually have a type I can call type dot
 

00:41:38.670 --> 00:41:41.090 align:start position:0%
actually have a type I can call type dot
get<00:41:38.910><c> value</c><00:41:39.359><c> for</c><00:41:39.930><c> this</c><00:41:40.140><c> specific</c><00:41:40.680><c> object</c>

00:41:41.090 --> 00:41:41.100 align:start position:0%
get value for this specific object
 

00:41:41.100 --> 00:41:42.890 align:start position:0%
get value for this specific object
address<00:41:41.490><c> and</c><00:41:41.790><c> then</c><00:41:41.910><c> I</c><00:41:42.030><c> will</c><00:41:42.180><c> navigate</c><00:41:42.359><c> yet</c>

00:41:42.890 --> 00:41:42.900 align:start position:0%
address and then I will navigate yet
 

00:41:42.900 --> 00:41:44.780 align:start position:0%
address and then I will navigate yet
another<00:41:43.170><c> table</c><00:41:43.619><c> to</c><00:41:43.770><c> get</c><00:41:43.890><c> the</c><00:41:44.070><c> actual</c><00:41:44.400><c> values</c>

00:41:44.780 --> 00:41:44.790 align:start position:0%
another table to get the actual values
 

00:41:44.790 --> 00:41:46.940 align:start position:0%
another table to get the actual values
of<00:41:44.970><c> the</c><00:41:45.090><c> objects</c><00:41:45.390><c> that</c><00:41:45.570><c> I</c><00:41:45.600><c> have</c><00:41:45.960><c> in</c><00:41:46.440><c> here</c><00:41:46.740><c> the</c>

00:41:46.940 --> 00:41:46.950 align:start position:0%
of the objects that I have in here the
 

00:41:46.950 --> 00:41:49.160 align:start position:0%
of the objects that I have in here the
nice<00:41:47.700><c> thing</c><00:41:47.910><c> is</c><00:41:47.940><c> for</c><00:41:48.270><c> simple</c><00:41:48.450><c> objects</c><00:41:48.990><c> like</c>

00:41:49.160 --> 00:41:49.170 align:start position:0%
nice thing is for simple objects like
 

00:41:49.170 --> 00:41:51.830 align:start position:0%
nice thing is for simple objects like
strings<00:41:49.560><c> I</c><00:41:49.890><c> can</c><00:41:50.460><c> just</c><00:41:50.700><c> print</c><00:41:50.970><c> strings</c><00:41:51.359><c> to</c><00:41:51.570><c> cons</c>

00:41:51.830 --> 00:41:51.840 align:start position:0%
strings I can just print strings to cons
 

00:41:51.840 --> 00:41:54.260 align:start position:0%
strings I can just print strings to cons
also<00:41:52.200><c> you</c><00:41:52.260><c> will</c><00:41:52.440><c> see</c><00:41:52.619><c> for</c><00:41:53.609><c> every</c><00:41:53.670><c> string</c><00:41:54.119><c> you</c>

00:41:54.260 --> 00:41:54.270 align:start position:0%
also you will see for every string you
 

00:41:54.270 --> 00:41:57.140 align:start position:0%
also you will see for every string you
will<00:41:54.390><c> see</c><00:41:54.600><c> the</c><00:41:54.720><c> value</c><00:41:55.020><c> in</c><00:41:55.170><c> there</c><00:41:55.350><c> as</c><00:41:55.500><c> well</c><00:41:56.150><c> and</c>

00:41:57.140 --> 00:41:57.150 align:start position:0%
will see the value in there as well and
 

00:41:57.150 --> 00:41:59.450 align:start position:0%
will see the value in there as well and
for<00:41:57.990><c> more</c><00:41:58.140><c> complicated</c><00:41:58.770><c> objects</c><00:41:59.130><c> I</c><00:41:59.280><c> would</c>

00:41:59.450 --> 00:41:59.460 align:start position:0%
for more complicated objects I would
 

00:41:59.460 --> 00:42:01.040 align:start position:0%
for more complicated objects I would
have<00:41:59.580><c> to</c><00:41:59.700><c> do</c><00:41:59.820><c> some</c><00:42:00.150><c> things</c><00:42:00.420><c> to</c><00:42:00.510><c> read</c><00:42:00.780><c> the</c>

00:42:01.040 --> 00:42:01.050 align:start position:0%
have to do some things to read the
 

00:42:01.050 --> 00:42:02.510 align:start position:0%
have to do some things to read the
actual<00:42:01.350><c> values</c><00:42:01.680><c> in</c><00:42:01.830><c> the</c><00:42:01.920><c> object</c><00:42:02.250><c> but</c><00:42:02.369><c> it's</c>

00:42:02.510 --> 00:42:02.520 align:start position:0%
actual values in the object but it's
 

00:42:02.520 --> 00:42:04.820 align:start position:0%
actual values in the object but it's
doable<00:42:02.880><c> using</c><00:42:03.720><c> this</c><00:42:03.810><c> approach</c><00:42:04.170><c> where</c><00:42:04.740><c> you</c>

00:42:04.820 --> 00:42:04.830 align:start position:0%
doable using this approach where you
 

00:42:04.830 --> 00:42:06.859 align:start position:0%
doable using this approach where you
navigate<00:42:04.980><c> from</c><00:42:05.490><c> pointer</c><00:42:06.030><c> of</c><00:42:06.150><c> the</c><00:42:06.180><c> object</c><00:42:06.600><c> to</c>

00:42:06.859 --> 00:42:06.869 align:start position:0%
navigate from pointer of the object to
 

00:42:06.869 --> 00:42:08.570 align:start position:0%
navigate from pointer of the object to
the<00:42:06.900><c> type</c><00:42:07.230><c> to</c><00:42:07.590><c> the</c><00:42:07.740><c> values</c><00:42:08.070><c> that</c><00:42:08.100><c> are</c><00:42:08.369><c> in</c><00:42:08.400><c> the</c>

00:42:08.570 --> 00:42:08.580 align:start position:0%
the type to the values that are in the
 

00:42:08.580 --> 00:42:14.530 align:start position:0%
the type to the values that are in the
type<00:42:09.530><c> right</c><00:42:10.530><c> let's</c><00:42:10.890><c> look</c><00:42:11.010><c> at</c><00:42:11.160><c> another</c><00:42:11.220><c> one</c><00:42:11.670><c> I</c>

00:42:14.530 --> 00:42:14.540 align:start position:0%
 
 

00:42:14.540 --> 00:42:17.660 align:start position:0%
 
could<00:42:15.540><c> also</c><00:42:15.690><c> dump</c><00:42:16.350><c> string</c><00:42:16.770><c> duplicates</c><00:42:17.340><c> so</c><00:42:17.550><c> I</c>

00:42:17.660 --> 00:42:17.670 align:start position:0%
could also dump string duplicates so I
 

00:42:17.670 --> 00:42:19.220 align:start position:0%
could also dump string duplicates so I
could<00:42:17.880><c> look</c><00:42:18.030><c> into</c><00:42:18.240><c> memory</c><00:42:18.660><c> and</c><00:42:18.840><c> look</c><00:42:19.050><c> at</c>

00:42:19.220 --> 00:42:19.230 align:start position:0%
could look into memory and look at
 

00:42:19.230 --> 00:42:21.770 align:start position:0%
could look into memory and look at
duplicate<00:42:19.920><c> strings</c><00:42:20.310><c> in</c><00:42:20.640><c> my</c><00:42:20.700><c> memory</c><00:42:21.240><c> space</c><00:42:21.570><c> so</c>

00:42:21.770 --> 00:42:21.780 align:start position:0%
duplicate strings in my memory space so
 

00:42:21.780 --> 00:42:23.810 align:start position:0%
duplicate strings in my memory space so
if<00:42:21.900><c> we</c><00:42:22.050><c> run</c><00:42:22.230><c> this</c><00:42:22.410><c> one</c><00:42:22.650><c> you</c><00:42:23.220><c> will</c><00:42:23.340><c> see</c><00:42:23.400><c> that</c>

00:42:23.810 --> 00:42:23.820 align:start position:0%
if we run this one you will see that
 

00:42:23.820 --> 00:42:27.140 align:start position:0%
if we run this one you will see that
there<00:42:24.210><c> are</c><00:42:24.450><c> a</c><00:42:25.400><c> lot</c><00:42:26.400><c> of</c><00:42:26.430><c> string</c><00:42:26.760><c> duplic</c>

00:42:27.140 --> 00:42:27.150 align:start position:0%
there are a lot of string duplic
 

00:42:27.150 --> 00:42:28.910 align:start position:0%
there are a lot of string duplic
it's<00:42:27.270><c> in</c><00:42:27.450><c> a</c><00:42:27.540><c> default</c><00:42:27.840><c> application</c><00:42:28.560><c> so</c><00:42:28.740><c> you'll</c>

00:42:28.910 --> 00:42:28.920 align:start position:0%
it's in a default application so you'll
 

00:42:28.920 --> 00:42:31.160 align:start position:0%
it's in a default application so you'll
see<00:42:29.100><c> there</c><00:42:29.280><c> are</c><00:42:29.340><c> 16</c><00:42:29.820><c> usages</c><00:42:30.330><c> of</c><00:42:30.540><c> the</c><00:42:30.750><c> month</c><00:42:30.960><c> of</c>

00:42:31.160 --> 00:42:31.170 align:start position:0%
see there are 16 usages of the month of
 

00:42:31.170 --> 00:42:33.890 align:start position:0%
see there are 16 usages of the month of
May<00:42:31.440><c> in</c><00:42:31.770><c> Dutch</c><00:42:32.100><c> I</c><00:42:32.460><c> don't</c><00:42:33.390><c> know</c><00:42:33.480><c> why</c><00:42:33.660><c> there</c><00:42:33.840><c> are</c>

00:42:33.890 --> 00:42:33.900 align:start position:0%
May in Dutch I don't know why there are
 

00:42:33.900 --> 00:42:36.410 align:start position:0%
May in Dutch I don't know why there are
16<00:42:34.260><c> instances</c><00:42:34.770><c> of</c><00:42:34.980><c> that</c><00:42:35.220><c> one</c><00:42:35.430><c> in</c><00:42:35.610><c> memory</c><00:42:35.910><c> but</c>

00:42:36.410 --> 00:42:36.420 align:start position:0%
16 instances of that one in memory but
 

00:42:36.420 --> 00:42:37.910 align:start position:0%
16 instances of that one in memory but
they<00:42:36.570><c> are</c><00:42:36.690><c> in</c><00:42:36.810><c> memory</c><00:42:37.020><c> for</c><00:42:37.350><c> my</c><00:42:37.470><c> very</c><00:42:37.710><c> simple</c>

00:42:37.910 --> 00:42:37.920 align:start position:0%
they are in memory for my very simple
 

00:42:37.920 --> 00:42:41.330 align:start position:0%
they are in memory for my very simple
hello<00:42:38.280><c> world</c><00:42:38.580><c> application</c><00:42:39.800><c> and</c><00:42:40.800><c> and</c><00:42:41.040><c> so</c><00:42:41.190><c> on</c>

00:42:41.330 --> 00:42:41.340 align:start position:0%
hello world application and and so on
 

00:42:41.340 --> 00:42:44.390 align:start position:0%
hello world application and and so on
the<00:42:42.060><c> way</c><00:42:42.180><c> this</c><00:42:42.330><c> one</c><00:42:42.540><c> works</c><00:42:42.780><c> is</c><00:42:43.110><c> pretty</c><00:42:44.010><c> similar</c>

00:42:44.390 --> 00:42:44.400 align:start position:0%
the way this one works is pretty similar
 

00:42:44.400 --> 00:42:46.430 align:start position:0%
the way this one works is pretty similar
to<00:42:44.550><c> the</c><00:42:44.790><c> previous</c><00:42:44.820><c> one</c><00:42:45.240><c> again</c><00:42:46.050><c> I</c><00:42:46.170><c> enumerate</c>

00:42:46.430 --> 00:42:46.440 align:start position:0%
to the previous one again I enumerate
 

00:42:46.440 --> 00:42:49.010 align:start position:0%
to the previous one again I enumerate
all<00:42:46.920><c> the</c><00:42:46.950><c> addresses</c><00:42:47.460><c> that</c><00:42:47.610><c> I</c><00:42:47.670><c> have</c><00:42:47.970><c> then</c><00:42:48.720><c> I</c><00:42:48.840><c> get</c>

00:42:49.010 --> 00:42:49.020 align:start position:0%
all the addresses that I have then I get
 

00:42:49.020 --> 00:42:52.340 align:start position:0%
all the addresses that I have then I get
the<00:42:49.140><c> object</c><00:42:49.290><c> type</c><00:42:49.710><c> if</c><00:42:50.250><c> it's</c><00:42:50.820><c> a</c><00:42:50.940><c> string</c><00:42:51.300><c> I</c><00:42:51.540><c> just</c>

00:42:52.340 --> 00:42:52.350 align:start position:0%
the object type if it's a string I just
 

00:42:52.350 --> 00:42:54.500 align:start position:0%
the object type if it's a string I just
count<00:42:52.620><c> the</c><00:42:52.890><c> number</c><00:42:53.130><c> of</c><00:42:53.160><c> strings</c><00:42:53.580><c> I</c><00:42:53.910><c> get</c><00:42:54.390><c> the</c>

00:42:54.500 --> 00:42:54.510 align:start position:0%
count the number of strings I get the
 

00:42:54.510 --> 00:42:56.540 align:start position:0%
count the number of strings I get the
value<00:42:54.810><c> of</c><00:42:54.900><c> my</c><00:42:55.050><c> string</c><00:42:55.410><c> and</c><00:42:55.620><c> then</c><00:42:56.070><c> add</c><00:42:56.250><c> them</c>

00:42:56.540 --> 00:42:56.550 align:start position:0%
value of my string and then add them
 

00:42:56.550 --> 00:42:58.820 align:start position:0%
value of my string and then add them
into<00:42:56.880><c> a</c><00:42:56.910><c> dictionary</c><00:42:57.300><c> of</c><00:42:57.810><c> unique</c><00:42:58.200><c> strings</c><00:42:58.530><c> and</c>

00:42:58.820 --> 00:42:58.830 align:start position:0%
into a dictionary of unique strings and
 

00:42:58.830 --> 00:43:01.250 align:start position:0%
into a dictionary of unique strings and
set<00:42:59.520><c> the</c><00:42:59.640><c> number</c><00:42:59.970><c> plus</c><00:43:00.480><c> one</c><00:43:00.510><c> so</c><00:43:00.960><c> then</c><00:43:01.110><c> I</c><00:43:01.200><c> can</c>

00:43:01.250 --> 00:43:01.260 align:start position:0%
set the number plus one so then I can
 

00:43:01.260 --> 00:43:04.810 align:start position:0%
set the number plus one so then I can
count<00:43:01.590><c> the</c><00:43:01.860><c> occurrences</c><00:43:02.040><c> of</c><00:43:02.430><c> this</c><00:43:02.640><c> one</c>

00:43:04.810 --> 00:43:04.820 align:start position:0%
count the occurrences of this one
 

00:43:04.820 --> 00:43:07.070 align:start position:0%
count the occurrences of this one
there's<00:43:05.820><c> another</c><00:43:05.880><c> one</c><00:43:06.240><c> that</c><00:43:06.360><c> I</c><00:43:06.420><c> can</c><00:43:06.660><c> do</c><00:43:06.840><c> and</c>

00:43:07.070 --> 00:43:07.080 align:start position:0%
there's another one that I can do and
 

00:43:07.080 --> 00:43:10.190 align:start position:0%
there's another one that I can do and
that<00:43:07.740><c> is</c><00:43:07.890><c> dumping</c><00:43:08.340><c> retention</c><00:43:09.150><c> of</c><00:43:09.330><c> objects</c><00:43:10.020><c> in</c>

00:43:10.190 --> 00:43:10.200 align:start position:0%
that is dumping retention of objects in
 

00:43:10.200 --> 00:43:13.400 align:start position:0%
that is dumping retention of objects in
my<00:43:10.350><c> memory</c><00:43:11.040><c> space</c><00:43:11.310><c> so</c><00:43:11.690><c> let's</c><00:43:12.690><c> quickly</c><00:43:12.990><c> jump</c>

00:43:13.400 --> 00:43:13.410 align:start position:0%
my memory space so let's quickly jump
 

00:43:13.410 --> 00:43:17.090 align:start position:0%
my memory space so let's quickly jump
back<00:43:13.560><c> to</c><00:43:13.620><c> the</c><00:43:13.770><c> profiler</c><00:43:14.310><c> and</c><00:43:15.560><c> let's</c><00:43:16.560><c> me</c><00:43:16.710><c> first</c>

00:43:17.090 --> 00:43:17.100 align:start position:0%
back to the profiler and let's me first
 

00:43:17.100 --> 00:43:19.520 align:start position:0%
back to the profiler and let's me first
look<00:43:17.250><c> at</c><00:43:17.400><c> the</c><00:43:17.490><c> source</c><00:43:17.700><c> code</c><00:43:17.820><c> again</c><00:43:18.180><c> so</c><00:43:19.080><c> in</c><00:43:19.200><c> here</c>

00:43:19.520 --> 00:43:19.530 align:start position:0%
look at the source code again so in here
 

00:43:19.530 --> 00:43:21.680 align:start position:0%
look at the source code again so in here
I<00:43:19.710><c> actually</c><00:43:20.010><c> created</c><00:43:20.640><c> a</c><00:43:20.820><c> memory</c><00:43:21.090><c> leak</c><00:43:21.240><c> I</c><00:43:21.480><c> think</c>

00:43:21.680 --> 00:43:21.690 align:start position:0%
I actually created a memory leak I think
 

00:43:21.690 --> 00:43:23.270 align:start position:0%
I actually created a memory leak I think
a<00:43:21.780><c> lot</c><00:43:21.930><c> of</c><00:43:21.960><c> you</c><00:43:22.170><c> will</c><00:43:22.350><c> spot</c><00:43:22.680><c> the</c><00:43:22.830><c> memory</c><00:43:23.100><c> leak</c>

00:43:23.270 --> 00:43:23.280 align:start position:0%
a lot of you will spot the memory leak
 

00:43:23.280 --> 00:43:25.970 align:start position:0%
a lot of you will spot the memory leak
that<00:43:23.430><c> I</c><00:43:23.550><c> created</c><00:43:23.880><c> here</c><00:43:24.680><c> even</c><00:43:25.680><c> though</c><00:43:25.830><c> I'm</c>

00:43:25.970 --> 00:43:25.980 align:start position:0%
that I created here even though I'm
 

00:43:25.980 --> 00:43:28.310 align:start position:0%
that I created here even though I'm
expecting<00:43:26.670><c> this</c><00:43:26.910><c> class</c><00:43:27.360><c> to</c><00:43:27.570><c> be</c><00:43:27.690><c> disposed</c><00:43:28.140><c> at</c>

00:43:28.310 --> 00:43:28.320 align:start position:0%
expecting this class to be disposed at
 

00:43:28.320 --> 00:43:29.720 align:start position:0%
expecting this class to be disposed at
some<00:43:28.530><c> point</c><00:43:28.770><c> and</c><00:43:28.980><c> be</c><00:43:29.100><c> collected</c><00:43:29.580><c> by</c><00:43:29.700><c> the</c>

00:43:29.720 --> 00:43:29.730 align:start position:0%
some point and be collected by the
 

00:43:29.730 --> 00:43:31.910 align:start position:0%
some point and be collected by the
garbage<00:43:30.000><c> collector</c><00:43:30.210><c> whenever</c><00:43:30.750><c> it</c><00:43:31.050><c> runs</c><00:43:31.290><c> there</c>

00:43:31.910 --> 00:43:31.920 align:start position:0%
garbage collector whenever it runs there
 

00:43:31.920 --> 00:43:34.280 align:start position:0%
garbage collector whenever it runs there
is<00:43:32.040><c> still</c><00:43:32.280><c> a</c><00:43:32.310><c> timer</c><00:43:32.670><c> that</c><00:43:33.000><c> references</c><00:43:33.870><c> my</c><00:43:34.080><c> own</c>

00:43:34.280 --> 00:43:34.290 align:start position:0%
is still a timer that references my own
 

00:43:34.290 --> 00:43:36.470 align:start position:0%
is still a timer that references my own
tick<00:43:34.560><c> and</c><00:43:34.860><c> I</c><00:43:34.920><c> should</c><00:43:35.100><c> actually</c><00:43:35.450><c> close</c><00:43:36.450><c> my</c>

00:43:36.470 --> 00:43:36.480 align:start position:0%
tick and I should actually close my
 

00:43:36.480 --> 00:43:38.810 align:start position:0%
tick and I should actually close my
timer<00:43:36.990><c> or</c><00:43:37.320><c> dispose</c><00:43:37.710><c> my</c><00:43:37.740><c> timer</c><00:43:38.190><c> as</c><00:43:38.430><c> well</c><00:43:38.460><c> if</c><00:43:38.700><c> I</c>

00:43:38.810 --> 00:43:38.820 align:start position:0%
timer or dispose my timer as well if I
 

00:43:38.820 --> 00:43:40.520 align:start position:0%
timer or dispose my timer as well if I
want<00:43:39.030><c> the</c><00:43:39.120><c> object</c><00:43:39.210><c> to</c><00:43:39.480><c> disappear</c><00:43:39.960><c> from</c><00:43:40.170><c> memory</c>

00:43:40.520 --> 00:43:40.530 align:start position:0%
want the object to disappear from memory
 

00:43:40.530 --> 00:43:43.370 align:start position:0%
want the object to disappear from memory
this<00:43:41.490><c> is</c><00:43:41.640><c> very</c><00:43:41.940><c> very</c><00:43:42.360><c> visible</c><00:43:42.630><c> if</c><00:43:42.990><c> you</c><00:43:43.110><c> look</c><00:43:43.260><c> at</c>

00:43:43.370 --> 00:43:43.380 align:start position:0%
this is very very visible if you look at
 

00:43:43.380 --> 00:43:46.460 align:start position:0%
this is very very visible if you look at
it<00:43:43.500><c> in</c><00:43:44.070><c> a</c><00:43:44.250><c> profiler</c><00:43:44.970><c> if</c><00:43:45.390><c> we</c><00:43:46.020><c> would</c><00:43:46.200><c> take</c><00:43:46.410><c> a</c>

00:43:46.460 --> 00:43:46.470 align:start position:0%
it in a profiler if we would take a
 

00:43:46.470 --> 00:43:48.470 align:start position:0%
it in a profiler if we would take a
snapshot<00:43:46.830><c> of</c><00:43:47.160><c> my</c><00:43:47.430><c> object</c><00:43:47.820><c> you</c><00:43:48.030><c> will</c><00:43:48.180><c> see</c><00:43:48.330><c> that</c>

00:43:48.470 --> 00:43:48.480 align:start position:0%
snapshot of my object you will see that
 

00:43:48.480 --> 00:43:50.000 align:start position:0%
snapshot of my object you will see that
my<00:43:48.660><c> clock</c><00:43:48.900><c> is</c><00:43:49.080><c> still</c><00:43:49.290><c> in</c><00:43:49.410><c> memory</c><00:43:49.590><c> because</c>

00:43:50.000 --> 00:43:50.010 align:start position:0%
my clock is still in memory because
 

00:43:50.010 --> 00:43:51.590 align:start position:0%
my clock is still in memory because
there's<00:43:50.220><c> a</c><00:43:50.280><c> timer</c><00:43:50.550><c> callback</c><00:43:51.030><c> linking</c><00:43:51.450><c> my</c>

00:43:51.590 --> 00:43:51.600 align:start position:0%
there's a timer callback linking my
 

00:43:51.600 --> 00:43:53.660 align:start position:0%
there's a timer callback linking my
clock<00:43:51.900><c> and</c><00:43:52.170><c> it's</c><00:43:52.590><c> in</c><00:43:52.890><c> memory</c><00:43:53.190><c> because</c><00:43:53.550><c> of</c>

00:43:53.660 --> 00:43:53.670 align:start position:0%
clock and it's in memory because of
 

00:43:53.670 --> 00:43:56.810 align:start position:0%
clock and it's in memory because of
deaths<00:43:53.880><c> well</c><00:43:54.690><c> the</c><00:43:54.960><c> thing</c><00:43:55.140><c> is</c><00:43:55.170><c> with</c><00:43:55.830><c> CLR</c><00:43:56.310><c> MV</c><00:43:56.550><c> I</c>

00:43:56.810 --> 00:43:56.820 align:start position:0%
deaths well the thing is with CLR MV I
 

00:43:56.820 --> 00:44:03.290 align:start position:0%
deaths well the thing is with CLR MV I
can<00:43:57.750><c> write</c><00:43:59.150><c> similar</c><00:44:00.150><c> codes</c><00:44:01.670><c> that</c><00:44:02.670><c> dumps</c><00:44:03.150><c> the</c>

00:44:03.290 --> 00:44:03.300 align:start position:0%
can write similar codes that dumps the
 

00:44:03.300 --> 00:44:05.150 align:start position:0%
can write similar codes that dumps the
retention<00:44:03.600><c> path</c><00:44:03.990><c> to</c><00:44:04.260><c> my</c><00:44:04.440><c> clock</c><00:44:04.710><c> and</c><00:44:04.950><c> you</c><00:44:05.010><c> will</c>

00:44:05.150 --> 00:44:05.160 align:start position:0%
retention path to my clock and you will
 

00:44:05.160 --> 00:44:06.620 align:start position:0%
retention path to my clock and you will
see<00:44:05.310><c> that</c><00:44:05.430><c> my</c><00:44:05.610><c> clock</c><00:44:05.850><c> is</c><00:44:06.090><c> being</c><00:44:06.330><c> held</c><00:44:06.540><c> in</c>

00:44:06.620 --> 00:44:06.630 align:start position:0%
see that my clock is being held in
 

00:44:06.630 --> 00:44:08.630 align:start position:0%
see that my clock is being held in
memory<00:44:06.840><c> by</c><00:44:07.110><c> a</c><00:44:07.140><c> timer</c><00:44:07.470><c> callback</c><00:44:07.980><c> a</c><00:44:08.100><c> timer</c><00:44:08.370><c> cue</c>

00:44:08.630 --> 00:44:08.640 align:start position:0%
memory by a timer callback a timer cue
 

00:44:08.640 --> 00:44:10.610 align:start position:0%
memory by a timer callback a timer cue
helper<00:44:09.030><c> in</c><00:44:09.180><c> the</c><00:44:09.210><c> timer</c><00:44:09.480><c> queue</c><00:44:09.810><c> and</c><00:44:10.020><c> I</c><00:44:10.440><c> could</c>

00:44:10.610 --> 00:44:10.620 align:start position:0%
helper in the timer queue and I could
 

00:44:10.620 --> 00:44:13.000 align:start position:0%
helper in the timer queue and I could
even<00:44:10.800><c> chart</c><00:44:11.280><c> this</c><00:44:11.490><c> and</c><00:44:11.760><c> show</c><00:44:12.060><c> a</c><00:44:12.090><c> nice</c><00:44:12.360><c> charts</c>

00:44:13.000 --> 00:44:13.010 align:start position:0%
even chart this and show a nice charts
 

00:44:13.010 --> 00:44:16.220 align:start position:0%
even chart this and show a nice charts
of<00:44:14.010><c> what's</c><00:44:14.700><c> the</c><00:44:14.880><c> retention</c><00:44:15.240><c> path</c><00:44:15.600><c> to</c><00:44:15.870><c> my</c><00:44:15.990><c> clock</c>

00:44:16.220 --> 00:44:16.230 align:start position:0%
of what's the retention path to my clock
 

00:44:16.230 --> 00:44:17.840 align:start position:0%
of what's the retention path to my clock
looks<00:44:16.470><c> like</c><00:44:16.680><c> if</c><00:44:16.860><c> you</c><00:44:16.950><c> use</c><00:44:17.130><c> any</c><00:44:17.370><c> charting</c>

00:44:17.840 --> 00:44:17.850 align:start position:0%
looks like if you use any charting
 

00:44:17.850 --> 00:44:20.000 align:start position:0%
looks like if you use any charting
library<00:44:18.240><c> so</c><00:44:18.420><c> that's</c><00:44:18.600><c> kind</c><00:44:18.930><c> of</c><00:44:18.960><c> nice</c><00:44:19.170><c> to</c><00:44:19.350><c> work</c>

00:44:20.000 --> 00:44:20.010 align:start position:0%
library so that's kind of nice to work
 

00:44:20.010 --> 00:44:23.090 align:start position:0%
library so that's kind of nice to work
with<00:44:20.120><c> the</c><00:44:21.120><c> way</c><00:44:21.210><c> this</c><00:44:21.390><c> one</c><00:44:21.600><c> works</c><00:44:21.840><c> is</c><00:44:22.110><c> slightly</c>

00:44:23.090 --> 00:44:23.100 align:start position:0%
with the way this one works is slightly
 

00:44:23.100 --> 00:44:26.150 align:start position:0%
with the way this one works is slightly
more<00:44:23.460><c> complicated</c><00:44:23.850><c> but</c><00:44:24.810><c> the</c><00:44:24.990><c> idea</c><00:44:25.290><c> is</c><00:44:25.380><c> that</c><00:44:25.860><c> in</c>

00:44:26.150 --> 00:44:26.160 align:start position:0%
more complicated but the idea is that in
 

00:44:26.160 --> 00:44:28.790 align:start position:0%
more complicated but the idea is that in
my<00:44:26.400><c> program</c><00:44:27.000><c> here</c><00:44:27.300><c> again</c><00:44:27.990><c> I</c><00:44:28.170><c> enumerate</c><00:44:28.650><c> the</c>

00:44:28.790 --> 00:44:28.800 align:start position:0%
my program here again I enumerate the
 

00:44:28.800 --> 00:44:33.470 align:start position:0%
my program here again I enumerate the
heap<00:44:29.010><c> I</c><00:44:29.250><c> first</c><00:44:29.760><c> tried</c><00:44:30.180><c> to</c><00:44:30.360><c> find</c><00:44:30.630><c> my</c><00:44:31.110><c> clock</c><00:44:32.480><c> so</c>

00:44:33.470 --> 00:44:33.480 align:start position:0%
heap I first tried to find my clock so
 

00:44:33.480 --> 00:44:35.930 align:start position:0%
heap I first tried to find my clock so
whenever<00:44:33.900><c> I</c><00:44:34.140><c> find</c><00:44:34.470><c> my</c><00:44:34.770><c> clock</c><00:44:35.250><c> where</c><00:44:35.700><c> is</c><00:44:35.790><c> the</c>

00:44:35.930 --> 00:44:35.940 align:start position:0%
whenever I find my clock where is the
 

00:44:35.940 --> 00:44:41.520 align:start position:0%
whenever I find my clock where is the
code<00:44:36.150><c> there</c>

00:44:41.520 --> 00:44:41.530 align:start position:0%
 
 

00:44:41.530 --> 00:44:45.280 align:start position:0%
 
should<00:44:42.530><c> be</c><00:44:42.680><c> in</c><00:44:42.740><c> there</c><00:44:43.120><c> anyway</c><00:44:44.120><c> let's</c><00:44:45.050><c> search</c>

00:44:45.280 --> 00:44:45.290 align:start position:0%
should be in there anyway let's search
 

00:44:45.290 --> 00:44:47.620 align:start position:0%
should be in there anyway let's search
for<00:44:45.320><c> clocks</c><00:44:45.740><c> so</c><00:44:45.890><c> whenever</c><00:44:46.070><c> I</c><00:44:46.360><c> have</c><00:44:47.360><c> an</c><00:44:47.480><c> object</c>

00:44:47.620 --> 00:44:47.630 align:start position:0%
for clocks so whenever I have an object
 

00:44:47.630 --> 00:44:51.240 align:start position:0%
for clocks so whenever I have an object
that<00:44:47.930><c> matches</c><00:44:48.350><c> my</c><00:44:48.380><c> clock</c><00:44:48.830><c> type</c><00:44:49.130><c> name</c><00:44:49.370><c> I</c><00:44:49.640><c> will</c>

00:44:51.240 --> 00:44:51.250 align:start position:0%
that matches my clock type name I will
 

00:44:51.250 --> 00:44:54.010 align:start position:0%
that matches my clock type name I will
start<00:44:52.250><c> enumerate</c><00:44:52.760><c> in</c><00:44:52.940><c> the</c><00:44:53.060><c> entire</c><00:44:53.390><c> heap</c><00:44:53.720><c> and</c>

00:44:54.010 --> 00:44:54.020 align:start position:0%
start enumerate in the entire heap and
 

00:44:54.020 --> 00:44:55.660 align:start position:0%
start enumerate in the entire heap and
basically<00:44:54.470><c> built</c><00:44:54.800><c> the</c><00:44:54.950><c> tree</c><00:44:55.160><c> of</c><00:44:55.280><c> objects</c><00:44:55.610><c> that</c>

00:44:55.660 --> 00:44:55.670 align:start position:0%
basically built the tree of objects that
 

00:44:55.670 --> 00:44:57.220 align:start position:0%
basically built the tree of objects that
are<00:44:55.850><c> pointing</c><00:44:56.270><c> to</c><00:44:56.450><c> my</c><00:44:56.630><c> objects</c><00:44:57.080><c> to</c><00:44:57.200><c> that</c>

00:44:57.220 --> 00:44:57.230 align:start position:0%
are pointing to my objects to that
 

00:44:57.230 --> 00:44:59.500 align:start position:0%
are pointing to my objects to that
object<00:44:57.770><c> and</c><00:44:57.950><c> so</c><00:44:58.160><c> on</c><00:44:58.310><c> and</c><00:44:58.520><c> so</c><00:44:58.640><c> on</c><00:44:58.670><c> to</c><00:44:59.210><c> basically</c>

00:44:59.500 --> 00:44:59.510 align:start position:0%
object and so on and so on to basically
 

00:44:59.510 --> 00:45:01.120 align:start position:0%
object and so on and so on to basically
get<00:44:59.750><c> that</c><00:44:59.930><c> information</c><00:45:00.170><c> that</c><00:45:00.590><c> the</c><00:45:00.710><c> profiler</c>

00:45:01.120 --> 00:45:01.130 align:start position:0%
get that information that the profiler
 

00:45:01.130 --> 00:45:04.120 align:start position:0%
get that information that the profiler
gives<00:45:01.430><c> me</c><00:45:01.610><c> as</c><00:45:01.730><c> well</c><00:45:02.500><c> now</c><00:45:03.500><c> you</c><00:45:03.890><c> may</c><00:45:04.100><c> be</c>

00:45:04.120 --> 00:45:04.130 align:start position:0%
gives me as well now you may be
 

00:45:04.130 --> 00:45:06.610 align:start position:0%
gives me as well now you may be
wondering<00:45:04.570><c> what's</c><00:45:05.570><c> the</c><00:45:05.750><c> use</c><00:45:05.900><c> of</c><00:45:06.080><c> that</c><00:45:06.260><c> it's</c>

00:45:06.610 --> 00:45:06.620 align:start position:0%
wondering what's the use of that it's
 

00:45:06.620 --> 00:45:08.500 align:start position:0%
wondering what's the use of that it's
it's<00:45:06.890><c> all</c><00:45:07.070><c> nice</c><00:45:07.310><c> it's</c><00:45:07.550><c> nice</c><00:45:07.730><c> and</c><00:45:08.000><c> geeky</c><00:45:08.330><c> and</c><00:45:08.420><c> I</c>

00:45:08.500 --> 00:45:08.510 align:start position:0%
it's all nice it's nice and geeky and I
 

00:45:08.510 --> 00:45:10.150 align:start position:0%
it's all nice it's nice and geeky and I
can<00:45:08.690><c> look</c><00:45:08.840><c> into</c><00:45:09.080><c> the</c><00:45:09.200><c> memory</c><00:45:09.380><c> space</c><00:45:09.620><c> but</c><00:45:09.950><c> why</c>

00:45:10.150 --> 00:45:10.160 align:start position:0%
can look into the memory space but why
 

00:45:10.160 --> 00:45:12.910 align:start position:0%
can look into the memory space but why
would<00:45:10.400><c> I</c><00:45:10.430><c> do</c><00:45:10.550><c> that</c><00:45:10.730><c> well</c><00:45:11.600><c> turns</c><00:45:12.410><c> out</c><00:45:12.650><c> that</c>

00:45:12.910 --> 00:45:12.920 align:start position:0%
would I do that well turns out that
 

00:45:12.920 --> 00:45:14.950 align:start position:0%
would I do that well turns out that
having<00:45:13.160><c> that</c><00:45:13.460><c> programmatic</c><00:45:14.240><c> insight</c><00:45:14.690><c> into</c>

00:45:14.950 --> 00:45:14.960 align:start position:0%
having that programmatic insight into
 

00:45:14.960 --> 00:45:17.350 align:start position:0%
having that programmatic insight into
your<00:45:15.200><c> memory</c><00:45:15.530><c> space</c><00:45:15.800><c> can</c><00:45:16.490><c> be</c><00:45:16.640><c> quite</c><00:45:16.910><c> useful</c>

00:45:17.350 --> 00:45:17.360 align:start position:0%
your memory space can be quite useful
 

00:45:17.360 --> 00:45:19.810 align:start position:0%
your memory space can be quite useful
you<00:45:17.570><c> can</c><00:45:18.050><c> attach</c><00:45:18.350><c> to</c><00:45:18.380><c> any</c><00:45:18.800><c> running</c><00:45:19.190><c> process</c><00:45:19.610><c> or</c>

00:45:19.810 --> 00:45:19.820 align:start position:0%
you can attach to any running process or
 

00:45:19.820 --> 00:45:23.380 align:start position:0%
you can attach to any running process or
you<00:45:19.940><c> could</c><00:45:20.090><c> use</c><00:45:20.330><c> CLR</c><00:45:21.200><c> MV</c><00:45:21.470><c> to</c><00:45:22.040><c> attach</c><00:45:22.880><c> to</c><00:45:23.090><c> a</c><00:45:23.120><c> dump</c>

00:45:23.380 --> 00:45:23.390 align:start position:0%
you could use CLR MV to attach to a dump
 

00:45:23.390 --> 00:45:24.910 align:start position:0%
you could use CLR MV to attach to a dump
file<00:45:23.600><c> for</c><00:45:23.840><c> example</c><00:45:23.930><c> and</c><00:45:24.440><c> you</c><00:45:24.500><c> could</c><00:45:24.680><c> check</c>

00:45:24.910 --> 00:45:24.920 align:start position:0%
file for example and you could check
 

00:45:24.920 --> 00:45:27.160 align:start position:0%
file for example and you could check
whether<00:45:25.850><c> an</c><00:45:26.150><c> object</c><00:45:26.300><c> is</c><00:45:26.600><c> still</c><00:45:26.840><c> in</c><00:45:26.990><c> memory</c>

00:45:27.160 --> 00:45:27.170 align:start position:0%
whether an object is still in memory
 

00:45:27.170 --> 00:45:29.680 align:start position:0%
whether an object is still in memory
where<00:45:27.590><c> you</c><00:45:27.770><c> expected</c><00:45:28.340><c> it</c><00:45:28.490><c> to</c><00:45:28.730><c> be</c><00:45:28.880><c> reclaimed</c><00:45:29.450><c> by</c>

00:45:29.680 --> 00:45:29.690 align:start position:0%
where you expected it to be reclaimed by
 

00:45:29.690 --> 00:45:32.020 align:start position:0%
where you expected it to be reclaimed by
the<00:45:29.810><c> garbage</c><00:45:30.110><c> collector</c><00:45:30.260><c> so</c><00:45:31.220><c> for</c><00:45:31.400><c> example</c><00:45:31.850><c> if</c>

00:45:32.020 --> 00:45:32.030 align:start position:0%
the garbage collector so for example if
 

00:45:32.030 --> 00:45:33.670 align:start position:0%
the garbage collector so for example if
you<00:45:32.180><c> have</c><00:45:32.300><c> a</c><00:45:32.330><c> memory</c><00:45:32.720><c> leak</c><00:45:32.870><c> at</c><00:45:33.050><c> some</c><00:45:33.260><c> points</c>

00:45:33.670 --> 00:45:33.680 align:start position:0%
you have a memory leak at some points
 

00:45:33.680 --> 00:45:35.830 align:start position:0%
you have a memory leak at some points
you<00:45:33.860><c> could</c><00:45:34.490><c> analyze</c><00:45:34.730><c> the</c><00:45:35.060><c> memory</c><00:45:35.330><c> leak</c><00:45:35.540><c> then</c>

00:45:35.830 --> 00:45:35.840 align:start position:0%
you could analyze the memory leak then
 

00:45:35.840 --> 00:45:38.020 align:start position:0%
you could analyze the memory leak then
write<00:45:36.080><c> a</c><00:45:36.110><c> unit</c><00:45:36.500><c> test</c><00:45:36.560><c> that</c><00:45:36.830><c> uses</c><00:45:37.100><c> CLR</c><00:45:37.700><c> MD</c><00:45:38.000><c> or</c>

00:45:38.020 --> 00:45:38.030 align:start position:0%
write a unit test that uses CLR MD or
 

00:45:38.030 --> 00:45:41.860 align:start position:0%
write a unit test that uses CLR MD or
something<00:45:38.600><c> else</c><00:45:38.830><c> to</c><00:45:39.830><c> check</c><00:45:40.100><c> whether</c><00:45:40.660><c> the</c><00:45:41.660><c> fix</c>

00:45:41.860 --> 00:45:41.870 align:start position:0%
something else to check whether the fix
 

00:45:41.870 --> 00:45:43.150 align:start position:0%
something else to check whether the fix
that<00:45:42.050><c> you</c><00:45:42.170><c> are</c><00:45:42.290><c> creating</c><00:45:42.680><c> will</c><00:45:42.860><c> actually</c>

00:45:43.150 --> 00:45:43.160 align:start position:0%
that you are creating will actually
 

00:45:43.160 --> 00:45:44.800 align:start position:0%
that you are creating will actually
solve<00:45:43.400><c> that</c><00:45:43.550><c> memory</c><00:45:43.880><c> leak</c><00:45:44.060><c> and</c><00:45:44.330><c> then</c>

00:45:44.800 --> 00:45:44.810 align:start position:0%
solve that memory leak and then
 

00:45:44.810 --> 00:45:46.840 align:start position:0%
solve that memory leak and then
programmatically<00:45:45.620><c> check</c><00:45:45.980><c> it</c><00:45:46.130><c> every</c><00:45:46.460><c> time</c><00:45:46.700><c> you</c>

00:45:46.840 --> 00:45:46.850 align:start position:0%
programmatically check it every time you
 

00:45:46.850 --> 00:45:49.180 align:start position:0%
programmatically check it every time you
have<00:45:46.940><c> a</c><00:45:47.000><c> test</c><00:45:47.270><c> run</c><00:45:47.480><c> going</c><00:45:47.810><c> on</c><00:45:47.960><c> so</c><00:45:48.470><c> that</c><00:45:48.680><c> you</c><00:45:48.860><c> can</c>

00:45:49.180 --> 00:45:49.190 align:start position:0%
have a test run going on so that you can
 

00:45:49.190 --> 00:45:50.610 align:start position:0%
have a test run going on so that you can
be<00:45:49.340><c> sure</c><00:45:49.370><c> that</c><00:45:49.640><c> you're</c><00:45:49.940><c> not</c><00:45:49.970><c> really</c>

00:45:50.610 --> 00:45:50.620 align:start position:0%
be sure that you're not really
 

00:45:50.620 --> 00:45:53.560 align:start position:0%
be sure that you're not really
reintroducing<00:45:51.620><c> a</c><00:45:51.860><c> new</c><00:45:52.370><c> memory</c><00:45:52.670><c> leak</c><00:45:52.850><c> later</c><00:45:53.150><c> on</c>

00:45:53.560 --> 00:45:53.570 align:start position:0%
reintroducing a new memory leak later on
 

00:45:53.570 --> 00:45:56.620 align:start position:0%
reintroducing a new memory leak later on
CLR<00:45:54.500><c> on</c><00:45:54.620><c> this</c><00:45:54.800><c> one</c><00:45:55.160><c> way</c><00:45:55.430><c> to</c><00:45:55.490><c> do</c><00:45:55.820><c> that</c><00:45:56.030><c> there's</c>

00:45:56.620 --> 00:45:56.630 align:start position:0%
CLR on this one way to do that there's
 

00:45:56.630 --> 00:45:58.360 align:start position:0%
CLR on this one way to do that there's
another<00:45:56.840><c> way</c><00:45:57.050><c> that</c><00:45:57.320><c> is</c><00:45:57.440><c> that</c><00:45:57.710><c> dot</c><00:45:58.010><c> memory</c>

00:45:58.360 --> 00:45:58.370 align:start position:0%
another way that is that dot memory
 

00:45:58.370 --> 00:46:00.790 align:start position:0%
another way that is that dot memory
units<00:45:58.730><c> that's</c><00:45:58.970><c> one</c><00:45:59.180><c> that</c><00:45:59.330><c> we</c><00:45:59.510><c> use</c><00:46:00.200><c> in</c><00:46:00.470><c> sites</c>

00:46:00.790 --> 00:46:00.800 align:start position:0%
units that's one that we use in sites
 

00:46:00.800 --> 00:46:04.210 align:start position:0%
units that's one that we use in sites
jetbrains<00:46:01.640><c> I</c><00:46:02.200><c> have</c><00:46:03.200><c> a</c><00:46:03.260><c> nice</c><00:46:03.440><c> blog</c><00:46:03.680><c> post</c><00:46:03.950><c> there</c>

00:46:04.210 --> 00:46:04.220 align:start position:0%
jetbrains I have a nice blog post there
 

00:46:04.220 --> 00:46:07.000 align:start position:0%
jetbrains I have a nice blog post there
where<00:46:04.910><c> the</c><00:46:05.090><c> idea</c><00:46:05.420><c> is</c><00:46:05.480><c> that</c><00:46:05.690><c> you</c><00:46:06.620><c> can</c><00:46:06.800><c> write</c><00:46:06.980><c> a</c>

00:46:07.000 --> 00:46:07.010 align:start position:0%
where the idea is that you can write a
 

00:46:07.010 --> 00:46:09.370 align:start position:0%
where the idea is that you can write a
unit<00:46:07.370><c> test</c><00:46:07.430><c> and</c><00:46:07.880><c> let's</c><00:46:08.270><c> try</c><00:46:08.810><c> to</c><00:46:08.840><c> zoom</c><00:46:09.140><c> in</c><00:46:09.350><c> a</c>

00:46:09.370 --> 00:46:09.380 align:start position:0%
unit test and let's try to zoom in a
 

00:46:09.380 --> 00:46:11.320 align:start position:0%
unit test and let's try to zoom in a
little<00:46:09.560><c> bit</c><00:46:09.740><c> where</c><00:46:10.520><c> you</c><00:46:10.610><c> can</c><00:46:10.760><c> write</c><00:46:10.940><c> a</c><00:46:10.970><c> unit</c>

00:46:11.320 --> 00:46:11.330 align:start position:0%
little bit where you can write a unit
 

00:46:11.330 --> 00:46:13.450 align:start position:0%
little bit where you can write a unit
test<00:46:11.540><c> that</c><00:46:11.810><c> basically</c><00:46:12.320><c> captures</c><00:46:13.010><c> the</c><00:46:13.160><c> memory</c>

00:46:13.450 --> 00:46:13.460 align:start position:0%
test that basically captures the memory
 

00:46:13.460 --> 00:46:16.240 align:start position:0%
test that basically captures the memory
snapshots<00:46:13.990><c> snapshots</c><00:46:14.990><c> and</c><00:46:15.200><c> just</c><00:46:15.830><c> like</c><00:46:16.010><c> in</c><00:46:16.160><c> a</c>

00:46:16.240 --> 00:46:16.250 align:start position:0%
snapshots snapshots and just like in a
 

00:46:16.250 --> 00:46:18.610 align:start position:0%
snapshots snapshots and just like in a
profiler<00:46:16.700><c> gets</c><00:46:17.120><c> the</c><00:46:17.330><c> objects</c><00:46:17.750><c> from</c><00:46:18.140><c> my</c>

00:46:18.610 --> 00:46:18.620 align:start position:0%
profiler gets the objects from my
 

00:46:18.620 --> 00:46:21.070 align:start position:0%
profiler gets the objects from my
snapshots<00:46:19.160><c> checks</c><00:46:19.910><c> if</c><00:46:20.120><c> the</c><00:46:20.330><c> type</c><00:46:20.540><c> is</c><00:46:20.690><c> a</c><00:46:20.750><c> clock</c>

00:46:21.070 --> 00:46:21.080 align:start position:0%
snapshots checks if the type is a clock
 

00:46:21.080 --> 00:46:23.470 align:start position:0%
snapshots checks if the type is a clock
counts<00:46:21.950><c> the</c><00:46:22.070><c> objects</c><00:46:22.490><c> and</c><00:46:22.730><c> then</c><00:46:22.940><c> checks</c><00:46:23.240><c> if</c>

00:46:23.470 --> 00:46:23.480 align:start position:0%
counts the objects and then checks if
 

00:46:23.480 --> 00:46:25.420 align:start position:0%
counts the objects and then checks if
the<00:46:23.870><c> clock</c><00:46:24.170><c> was</c><00:46:24.380><c> actually</c><00:46:24.770><c> removed</c><00:46:24.980><c> from</c>

00:46:25.420 --> 00:46:25.430 align:start position:0%
the clock was actually removed from
 

00:46:25.430 --> 00:46:27.190 align:start position:0%
the clock was actually removed from
memory<00:46:25.730><c> at</c><00:46:25.970><c> the</c><00:46:26.300><c> point</c><00:46:26.510><c> that</c><00:46:26.690><c> I</c><00:46:26.780><c> wanted</c><00:46:27.080><c> to</c>

00:46:27.190 --> 00:46:27.200 align:start position:0%
memory at the point that I wanted to
 

00:46:27.200 --> 00:46:28.720 align:start position:0%
memory at the point that I wanted to
remove<00:46:27.500><c> this</c><00:46:27.620><c> one</c><00:46:27.800><c> so</c><00:46:28.010><c> that's</c><00:46:28.160><c> another</c><00:46:28.400><c> way</c><00:46:28.610><c> of</c>

00:46:28.720 --> 00:46:28.730 align:start position:0%
remove this one so that's another way of
 

00:46:28.730 --> 00:46:31.240 align:start position:0%
remove this one so that's another way of
doing<00:46:28.850><c> this</c><00:46:29.120><c> but</c><00:46:29.660><c> if</c><00:46:29.780><c> you're</c><00:46:29.930><c> really</c><00:46:30.140><c> into</c><00:46:30.740><c> CLR</c>

00:46:31.240 --> 00:46:31.250 align:start position:0%
doing this but if you're really into CLR
 

00:46:31.250 --> 00:46:32.590 align:start position:0%
doing this but if you're really into CLR
MV<00:46:31.490><c> you</c><00:46:31.610><c> can</c><00:46:31.790><c> write</c><00:46:31.940><c> something</c><00:46:32.300><c> like</c><00:46:32.330><c> this</c>

00:46:32.590 --> 00:46:32.600 align:start position:0%
MV you can write something like this
 

00:46:32.600 --> 00:46:37.360 align:start position:0%
MV you can write something like this
yourself<00:46:33.050><c> as</c><00:46:33.500><c> well</c><00:46:34.420><c> so</c><00:46:35.420><c> in</c><00:46:36.170><c> conclusion</c><00:46:36.440><c> the</c>

00:46:37.360 --> 00:46:37.370 align:start position:0%
yourself as well so in conclusion the
 

00:46:37.370 --> 00:46:39.250 align:start position:0%
yourself as well so in conclusion the
garbage<00:46:37.730><c> collector</c><00:46:38.180><c> is</c><00:46:38.330><c> optimized</c><00:46:38.990><c> for</c><00:46:39.110><c> high</c>

00:46:39.250 --> 00:46:39.260 align:start position:0%
garbage collector is optimized for high
 

00:46:39.260 --> 00:46:41.470 align:start position:0%
garbage collector is optimized for high
memory<00:46:39.950><c> traffic</c><00:46:40.190><c> and</c><00:46:40.550><c> short-lived</c><00:46:40.970><c> objects</c>

00:46:41.470 --> 00:46:41.480 align:start position:0%
memory traffic and short-lived objects
 

00:46:41.480 --> 00:46:43.570 align:start position:0%
memory traffic and short-lived objects
so<00:46:41.630><c> use</c><00:46:42.230><c> that</c><00:46:42.260><c> knowledge</c><00:46:42.650><c> use</c><00:46:43.070><c> the</c><00:46:43.250><c> garbage</c>

00:46:43.570 --> 00:46:43.580 align:start position:0%
so use that knowledge use the garbage
 

00:46:43.580 --> 00:46:45.970 align:start position:0%
so use that knowledge use the garbage
collector<00:46:44.000><c> don't</c><00:46:44.240><c> fear</c><00:46:44.540><c> allocations</c><00:46:45.320><c> because</c>

00:46:45.970 --> 00:46:45.980 align:start position:0%
collector don't fear allocations because
 

00:46:45.980 --> 00:46:47.830 align:start position:0%
collector don't fear allocations because
I<00:46:46.010><c> told</c><00:46:46.280><c> you</c><00:46:46.430><c> to</c><00:46:46.610><c> fear</c><00:46:46.820><c> them</c><00:46:47.000><c> it's</c><00:46:47.330><c> perfectly</c>

00:46:47.830 --> 00:46:47.840 align:start position:0%
I told you to fear them it's perfectly
 

00:46:47.840 --> 00:46:50.770 align:start position:0%
I told you to fear them it's perfectly
fine<00:46:48.110><c> very</c><00:46:48.350><c> often</c><00:46:48.880><c> but</c><00:46:49.880><c> if</c><00:46:50.090><c> you</c><00:46:50.270><c> suspect</c>

00:46:50.770 --> 00:46:50.780 align:start position:0%
fine very often but if you suspect
 

00:46:50.780 --> 00:46:52.030 align:start position:0%
fine very often but if you suspect
something<00:46:51.020><c> is</c><00:46:51.290><c> wrong</c>

00:46:52.030 --> 00:46:52.040 align:start position:0%
something is wrong
 

00:46:52.040 --> 00:46:54.130 align:start position:0%
something is wrong
or<00:46:52.100><c> you</c><00:46:52.400><c> see</c><00:46:52.640><c> Gentoo</c><00:46:53.150><c> pauses</c><00:46:53.660><c> or</c><00:46:53.810><c> things</c><00:46:54.050><c> like</c>

00:46:54.130 --> 00:46:54.140 align:start position:0%
or you see Gentoo pauses or things like
 

00:46:54.140 --> 00:46:56.050 align:start position:0%
or you see Gentoo pauses or things like
that<00:46:54.260><c> then</c><00:46:54.740><c> you</c><00:46:54.890><c> could</c><00:46:55.040><c> start</c><00:46:55.280><c> analyzing</c>

00:46:56.050 --> 00:46:56.060 align:start position:0%
that then you could start analyzing
 

00:46:56.060 --> 00:46:58.390 align:start position:0%
that then you could start analyzing
measuring<00:46:56.840><c> using</c><00:46:57.050><c> a</c><00:46:57.230><c> profiler</c><00:46:57.710><c> using</c><00:46:58.190><c> things</c>

00:46:58.390 --> 00:46:58.400 align:start position:0%
measuring using a profiler using things
 

00:46:58.400 --> 00:47:01.030 align:start position:0%
measuring using a profiler using things
like<00:46:58.520><c> CLR</c><00:46:59.090><c> MD</c><00:46:59.330><c> and</c><00:46:59.480><c> so</c><00:46:59.630><c> on</c><00:46:59.780><c> and</c><00:46:59.990><c> look</c><00:47:00.530><c> into</c><00:47:00.710><c> how</c>

00:47:01.030 --> 00:47:01.040 align:start position:0%
like CLR MD and so on and look into how
 

00:47:01.040 --> 00:47:02.830 align:start position:0%
like CLR MD and so on and look into how
you<00:47:01.100><c> could</c><00:47:01.430><c> optimize</c><00:47:01.850><c> your</c><00:47:02.030><c> code</c><00:47:02.300><c> but</c><00:47:02.630><c> don't</c>

00:47:02.830 --> 00:47:02.840 align:start position:0%
you could optimize your code but don't
 

00:47:02.840 --> 00:47:06.460 align:start position:0%
you could optimize your code but don't
prematurely<00:47:03.410><c> optimize</c><00:47:04.480><c> with</c><00:47:05.480><c> that</c><00:47:05.690><c> I</c><00:47:06.050><c> have</c><00:47:06.440><c> a</c>

00:47:06.460 --> 00:47:06.470 align:start position:0%
prematurely optimize with that I have a
 

00:47:06.470 --> 00:47:08.230 align:start position:0%
prematurely optimize with that I have a
tip<00:47:06.740><c> for</c><00:47:06.950><c> a</c><00:47:07.010><c> next</c><00:47:07.310><c> talk</c><00:47:07.520><c> there's</c><00:47:07.820><c> another</c><00:47:08.030><c> one</c>

00:47:08.230 --> 00:47:08.240 align:start position:0%
tip for a next talk there's another one
 

00:47:08.240 --> 00:47:10.690 align:start position:0%
tip for a next talk there's another one
by<00:47:08.420><c> a</c><00:47:08.450><c> nickel</c><00:47:08.870><c> a</c><00:47:08.960><c> later</c><00:47:09.590><c> today</c><00:47:09.830><c> that</c><00:47:10.490><c> we'll</c>

00:47:10.690 --> 00:47:10.700 align:start position:0%
by a nickel a later today that we'll
 

00:47:10.700 --> 00:47:13.690 align:start position:0%
by a nickel a later today that we'll
explore<00:47:10.940><c> more</c><00:47:11.420><c> of</c><00:47:11.480><c> the</c><00:47:11.600><c> stack</c><00:47:12.310><c> side</c><00:47:13.310><c> of</c><00:47:13.490><c> things</c>

00:47:13.690 --> 00:47:13.700 align:start position:0%
explore more of the stack side of things
 

00:47:13.700 --> 00:47:15.730 align:start position:0%
explore more of the stack side of things
so<00:47:13.940><c> go</c><00:47:14.630><c> there</c><00:47:14.840><c> if</c><00:47:14.960><c> you're</c><00:47:15.110><c> interested</c><00:47:15.260><c> in</c><00:47:15.680><c> this</c>

00:47:15.730 --> 00:47:15.740 align:start position:0%
so go there if you're interested in this
 

00:47:15.740 --> 00:47:18.130 align:start position:0%
so go there if you're interested in this
topic<00:47:15.920><c> and</c><00:47:16.370><c> if</c><00:47:16.760><c> not</c><00:47:16.940><c> thank</c><00:47:17.690><c> you</c><00:47:17.810><c> for</c><00:47:17.990><c> being</c>

00:47:18.130 --> 00:47:18.140 align:start position:0%
topic and if not thank you for being
 

00:47:18.140 --> 00:47:28.930 align:start position:0%
topic and if not thank you for being
here<00:47:18.440><c> and</c><00:47:18.560><c> enjoy</c><00:47:19.220><c> lunch</c><00:47:19.610><c> later</c><00:47:19.850><c> on</c><00:47:20.060><c> Thanks</c><00:47:27.940><c> any</c>

00:47:28.930 --> 00:47:28.940 align:start position:0%
here and enjoy lunch later on Thanks any
 

00:47:28.940 --> 00:47:37.870 align:start position:0%
here and enjoy lunch later on Thanks any
questions<00:47:29.360><c> thank</c><00:47:34.720><c> you</c><00:47:35.720><c> and</c><00:47:36.170><c> I</c><00:47:37.040><c> have</c><00:47:37.730><c> two</c>

00:47:37.870 --> 00:47:37.880 align:start position:0%
questions thank you and I have two
 

00:47:37.880 --> 00:47:40.360 align:start position:0%
questions thank you and I have two
questions<00:47:38.030><c> probably</c><00:47:38.840><c> first</c><00:47:39.740><c> question</c><00:47:40.160><c> why</c>

00:47:40.360 --> 00:47:40.370 align:start position:0%
questions probably first question why
 

00:47:40.370 --> 00:47:44.110 align:start position:0%
questions probably first question why
why<00:47:41.530><c> three</c><00:47:42.530><c> generations</c><00:47:42.680><c> why</c><00:47:43.430><c> not</c><00:47:43.730><c> four</c><00:47:44.090><c> or</c>

00:47:44.110 --> 00:47:44.120 align:start position:0%
why three generations why not four or
 

00:47:44.120 --> 00:47:46.320 align:start position:0%
why three generations why not four or
five<00:47:44.480><c> and</c><00:47:44.780><c> so</c><00:47:44.990><c> on</c><00:47:45.020><c> there</c><00:47:45.770><c> are</c><00:47:45.860><c> a</c><00:47:45.890><c> lot</c><00:47:46.070><c> of</c>

00:47:46.320 --> 00:47:46.330 align:start position:0%
five and so on there are a lot of
 

00:47:46.330 --> 00:47:50.590 align:start position:0%
five and so on there are a lot of
information<00:47:47.330><c> but</c><00:47:47.540><c> basically</c><00:47:49.510><c> it's</c><00:47:50.510><c> not</c>

00:47:50.590 --> 00:47:50.600 align:start position:0%
information but basically it's not
 

00:47:50.600 --> 00:47:53.340 align:start position:0%
information but basically it's not
really<00:47:50.960><c> clear</c><00:47:51.260><c> how</c><00:47:52.010><c> it</c><00:47:52.160><c> was</c><00:47:52.310><c> calculated</c><00:47:52.700><c> and</c>

00:47:53.340 --> 00:47:53.350 align:start position:0%
really clear how it was calculated and
 

00:47:53.350 --> 00:47:57.070 align:start position:0%
really clear how it was calculated and
second<00:47:54.350><c> one</c><00:47:54.530><c> so</c><00:47:54.830><c> as</c><00:47:55.070><c> I</c><00:47:55.550><c> understood</c><00:47:55.910><c> it</c><00:47:56.090><c> you</c><00:47:56.900><c> can</c>

00:47:57.070 --> 00:47:57.080 align:start position:0%
second one so as I understood it you can
 

00:47:57.080 --> 00:47:59.220 align:start position:0%
second one so as I understood it you can
basically<00:47:57.290><c> attach</c><00:47:57.920><c> to</c><00:47:58.220><c> any</c><00:47:58.370><c> process</c><00:47:58.700><c> and</c>

00:47:59.220 --> 00:47:59.230 align:start position:0%
basically attach to any process and
 

00:47:59.230 --> 00:48:03.100 align:start position:0%
basically attach to any process and
serve<00:48:00.230><c> memory</c><00:48:00.770><c> in</c><00:48:00.920><c> data</c><00:48:01.330><c> so</c><00:48:02.330><c> what</c><00:48:02.540><c> if</c><00:48:02.660><c> I</c><00:48:02.900><c> don't</c>

00:48:03.100 --> 00:48:03.110 align:start position:0%
serve memory in data so what if I don't
 

00:48:03.110 --> 00:48:06.820 align:start position:0%
serve memory in data so what if I don't
want<00:48:03.380><c> if</c><00:48:04.270><c> someone</c><00:48:05.270><c> will</c><00:48:05.480><c> if</c><00:48:06.020><c> I'm</c><00:48:06.260><c> right</c><00:48:06.500><c> in</c><00:48:06.680><c> a</c>

00:48:06.820 --> 00:48:06.830 align:start position:0%
want if someone will if I'm right in a
 

00:48:06.830 --> 00:48:09.550 align:start position:0%
want if someone will if I'm right in a
computer<00:48:07.250><c> game</c><00:48:07.280><c> right</c><00:48:07.850><c> I</c><00:48:08.120><c> don't</c><00:48:08.630><c> want</c><00:48:08.870><c> anyone</c>

00:48:09.550 --> 00:48:09.560 align:start position:0%
computer game right I don't want anyone
 

00:48:09.560 --> 00:48:12.490 align:start position:0%
computer game right I don't want anyone
to<00:48:09.740><c> attach</c><00:48:10.070><c> and</c><00:48:10.430><c> treat</c><00:48:10.700><c> some</c><00:48:11.000><c> data</c><00:48:11.300><c> and</c><00:48:11.750><c> so</c><00:48:12.350><c> on</c>

00:48:12.490 --> 00:48:12.500 align:start position:0%
to attach and treat some data and so on
 

00:48:12.500 --> 00:48:15.100 align:start position:0%
to attach and treat some data and so on
how<00:48:12.710><c> how</c><00:48:13.550><c> I</c><00:48:13.580><c> can</c><00:48:13.820><c> protect</c><00:48:14.150><c> my</c><00:48:14.390><c> application</c>

00:48:15.100 --> 00:48:15.110 align:start position:0%
how how I can protect my application
 

00:48:15.110 --> 00:48:18.430 align:start position:0%
how how I can protect my application
thank<00:48:15.560><c> you</c><00:48:15.770><c> so</c><00:48:16.400><c> on</c><00:48:17.150><c> your</c><00:48:17.510><c> first</c><00:48:17.660><c> question</c><00:48:18.020><c> on</c>

00:48:18.430 --> 00:48:18.440 align:start position:0%
thank you so on your first question on
 

00:48:18.440 --> 00:48:20.560 align:start position:0%
thank you so on your first question on
why<00:48:18.710><c> are</c><00:48:19.130><c> there</c><00:48:19.310><c> three</c><00:48:19.580><c> generations</c><00:48:20.240><c> I</c><00:48:20.480><c> think</c>

00:48:20.560 --> 00:48:20.570 align:start position:0%
why are there three generations I think
 

00:48:20.570 --> 00:48:22.510 align:start position:0%
why are there three generations I think
it's<00:48:20.960><c> just</c><00:48:21.170><c> an</c><00:48:21.350><c> arbitrary</c><00:48:21.890><c> number</c><00:48:22.130><c> that's</c>

00:48:22.510 --> 00:48:22.520 align:start position:0%
it's just an arbitrary number that's
 

00:48:22.520 --> 00:48:25.900 align:start position:0%
it's just an arbitrary number that's
Microsoft<00:48:23.480><c> in</c><00:48:23.600><c> this</c><00:48:23.750><c> case</c><00:48:23.990><c> chose</c><00:48:24.520><c> it</c><00:48:25.520><c> could</c><00:48:25.760><c> be</c>

00:48:25.900 --> 00:48:25.910 align:start position:0%
Microsoft in this case chose it could be
 

00:48:25.910 --> 00:48:28.270 align:start position:0%
Microsoft in this case chose it could be
five<00:48:26.150><c> it</c><00:48:26.390><c> could</c><00:48:26.570><c> be</c><00:48:26.690><c> ten</c><00:48:26.960><c> but</c><00:48:27.560><c> if</c><00:48:27.800><c> it</c><00:48:27.980><c> would</c><00:48:28.100><c> be</c>

00:48:28.270 --> 00:48:28.280 align:start position:0%
five it could be ten but if it would be
 

00:48:28.280 --> 00:48:30.160 align:start position:0%
five it could be ten but if it would be
ten<00:48:28.490><c> for</c><00:48:28.730><c> example</c><00:48:29.210><c> someone</c><00:48:29.660><c> in</c><00:48:29.930><c> the</c><00:48:30.050><c> audience</c>

00:48:30.160 --> 00:48:30.170 align:start position:0%
ten for example someone in the audience
 

00:48:30.170 --> 00:48:31.810 align:start position:0%
ten for example someone in the audience
would<00:48:30.560><c> ask</c><00:48:30.740><c> me</c><00:48:30.950><c> why</c><00:48:31.220><c> are</c><00:48:31.250><c> there</c><00:48:31.550><c> ten</c>

00:48:31.810 --> 00:48:31.820 align:start position:0%
would ask me why are there ten
 

00:48:31.820 --> 00:48:34.510 align:start position:0%
would ask me why are there ten
generations<00:48:32.180><c> so</c><00:48:33.140><c> they</c><00:48:33.170><c> just</c><00:48:33.680><c> decided</c><00:48:34.040><c> on</c><00:48:34.490><c> a</c>

00:48:34.510 --> 00:48:34.520 align:start position:0%
generations so they just decided on a
 

00:48:34.520 --> 00:48:37.510 align:start position:0%
generations so they just decided on a
number<00:48:34.880><c> I</c><00:48:34.910><c> guess</c><00:48:35.290><c> and</c><00:48:36.290><c> I</c><00:48:36.410><c> think</c><00:48:36.650><c> it</c><00:48:36.740><c> also</c><00:48:36.890><c> sort</c>

00:48:37.510 --> 00:48:37.520 align:start position:0%
number I guess and I think it also sort
 

00:48:37.520 --> 00:48:38.590 align:start position:0%
number I guess and I think it also sort
of<00:48:37.670><c> makes</c><00:48:37.850><c> sense</c><00:48:38.060><c> where</c><00:48:38.360><c> you</c><00:48:38.390><c> have</c>

00:48:38.590 --> 00:48:38.600 align:start position:0%
of makes sense where you have
 

00:48:38.600 --> 00:48:41.290 align:start position:0%
of makes sense where you have
short-lived<00:48:39.080><c> objects</c><00:48:39.700><c> medium</c><00:48:40.700><c> term</c><00:48:41.000><c> where</c>

00:48:41.290 --> 00:48:41.300 align:start position:0%
short-lived objects medium term where
 

00:48:41.300 --> 00:48:42.940 align:start position:0%
short-lived objects medium term where
after<00:48:41.690><c> two</c><00:48:41.870><c> collections</c><00:48:42.200><c> the</c><00:48:42.500><c> object</c><00:48:42.800><c> could</c>

00:48:42.940 --> 00:48:42.950 align:start position:0%
after two collections the object could
 

00:48:42.950 --> 00:48:45.580 align:start position:0%
after two collections the object could
be<00:48:43.010><c> reclaimed</c><00:48:43.460><c> and</c><00:48:43.790><c> then</c><00:48:43.940><c> everything</c><00:48:44.510><c> else</c><00:48:44.630><c> it</c>

00:48:45.580 --> 00:48:45.590 align:start position:0%
be reclaimed and then everything else it
 

00:48:45.590 --> 00:48:47.920 align:start position:0%
be reclaimed and then everything else it
gives<00:48:45.830><c> a</c><00:48:45.950><c> nice</c><00:48:46.160><c> balance</c><00:48:46.790><c> I</c><00:48:46.970><c> think</c><00:48:47.000><c> between</c><00:48:47.300><c> CPU</c>

00:48:47.920 --> 00:48:47.930 align:start position:0%
gives a nice balance I think between CPU
 

00:48:47.930 --> 00:48:50.470 align:start position:0%
gives a nice balance I think between CPU
usage<00:48:48.440><c> and</c><00:48:49.430><c> the</c><00:48:49.670><c> number</c><00:48:49.910><c> of</c><00:48:50.030><c> times</c><00:48:50.240><c> that</c><00:48:50.360><c> the</c>

00:48:50.470 --> 00:48:50.480 align:start position:0%
usage and the number of times that the
 

00:48:50.480 --> 00:48:51.970 align:start position:0%
usage and the number of times that the
garbage<00:48:50.780><c> collector</c><00:48:51.140><c> has</c><00:48:51.260><c> to</c><00:48:51.410><c> actually</c><00:48:51.740><c> pause</c>

00:48:51.970 --> 00:48:51.980 align:start position:0%
garbage collector has to actually pause
 

00:48:51.980 --> 00:48:54.460 align:start position:0%
garbage collector has to actually pause
your<00:48:52.550><c> application</c><00:48:53.150><c> to</c><00:48:53.330><c> run</c><00:48:53.510><c> garbage</c>

00:48:54.460 --> 00:48:54.470 align:start position:0%
your application to run garbage
 

00:48:54.470 --> 00:48:57.370 align:start position:0%
your application to run garbage
collection<00:48:55.030><c> on</c><00:48:56.030><c> the</c><00:48:56.240><c> second</c><00:48:56.570><c> question</c><00:48:56.900><c> how</c><00:48:57.320><c> do</c>

00:48:57.370 --> 00:48:57.380 align:start position:0%
collection on the second question how do
 

00:48:57.380 --> 00:48:59.320 align:start position:0%
collection on the second question how do
you<00:48:57.560><c> prevent</c><00:48:58.010><c> people</c><00:48:58.310><c> from</c><00:48:58.520><c> attaching</c><00:48:59.180><c> to</c>

00:48:59.320 --> 00:48:59.330 align:start position:0%
you prevent people from attaching to
 

00:48:59.330 --> 00:49:03.220 align:start position:0%
you prevent people from attaching to
your<00:48:59.360><c> memory</c><00:48:59.810><c> space</c><00:49:00.550><c> nuts</c><00:49:01.550><c> so</c><00:49:02.420><c> whenever</c><00:49:02.930><c> you</c>

00:49:03.220 --> 00:49:03.230 align:start position:0%
your memory space nuts so whenever you
 

00:49:03.230 --> 00:49:04.750 align:start position:0%
your memory space nuts so whenever you
run<00:49:03.410><c> your</c><00:49:03.560><c> application</c><00:49:04.160><c> it's</c><00:49:04.310><c> running</c><00:49:04.640><c> in</c>

00:49:04.750 --> 00:49:04.760 align:start position:0%
run your application it's running in
 

00:49:04.760 --> 00:49:05.319 align:start position:0%
run your application it's running in
your

00:49:05.319 --> 00:49:05.329 align:start position:0%
your
 

00:49:05.329 --> 00:49:08.199 align:start position:0%
your
and<00:49:05.690><c> that</c><00:49:06.380><c> net</c><00:49:06.589><c> gives</c><00:49:06.799><c> you</c><00:49:07.069><c> the</c><00:49:07.249><c> entry</c><00:49:07.789><c> points</c>

00:49:08.199 --> 00:49:08.209 align:start position:0%
and that net gives you the entry points
 

00:49:08.209 --> 00:49:10.180 align:start position:0%
and that net gives you the entry points
into<00:49:08.569><c> that</c><00:49:08.749><c> information</c><00:49:08.900><c> so</c><00:49:09.829><c> it's</c><00:49:09.979><c> always</c>

00:49:10.180 --> 00:49:10.190 align:start position:0%
into that information so it's always
 

00:49:10.190 --> 00:49:12.099 align:start position:0%
into that information so it's always
possible<00:49:10.819><c> for</c><00:49:10.880><c> people</c><00:49:11.150><c> to</c><00:49:11.359><c> do</c><00:49:11.599><c> something</c><00:49:11.839><c> like</c>

00:49:12.099 --> 00:49:12.109 align:start position:0%
possible for people to do something like
 

00:49:12.109 --> 00:49:15.339 align:start position:0%
possible for people to do something like
this<00:49:12.319><c> the</c><00:49:13.099><c> only</c><00:49:13.400><c> way</c><00:49:13.549><c> to</c><00:49:14.269><c> prevent</c><00:49:14.989><c> that</c><00:49:15.289><c> from</c>

00:49:15.339 --> 00:49:15.349 align:start position:0%
this the only way to prevent that from
 

00:49:15.349 --> 00:49:17.529 align:start position:0%
this the only way to prevent that from
happening<00:49:15.589><c> is</c><00:49:16.130><c> running</c><00:49:16.999><c> your</c><00:49:17.089><c> process</c>

00:49:17.529 --> 00:49:17.539 align:start position:0%
happening is running your process
 

00:49:17.539 --> 00:49:18.969 align:start position:0%
happening is running your process
elsewhere<00:49:18.109><c> so</c><00:49:18.319><c> if</c><00:49:18.440><c> you</c><00:49:18.529><c> have</c><00:49:18.650><c> a</c><00:49:18.680><c> server</c>

00:49:18.969 --> 00:49:18.979 align:start position:0%
elsewhere so if you have a server
 

00:49:18.979 --> 00:49:21.190 align:start position:0%
elsewhere so if you have a server
application<00:49:19.670><c> if</c><00:49:19.969><c> it</c><00:49:20.180><c> runs</c><00:49:20.390><c> there</c><00:49:20.660><c> the</c><00:49:20.869><c> client</c>

00:49:21.190 --> 00:49:21.200 align:start position:0%
application if it runs there the client
 

00:49:21.200 --> 00:49:22.930 align:start position:0%
application if it runs there the client
can<00:49:21.380><c> not</c><00:49:21.559><c> reach</c><00:49:21.950><c> out</c><00:49:22.130><c> to</c><00:49:22.279><c> the</c><00:49:22.400><c> memory</c><00:49:22.670><c> space</c><00:49:22.910><c> of</c>

00:49:22.930 --> 00:49:22.940 align:start position:0%
can not reach out to the memory space of
 

00:49:22.940 --> 00:49:25.329 align:start position:0%
can not reach out to the memory space of
the<00:49:23.150><c> server</c><00:49:23.359><c> there</c><00:49:23.709><c> but</c><00:49:24.709><c> it's</c><00:49:24.829><c> it's</c><00:49:25.039><c> always</c>

00:49:25.329 --> 00:49:25.339 align:start position:0%
the server there but it's it's always
 

00:49:25.339 --> 00:49:28.119 align:start position:0%
the server there but it's it's always
possible<00:49:25.549><c> to</c><00:49:25.849><c> attach</c>

